From 4b4aaab6de5c7674085f3d8235216e8239db1cb8 Mon Sep 17 00:00:00 2001
From: llde <lorenzofersteam@live.it>
Date: Tue, 13 Apr 2021 22:10:46 +0200
Subject: [PATCH] Josh HUD

---
 src/dxvk/hud/dxvk_hud_renderer.cpp | 46 +++++++++++++++++++++++++++++-
 src/dxvk/hud/dxvk_hud_renderer.h   |  8 +++++-
 2 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/src/dxvk/hud/dxvk_hud_renderer.cpp b/src/dxvk/hud/dxvk_hud_renderer.cpp
index 1de3607b..2a94a2c0 100644
--- a/src/dxvk/hud/dxvk_hud_renderer.cpp
+++ b/src/dxvk/hud/dxvk_hud_renderer.cpp
@@ -6,6 +6,8 @@
 #include <hud_text_frag.h>
 #include <hud_text_vert.h>
 
+#include <cmath>
+
 namespace dxvk::hud {
   
   HudRenderer::HudRenderer(const Rc<DxvkDevice>& device)
@@ -17,7 +19,8 @@ namespace dxvk::hud {
     m_fontImage     (createFontImage(device)),
     m_fontView      (createFontView(device)),
     m_fontSampler   (createFontSampler(device)),
-    m_vertexBuffer  (createVertexBuffer(device)) {
+    m_vertexBuffer  (createVertexBuffer(device)),
+    m_startTime     (dxvk::high_resolution_clock::now()) {
     this->initFontTexture(device);
     this->initCharMap();
   }
@@ -39,6 +42,45 @@ namespace dxvk::hud {
 
     allocVertexBufferSlice();
   }
+
+
+  static HudColor HSVToHudColor(float h, float s, float v, float a) {
+    float hh = std::fmod(h, 360.0f) / 60.0f;
+
+    uint32_t i = static_cast<uint32_t>(hh);
+
+    float ff = hh - float(i);
+
+    float p = v * (1.0f - s);
+    float q = v * (1.0f - (s * ff));
+    float t = v * (1.0f - (s * (1.0f - ff)));
+
+    switch (i) {
+      case 0: return { v, t, p, a };
+      case 1: return { q, v, p, a };
+      case 2: return { p, v, t, a };
+      case 3: return { p, q, v, a };
+      case 4: return { t, p, v, a };
+      default:
+      case 5: return { v, p, q, a };
+    }
+  }
+
+
+  HudColor HudRenderer::generateRainbowColor(HudColor color) {
+    auto now = dxvk::high_resolution_clock::now();
+
+    float secs = std::chrono::duration<float, std::ratio<1>>(now - m_startTime).count();
+
+    float extra = color.r +
+                  color.g * 2.0f +
+                  color.b * 3.0f;
+    extra /= 3.0f;
+
+    float h = (secs + extra) * 360.0f;
+
+    return HSVToHudColor(h, 0.75f, 1.0f, color.a);
+  }
   
   
   void HudRenderer::drawText(
@@ -51,6 +93,8 @@ namespace dxvk::hud {
     const float xscale = m_scale / std::max(float(m_surfaceSize.width),  1.0f);
     const float yscale = m_scale / std::max(float(m_surfaceSize.height), 1.0f);
 
+    color = generateRainbowColor(color);
+
     uint32_t vertexCount = 6 * text.size();
 
     if (m_currTextVertex   + vertexCount > MaxTextVertexCount
diff --git a/src/dxvk/hud/dxvk_hud_renderer.h b/src/dxvk/hud/dxvk_hud_renderer.h
index c5b8e1da..cb7cdfee 100644
--- a/src/dxvk/hud/dxvk_hud_renderer.h
+++ b/src/dxvk/hud/dxvk_hud_renderer.h
@@ -2,6 +2,8 @@
 
 #include "../dxvk_device.h"
 
+#include "../util/util_time.h"
+
 #include "dxvk_hud_font.h"
 
 namespace dxvk::hud {
@@ -96,6 +98,8 @@ namespace dxvk::hud {
             VkExtent2D        surfaceSize,
             float             scale);
     
+    HudColor generateRainbowColor(HudColor color);
+    
     void drawText(
             float             size,
             HudPos            pos,
@@ -148,6 +152,8 @@ namespace dxvk::hud {
     uint32_t            m_currTextInstance  = 0;
     uint32_t            m_currLineVertex    = 0;
 
+    dxvk::high_resolution_clock::time_point m_startTime;
+
     void allocVertexBufferSlice();
     
     void beginTextRendering();
@@ -179,4 +185,4 @@ namespace dxvk::hud {
     
   };
   
-}
\ No newline at end of file
+}
-- 
2.31.1

