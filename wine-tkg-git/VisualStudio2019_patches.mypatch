diff --git a/dlls/kernelbase/registry.c b/dlls/kernelbase/registry.c
index 30c5e9f6f3..d1fba99b05 100644
--- a/dlls/kernelbase/registry.c
+++ b/dlls/kernelbase/registry.c
@@ -3046,8 +3046,7 @@ LSTATUS WINAPI RegLoadAppKeyA(const char *file, HKEY *result, REGSAM sam, DWORD
     if (!file || reserved)
         return ERROR_INVALID_PARAMETER;
 
-    *result = (HKEY)0xdeadbeef;
-    return ERROR_SUCCESS;
+    return RegOpenKeyExA(HKEY_CURRENT_USER, "", KEY_ALL_ACCESS, 0, result);
 }
 
 /******************************************************************************
@@ -3061,8 +3060,7 @@ LSTATUS WINAPI RegLoadAppKeyW(const WCHAR *file, HKEY *result, REGSAM sam, DWORD
     if (!file || reserved)
         return ERROR_INVALID_PARAMETER;
 
-    *result = (HKEY)0xdeadbeef;
-    return ERROR_SUCCESS;
+    return RegOpenKeyExW(HKEY_CURRENT_USER, L"", KEY_ALL_ACCESS, 0, result);
 }
 
 /******************************************************************************

From 4262294bbcb5fa4b5a02396794de475d09cbf873 Mon Sep 17 00:00:00 2001
From: llde <lorenzofersteam@live.it>
Date: Mon, 3 Jul 2023 00:52:34 +0200
Subject: [PATCH] Partial implement SHAssocEnumHandlersForProtocolByApplication

---
 dlls/shell32/assoc.c      | 34 +++++++++++++++++++++++++++++++++-
 dlls/shell32/shell32.spec |  1 +
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/dlls/shell32/assoc.c b/dlls/shell32/assoc.c
index 339be6ac445..f3d91857fb4 100644
--- a/dlls/shell32/assoc.c
+++ b/dlls/shell32/assoc.c
@@ -777,7 +777,7 @@ static HRESULT WINAPI IQueryAssociations_fnGetData(IQueryAssociations *iface,
  * RETURNS
  *  Success: S_OK.
  *  Failure: An HRESULT error code indicating the error.
- *
+ *filter
  * NOTES
  *  Presumably this function returns an enumerator object.
  */
@@ -1132,3 +1132,35 @@ HRESULT WINAPI SHAssocEnumHandlers(const WCHAR *extra, ASSOC_FILTER filter, IEnu
     *enumhandlers = &enumassoc->IEnumAssocHandlers_iface;
     return S_OK;
 }
+
+
+
+/**************************************************************************
+ * SHAssocEnumHandlersForProtocolByApplication            [SHELL32.@]
+ */
+HRESULT WINAPI SHAssocEnumHandlersForProtocolByApplication(const WCHAR *protocol, REFIID riid, void **enumhandlers)
+{
+    struct enumassochandlers *enumassoc;
+
+    FIXME("(%s %d %p): stub\n", debugstr_w(protocol), debugstr_guid(riid), enumhandlers);
+    
+    if(!IsEqualIID(riid, &IID_IEnumAssocHandlers))
+    {
+        FIXME("Not implemented objects except IID_IEnumAssocHandlers\n");
+        return E_NOTIMPL;
+    }
+    
+    *enumhandlers = NULL;
+
+    enumassoc = SHAlloc(sizeof(*enumassoc));
+    if (!enumassoc)
+        return E_OUTOFMEMORY;
+
+    enumassoc->IEnumAssocHandlers_iface.lpVtbl = &enumassochandlersvtbl;
+    enumassoc->ref = 1;
+
+    *enumhandlers = &enumassoc->IEnumAssocHandlers_iface;
+    return S_OK;
+}
+
+
diff --git a/dlls/shell32/shell32.spec b/dlls/shell32/shell32.spec
index 2c969869722..fff0bb774eb 100644
--- a/dlls/shell32/shell32.spec
+++ b/dlls/shell32/shell32.spec
@@ -332,6 +332,7 @@
 @ stdcall SHAddToRecentDocs (long ptr)
 @ stdcall SHAppBarMessage(long ptr)
 @ stdcall SHAssocEnumHandlers(wstr long ptr)
+@ stdcall SHAssocEnumHandlersForProtocolByApplication(wstr ptr ptr)
 @ stdcall SHBindToFolderIDListParent(ptr ptr ptr ptr ptr)
 @ stdcall SHBindToObject(ptr ptr ptr ptr ptr)
 @ stdcall SHBindToParent(ptr ptr ptr ptr)
-- 
2.41.0

From 6b62796eb5fb36e2fdbc90e6b2c1af527bfa56d8 Mon Sep 17 00:00:00 2001
From: llde <lorenzofersteam@live.it>
Date: Wed, 5 Jul 2023 12:53:13 +0200
Subject: [PATCH] Return Success from QueryBlanket and SetBlanket functions

---
 dlls/combase/marshal.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/combase/marshal.c b/dlls/combase/marshal.c
index 84f57b8c1c8..d188b83971c 100644
--- a/dlls/combase/marshal.c
+++ b/dlls/combase/marshal.c
@@ -1388,7 +1388,7 @@ static HRESULT WINAPI ProxyCliSec_QueryBlanket(IClientSecurity *iface,
     if (pCapabilities)
         *pCapabilities = EOAC_NONE;
 
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static HRESULT WINAPI ProxyCliSec_SetBlanket(IClientSecurity *iface,
@@ -1402,7 +1402,7 @@ static HRESULT WINAPI ProxyCliSec_SetBlanket(IClientSecurity *iface,
     FIXME("%p, %ld, %ld, %s, %ld, %ld, %p, %#lx: stub\n", pProxy, AuthnSvc, AuthzSvc,
           pServerPrincName == COLE_DEFAULT_PRINCIPAL ? "<default principal>" : debugstr_w(pServerPrincName),
           AuthnLevel, ImpLevel, pAuthInfo, Capabilities);
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static HRESULT WINAPI ProxyCliSec_CopyProxy(IClientSecurity *iface,
-- 
2.41.0

From 39c64dabe5306326f4f93161f04fd0773987c630 Mon Sep 17 00:00:00 2001
From: llde <lorenzofersteam@live.it>
Date: Mon, 3 Jul 2023 23:34:17 +0200
Subject: [PATCH] UrlMon: try stubbing function required by wininet

---
 dlls/urlmon/sec_mgr.c     |  4 +++-
 dlls/urlmon/urlmon.spec   |  1 +
 dlls/urlmon/urlmon_main.c | 10 ++++++++++
 3 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/dlls/urlmon/sec_mgr.c b/dlls/urlmon/sec_mgr.c
index 82266066e0f..4afc160358f 100644
--- a/dlls/urlmon/sec_mgr.c
+++ b/dlls/urlmon/sec_mgr.c
@@ -1155,7 +1155,9 @@ static HRESULT WINAPI SecManagerImpl_ProcessUrlActionEx2(IInternetSecurityManage
     SecManagerImpl *This = impl_from_IInternetSecurityManagerEx2(iface);
     FIXME("(%p)->(%p %08lx %p %ld %p %ld %08lx %08Ix %p) stub\n", This, pUri, dwAction, pPolicy,
           cbPolicy, pContext, cbContext, dwFlags, dwReserved, pdwOutFlags);
-    return E_NOTIMPL;
+    if(!pUri || !pPolicy) return E_INVALIDARG;
+    *pPolicy =  URLPOLICY_ALLOW;
+    return S_OK;
 }
 
 static HRESULT WINAPI SecManagerImpl_GetSecurityIdEx2(IInternetSecurityManagerEx2 *iface,
diff --git a/dlls/urlmon/urlmon.spec b/dlls/urlmon/urlmon.spec
index 8725c8c5aeb..deb302e5179 100644
--- a/dlls/urlmon/urlmon.spec
+++ b/dlls/urlmon/urlmon.spec
@@ -108,6 +108,7 @@
 363 stdcall @(long long ptr) propsys.InitVariantFromResource
 387 stdcall @(ptr long) propsys.VariantToUInt32WithDefault
 410 stdcall @(long long) LogSqmBits
+414 stdcall @(long long) LogSqmIncrement
 423 stdcall @(long long long long) LogSqmUXCommandOffsetInternal
 444 stdcall @(long long long) MapUriToBrowserEmulationState
 445 stdcall -noname MapBrowserEmulationModeToUserAgent(ptr ptr)
diff --git a/dlls/urlmon/urlmon_main.c b/dlls/urlmon/urlmon_main.c
index 00ccc449e15..f3b93cf9cdc 100644
--- a/dlls/urlmon/urlmon_main.c
+++ b/dlls/urlmon/urlmon_main.c
@@ -841,3 +841,13 @@ HRESULT WINAPI GetIUriPriv(IUri *uri, void **p)
     *p = NULL;
     return E_NOTIMPL;
 }
+
+/***********************************************************************
+ *            LogSqmIncrement
+ *    Undocumented
+ */
+DWORD WINAPI LogSqmIncrement(DWORD unknown1, DWORD unknown2 )
+{
+    FIXME("variable 1: %x; variable 2: %x: stub\n", unknown1, unknown2);
+    return 1;
+}
-- 
2.41.0

From 78403c636b8ccfdb8b7fbf95f534555f7132adc3 Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Tue, 12 Sep 2023 17:20:37 +0200
Subject: [PATCH 1/7] kernelbase: Add implementation of
 PerfSetULongCounterValue

This function is used by Visual Studio 2019, when opening or converting some projects

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/kernelbase/kernelbase.spec |  2 +-
 dlls/kernelbase/main.c          | 30 ++++++++++++++++++++++++++++++
 include/perflib.h               |  1 +
 3 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index 104dd99d619..01fe3ebfb45 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -1188,7 +1188,7 @@
 # @ stub PerfQueryInstance
 @ stdcall PerfSetCounterRefValue(long ptr long ptr)
 @ stdcall PerfSetCounterSetInfo(long ptr long)
-# @ stub PerfSetULongCounterValue
+@ stdcall PerfSetULongCounterValue(long ptr long long)
 # @ stub PerfSetULongLongCounterValue
 @ stdcall PerfStartProvider(ptr ptr ptr)
 @ stdcall PerfStartProviderEx(ptr ptr ptr)
diff --git a/dlls/kernelbase/main.c b/dlls/kernelbase/main.c
index 0309ec91589..e827b8da5cb 100644
--- a/dlls/kernelbase/main.c
+++ b/dlls/kernelbase/main.c
@@ -338,6 +338,36 @@ ULONG WINAPI PerfSetCounterRefValue(HANDLE provider, PERF_COUNTERSET_INSTANCE *i
     return STATUS_SUCCESS;
 }
 
+/***********************************************************************
+ *           PerfSetULongCounterValue   (KERNELBASE.@)
+ */
+ULONG WINAPI PerfSetULongCounterValue(HANDLE provider, PERF_COUNTERSET_INSTANCE *instance,
+                                    ULONG counterid, ULONG value)
+{
+    struct perf_provider *prov = perf_provider_from_handle( provider );
+    struct counterset_template *template;
+    struct counterset_instance *inst;
+    unsigned int i;
+
+    TRACE( "provider %p, instance %p, counterid %lu, address %lu semi-stub.\n",
+           provider, instance, counterid, value );
+
+    if (!prov || !instance) return ERROR_INVALID_PARAMETER;
+
+    inst = CONTAINING_RECORD(instance, struct counterset_instance, instance);
+    template = inst->template;
+
+    for (i = 0; i < template->counterset.NumCounters; ++i)
+        if (template->counter[i].CounterId == counterid) break;
+
+    if (i == template->counterset.NumCounters) return ERROR_NOT_FOUND;
+    if (template->counter[i].Attrib & PERF_ATTRIB_BY_REFERENCE) return ERROR_INVALID_PARAMETER;
+
+    *(ULONG*)((BYTE *)&inst->instance + sizeof(PERF_COUNTERSET_INSTANCE) + template->counter[i].Offset) = value;
+
+    return STATUS_SUCCESS;
+}
+
 /***********************************************************************
  *           PerfStartProvider   (KERNELBASE.@)
  */
diff --git a/include/perflib.h b/include/perflib.h
index 188f26e3e74..53c17f9efe8 100644
--- a/include/perflib.h
+++ b/include/perflib.h
@@ -106,6 +106,7 @@ typedef struct _PERF_DATA_HEADER {
 PERF_COUNTERSET_INSTANCE WINAPI *PerfCreateInstance(HANDLE, const GUID *, const WCHAR *, ULONG);
 ULONG WINAPI PerfDeleteInstance(HANDLE, PERF_COUNTERSET_INSTANCE *);
 ULONG WINAPI PerfSetCounterRefValue(HANDLE, PERF_COUNTERSET_INSTANCE *, ULONG, void *);
+ULONG WINAPI PerfSetULongCounterValue(HANDLE, PERF_COUNTERSET_INSTANCE *, ULONG, ULONG);
 ULONG WINAPI PerfSetCounterSetInfo(HANDLE, PERF_COUNTERSET_INFO *, ULONG);
 ULONG WINAPI PerfStartProvider(GUID *, PERFLIBREQUEST, HANDLE *);
 ULONG WINAPI PerfStartProviderEx(GUID *, PERF_PROVIDER_CONTEXT *, HANDLE *);
-- 
GitLab


From 8767f12f0c1b31f00cdbc9a301140ae2484f7f0c Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Wed, 13 Sep 2023 09:58:47 +0200
Subject: [PATCH 2/7] kernelbase: Add implementation for
 PerfSetULongLongCounterValue

This function is used by Visual Studio 2019, when opening or converting some projects

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/kernelbase/kernelbase.spec |  2 +-
 dlls/kernelbase/main.c          | 29 +++++++++++++++++++++++++++++
 include/perflib.h               |  1 +
 3 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index 01fe3ebfb45..f34276af021 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -1189,7 +1189,7 @@
 @ stdcall PerfSetCounterRefValue(long ptr long ptr)
 @ stdcall PerfSetCounterSetInfo(long ptr long)
 @ stdcall PerfSetULongCounterValue(long ptr long long)
-# @ stub PerfSetULongLongCounterValue
+@ stdcall PerfSetULongLongCounterValue(long ptr long int64)
 @ stdcall PerfStartProvider(ptr ptr ptr)
 @ stdcall PerfStartProviderEx(ptr ptr ptr)
 @ stdcall PerfStopProvider(long)
diff --git a/dlls/kernelbase/main.c b/dlls/kernelbase/main.c
index e827b8da5cb..003dde2e6db 100644
--- a/dlls/kernelbase/main.c
+++ b/dlls/kernelbase/main.c
@@ -368,6 +368,35 @@ ULONG WINAPI PerfSetULongCounterValue(HANDLE provider, PERF_COUNTERSET_INSTANCE
     return STATUS_SUCCESS;
 }
 
+/***********************************************************************
+ *           PerfSetULongLongCounterValue   (KERNELBASE.@)
+ */
+ULONG WINAPI PerfSetULongLongCounterValue(HANDLE provider, PERF_COUNTERSET_INSTANCE *instance,
+                                    ULONG counterid, ULONGLONG value)
+{
+    struct perf_provider *prov = perf_provider_from_handle( provider );
+    struct counterset_template *template;
+    struct counterset_instance *inst;
+    unsigned int i;
+
+    TRACE( "provider %p, instance %p, counterid %lu, address %I64u semi-stub.\n",
+           provider, instance, counterid, value );
+
+    if (!prov || !instance) return ERROR_INVALID_PARAMETER;
+
+    inst = CONTAINING_RECORD(instance, struct counterset_instance, instance);
+    template = inst->template;
+
+    for (i = 0; i < template->counterset.NumCounters; ++i)
+        if (template->counter[i].CounterId == counterid) break;
+    if (i == template->counterset.NumCounters) return ERROR_NOT_FOUND;
+    if (template->counter[i].Attrib & PERF_ATTRIB_BY_REFERENCE) return ERROR_INVALID_PARAMETER;
+
+    *(ULONGLONG*)((BYTE *)&inst->instance + sizeof(PERF_COUNTERSET_INSTANCE) + template->counter[i].Offset) = value;
+
+    return STATUS_SUCCESS;
+}
+
 /***********************************************************************
  *           PerfStartProvider   (KERNELBASE.@)
  */
diff --git a/include/perflib.h b/include/perflib.h
index 53c17f9efe8..6d14daffc4d 100644
--- a/include/perflib.h
+++ b/include/perflib.h
@@ -107,6 +107,7 @@ PERF_COUNTERSET_INSTANCE WINAPI *PerfCreateInstance(HANDLE, const GUID *, const
 ULONG WINAPI PerfDeleteInstance(HANDLE, PERF_COUNTERSET_INSTANCE *);
 ULONG WINAPI PerfSetCounterRefValue(HANDLE, PERF_COUNTERSET_INSTANCE *, ULONG, void *);
 ULONG WINAPI PerfSetULongCounterValue(HANDLE, PERF_COUNTERSET_INSTANCE *, ULONG, ULONG);
+ULONG WINAPI PerfSetULongLongCounterValue(HANDLE, PERF_COUNTERSET_INSTANCE *, ULONG, ULONGLONG);
 ULONG WINAPI PerfSetCounterSetInfo(HANDLE, PERF_COUNTERSET_INFO *, ULONG);
 ULONG WINAPI PerfStartProvider(GUID *, PERFLIBREQUEST, HANDLE *);
 ULONG WINAPI PerfStartProviderEx(GUID *, PERF_PROVIDER_CONTEXT *, HANDLE *);
-- 
GitLab


From d908942df949f4bd7ae6386638c8496b21123ef1 Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Tue, 12 Sep 2023 17:23:40 +0200
Subject: [PATCH 3/7] advapi32: Forward  PerfSetULongCounterValue and
 PerfSetULongLongCounterValue to kernelbase

VS2019 call these functions from advapi32

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/advapi32/advapi32.spec | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/advapi32/advapi32.spec b/dlls/advapi32/advapi32.spec
index b69186d07a7..26622f17137 100644
--- a/dlls/advapi32/advapi32.spec
+++ b/dlls/advapi32/advapi32.spec
@@ -577,8 +577,8 @@
 # @ stub PerfRegSetValue
 @ stdcall -import PerfSetCounterRefValue(long ptr long ptr)
 @ stdcall -import PerfSetCounterSetInfo(long ptr long)
-# @ stub PerfSetULongCounterValue
-# @ stub PerfSetULongLongCounterValue
+@ stdcall -import PerfSetULongCounterValue(long ptr long long)
+@ stdcall -import PerfSetULongLongCounterValue(long ptr long int64)
 @ stdcall -import PerfStartProvider(ptr ptr ptr)
 @ stdcall -import PerfStartProviderEx(ptr ptr ptr)
 @ stdcall -import PerfStopProvider(long)
-- 
GitLab


From e7a7ee5473c388fd84733498962299862a75b49e Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Tue, 12 Sep 2023 17:25:43 +0200
Subject: [PATCH 4/7] advapi32/tests: Create Tests for 
 PerfSetULongCounterValue

Also add test showing that PerfSetCounterRefValue cannot be used without BYREF counters

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/advapi32/tests/perf.c | 80 ++++++++++++++++++++++++++++++++++----
 1 file changed, 73 insertions(+), 7 deletions(-)

diff --git a/dlls/advapi32/tests/perf.c b/dlls/advapi32/tests/perf.c
index 7481020dd4e..826b670986d 100644
--- a/dlls/advapi32/tests/perf.c
+++ b/dlls/advapi32/tests/perf.c
@@ -45,6 +45,7 @@ static void init_functions(void)
     GET_FUNCTION(PerfOpenQueryHandle);
     GET_FUNCTION(PerfAddCounters);
     GET_FUNCTION(PerfQueryCounterData);
+
 #undef GET_FUNCTION
 }
 
@@ -54,17 +55,19 @@ static ULONG WINAPI test_provider_callback(ULONG code, void *buffer, ULONG size)
     return ERROR_SUCCESS;
 }
 
+struct template
+{
+    PERF_COUNTERSET_INFO counterset;
+    PERF_COUNTER_INFO counter[2];
+};
+
 void test_provider_init(void)
 {
     static GUID test_set_guid = {0xdeadbeef, 0x0002, 0x0003, {0x0f, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00 ,0x0a}};
     static GUID test_set_guid2 = {0xdeadbeef, 0x0003, 0x0003, {0x0f, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00 ,0x0a}};
     static GUID test_guid = {0xdeadbeef, 0x0001, 0x0002, {0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00 ,0x0a}};
-    static struct
-    {
-        PERF_COUNTERSET_INFO counterset;
-        PERF_COUNTER_INFO counter[2];
-    }
-    pc_template =
+
+    struct template pc_template =
     {
         {{0}},
         {
@@ -74,7 +77,16 @@ void test_provider_init(void)
                     PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
         },
     };
-
+    struct template pc_template_val =
+    {
+        {{0}},
+        {
+            {1, PERF_COUNTER_COUNTER, 0, sizeof(PERF_COUNTER_INFO),
+                    PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
+            {2, PERF_COUNTER_COUNTER, 0, sizeof(PERF_COUNTER_INFO),
+                    PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
+        },
+    };
     PERF_COUNTERSET_INSTANCE *instance;
     PERF_PROVIDER_CONTEXT prov_context;
     UINT64 counter1, counter2;
@@ -187,6 +199,60 @@ void test_provider_init(void)
     ok(*(void **)((BYTE *)instance + sizeof(*instance) + sizeof(UINT64)) == &counter2,
             "Got unexpected counter value %p.\n", *(void **)(instance + 1));
 
+    /*Counter defined as BYREF error if modified with SetValue functions*/
+    ret = PerfSetULongCounterValue(prov, instance, 1, 666L);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongCounterValue(prov, instance, 2, 900000L);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfSetULongCounterValue(prov, instance, 0, 42L);
+    ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfDeleteInstance(prov, instance);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+    ret = PerfStopProvider(prov);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfStartProvider(&test_guid, test_provider_callback, &prov);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    pc_template_val.counterset.CounterSetGuid = test_set_guid;
+    pc_template_val.counterset.ProviderGuid = test_guid;
+    pc_template_val.counterset.NumCounters = 2;
+    pc_template_val.counterset.InstanceType = PERF_COUNTERSET_SINGLE_INSTANCE;
+    ret = PerfSetCounterSetInfo(prov, &pc_template_val.counterset, sizeof(pc_template_val));
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    instance = PerfCreateInstance(prov, &test_set_guid, L"11", 1);
+    ok(!!instance, "Got NULL instance.\n");
+    ok(instance->InstanceId == 1, "Got unexpected InstanceId %lu.\n", instance->InstanceId);
+    ok(instance->InstanceNameSize == 6, "Got unexpected InstanceNameSize %lu.\n", instance->InstanceNameSize);
+    ok(IsEqualGUID(&instance->CounterSetGuid, &test_set_guid), "Got unexpected guid %s.\n",
+            debugstr_guid(&instance->CounterSetGuid));
+
+    ret = PerfSetULongCounterValue(prov, instance, 1, 666L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongCounterValue(prov, instance, 2, 900000L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfSetULongCounterValue(prov, instance, 0, 42);
+    ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
+
+    ok(*(ULONG *)(instance + 1) == 666L, "Got unexpected counter value %lu.\n",
+            *(ULONG *)(instance + 1));
+    ok(*(ULONG *)((BYTE *)instance + sizeof(*instance) + sizeof(UINT64)) == 900000L,
+            "Got unexpected counter value %lu.\n", *(ULONG *)(instance + 1));
+
+    ret = PerfSetULongCounterValue(prov, instance, 1, 55L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongCounterValue(prov, instance, 2, 9000L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfSetCounterRefValue(prov, instance, 1, &counter1);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetCounterRefValue(prov, instance, 2, &counter2);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+
     ret = PerfDeleteInstance(prov, instance);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
 
-- 
GitLab


From b9b48d67785c07802d6823cd05e7c970c51e0508 Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Wed, 13 Sep 2023 10:59:53 +0200
Subject: [PATCH 5/7] advapi/test: Add Test For  PerfSetULongLongCounterValue

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/advapi32/tests/perf.c | 67 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 67 insertions(+)

diff --git a/dlls/advapi32/tests/perf.c b/dlls/advapi32/tests/perf.c
index 826b670986d..f6252ac9b92 100644
--- a/dlls/advapi32/tests/perf.c
+++ b/dlls/advapi32/tests/perf.c
@@ -87,6 +87,16 @@ void test_provider_init(void)
                     PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
         },
     };
+    struct template pc_template_val_long =
+    {
+        {{0}},
+        {
+            {1, (PERF_COUNTER_COUNTER & ~PERF_SIZE_DWORD) |  PERF_SIZE_LARGE, 0, sizeof(PERF_COUNTER_INFO),
+                    PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
+            {2, (PERF_COUNTER_COUNTER & ~PERF_SIZE_DWORD) |  PERF_SIZE_LARGE, 0, sizeof(PERF_COUNTER_INFO),
+                    PERF_DETAIL_NOVICE, 0, 0xdeadbeef},
+        },
+    };
     PERF_COUNTERSET_INSTANCE *instance;
     PERF_PROVIDER_CONTEXT prov_context;
     UINT64 counter1, counter2;
@@ -204,9 +214,15 @@ void test_provider_init(void)
     ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
     ret = PerfSetULongCounterValue(prov, instance, 2, 900000L);
     ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongLongCounterValue(prov, instance, 1, 666L);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongLongCounterValue(prov, instance, 2, 900000L);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfSetULongCounterValue(prov, instance, 0, 42L);
     ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongLongCounterValue(prov, instance, 0, 42L);
+    ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfDeleteInstance(prov, instance);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
@@ -248,6 +264,15 @@ void test_provider_init(void)
     ret = PerfSetULongCounterValue(prov, instance, 2, 9000L);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
 
+    /*Cannot be used with PERF_SIZE_DWORD*/
+    ret = PerfSetULongLongCounterValue(prov, instance, 1, 900000L);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongLongCounterValue(prov, instance, 2, 666L);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfSetULongLongCounterValue(prov, instance, 0, 42);
+    ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
+
     ret = PerfSetCounterRefValue(prov, instance, 1, &counter1);
     todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
     ret = PerfSetCounterRefValue(prov, instance, 2, &counter2);
@@ -259,6 +284,48 @@ void test_provider_init(void)
     ret = PerfStopProvider(prov);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
 
+    ret = PerfStartProvider(&test_guid, test_provider_callback, &prov);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    pc_template_val_long.counterset.CounterSetGuid = test_set_guid;
+    pc_template_val_long.counterset.ProviderGuid = test_guid;
+    pc_template_val_long.counterset.NumCounters = 2;
+    pc_template_val_long.counterset.InstanceType = PERF_COUNTERSET_SINGLE_INSTANCE;
+    ret = PerfSetCounterSetInfo(prov, &pc_template_val_long.counterset, sizeof(pc_template_val_long));
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    instance = PerfCreateInstance(prov, &test_set_guid, L"11", 1);
+    ok(!!instance, "Got NULL instance.\n");
+    ok(instance->InstanceId == 1, "Got unexpected InstanceId %lu.\n", instance->InstanceId);
+    ok(instance->InstanceNameSize == 6, "Got unexpected InstanceNameSize %lu.\n", instance->InstanceNameSize);
+    ok(IsEqualGUID(&instance->CounterSetGuid, &test_set_guid), "Got unexpected guid %s.\n",
+            debugstr_guid(&instance->CounterSetGuid));
+
+    ret = PerfSetULongLongCounterValue(prov, instance, 1, 900000L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongLongCounterValue(prov, instance, 2, 666L);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfSetULongLongCounterValue(prov, instance, 0, 42);
+    ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
+
+    ok(*(ULONGLONG *)(instance + 1) == 900000L, "Got unexpected counter value %I64u.\n",
+            *(ULONGLONG *)(instance + 1));
+    ok(*(ULONGLONG *)((BYTE *)instance + sizeof(*instance) + sizeof(UINT64)) == 666L,
+            "Got unexpected counter value %I64u.\n", *(ULONGLONG *)(instance + 1));
+
+    /* Don't work on PERF_SIZE_LARGE */
+    ret = PerfSetULongCounterValue(prov, instance, 1, 666L);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ret = PerfSetULongCounterValue(prov, instance, 2, 900000L);
+    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfDeleteInstance(prov, instance);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
+    ret = PerfStopProvider(prov);
+    ok(!ret, "Got unexpected ret %lu.\n", ret);
+
     memset( &prov_context, 0, sizeof(prov_context) );
     prov = (HANDLE)0xdeadbeef;
     ret = PerfStartProviderEx( &test_guid, &prov_context, &prov );
-- 
GitLab


From 2a9c223a612afe0fbf069852034f9b7f6733cf49 Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Tue, 12 Sep 2023 22:11:54 +0200
Subject: [PATCH 6/7] kernelbase : Check for PERF_ATTRIB_BY_REFERENCE attribute
 in PerfSetCounterRefValue

Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/advapi32/tests/perf.c | 4 ++--
 dlls/kernelbase/main.c     | 2 ++
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/dlls/advapi32/tests/perf.c b/dlls/advapi32/tests/perf.c
index f6252ac9b92..b237b15bc84 100644
--- a/dlls/advapi32/tests/perf.c
+++ b/dlls/advapi32/tests/perf.c
@@ -274,9 +274,9 @@ void test_provider_init(void)
     ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfSetCounterRefValue(prov, instance, 1, &counter1);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
     ret = PerfSetCounterRefValue(prov, instance, 2, &counter2);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfDeleteInstance(prov, instance);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
diff --git a/dlls/kernelbase/main.c b/dlls/kernelbase/main.c
index 003dde2e6db..73cc8a6e5ba 100644
--- a/dlls/kernelbase/main.c
+++ b/dlls/kernelbase/main.c
@@ -333,6 +333,8 @@ ULONG WINAPI PerfSetCounterRefValue(HANDLE provider, PERF_COUNTERSET_INSTANCE *i
         if (template->counter[i].CounterId == counterid) break;
 
     if (i == template->counterset.NumCounters) return ERROR_NOT_FOUND;
+    if (!(template->counter[i].Attrib & PERF_ATTRIB_BY_REFERENCE)) return ERROR_INVALID_PARAMETER;
+
     *(void **)((BYTE *)&inst->instance + sizeof(PERF_COUNTERSET_INSTANCE) + template->counter[i].Offset) = address;
 
     return STATUS_SUCCESS;
-- 
GitLab


From 5d08db6ca54e7d1cdcb485a114ae460fc53f681c Mon Sep 17 00:00:00 2001
From: Lorenzo Ferrillo <lorenzofersteam@live.it>
Date: Tue, 12 Sep 2023 22:19:43 +0200
Subject: [PATCH 7/7] kernelbase: Check for PERF_SIZE_LARGE in 
 PerfSetULongLongCounterValue and PerfSetULongCounterValue

Cannot check for PERF_SIZE_DWORD as it have a value of 0x0

v2: Fix test failure
Signed-off-by: Lorenzo Ferrillo <lorenzofersteam@live.it>
---
 dlls/advapi32/tests/perf.c | 8 ++++----
 dlls/kernelbase/main.c     | 3 +++
 2 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/dlls/advapi32/tests/perf.c b/dlls/advapi32/tests/perf.c
index b237b15bc84..b2727d2ea4e 100644
--- a/dlls/advapi32/tests/perf.c
+++ b/dlls/advapi32/tests/perf.c
@@ -266,9 +266,9 @@ void test_provider_init(void)
 
     /*Cannot be used with PERF_SIZE_DWORD*/
     ret = PerfSetULongLongCounterValue(prov, instance, 1, 900000L);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
     ret = PerfSetULongLongCounterValue(prov, instance, 2, 666L);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfSetULongLongCounterValue(prov, instance, 0, 42);
     ok(ret == ERROR_NOT_FOUND, "Got unexpected ret %lu.\n", ret);
@@ -316,9 +316,9 @@ void test_provider_init(void)
 
     /* Don't work on PERF_SIZE_LARGE */
     ret = PerfSetULongCounterValue(prov, instance, 1, 666L);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
     ret = PerfSetULongCounterValue(prov, instance, 2, 900000L);
-    todo_wine ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
+    ok(ret == ERROR_INVALID_PARAMETER, "Got unexpected ret %lu.\n", ret);
 
     ret = PerfDeleteInstance(prov, instance);
     ok(!ret, "Got unexpected ret %lu.\n", ret);
diff --git a/dlls/kernelbase/main.c b/dlls/kernelbase/main.c
index 73cc8a6e5ba..523ce519482 100644
--- a/dlls/kernelbase/main.c
+++ b/dlls/kernelbase/main.c
@@ -26,6 +26,7 @@
 #include "shlwapi.h"
 #include "perflib.h"
 #include "winternl.h"
+#include "winperf.h"
 
 #include "wine/debug.h"
 #include "kernelbase.h"
@@ -364,6 +365,7 @@ ULONG WINAPI PerfSetULongCounterValue(HANDLE provider, PERF_COUNTERSET_INSTANCE
 
     if (i == template->counterset.NumCounters) return ERROR_NOT_FOUND;
     if (template->counter[i].Attrib & PERF_ATTRIB_BY_REFERENCE) return ERROR_INVALID_PARAMETER;
+    if (template->counter[i].Type & PERF_SIZE_LARGE) return ERROR_INVALID_PARAMETER;
 
     *(ULONG*)((BYTE *)&inst->instance + sizeof(PERF_COUNTERSET_INSTANCE) + template->counter[i].Offset) = value;
 
@@ -393,6 +395,7 @@ ULONG WINAPI PerfSetULongLongCounterValue(HANDLE provider, PERF_COUNTERSET_INSTA
         if (template->counter[i].CounterId == counterid) break;
     if (i == template->counterset.NumCounters) return ERROR_NOT_FOUND;
     if (template->counter[i].Attrib & PERF_ATTRIB_BY_REFERENCE) return ERROR_INVALID_PARAMETER;
+    if (!(template->counter[i].Type & PERF_SIZE_LARGE)) return ERROR_INVALID_PARAMETER;
 
     *(ULONGLONG*)((BYTE *)&inst->instance + sizeof(PERF_COUNTERSET_INSTANCE) + template->counter[i].Offset) = value;
 
-- 
GitLab