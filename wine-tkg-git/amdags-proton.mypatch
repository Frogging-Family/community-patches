From afaf271f5ae5a74ddc3914301c0103f1a67c0bb2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <jkucia@codeweavers.com>
Date: Mon, 23 Jul 2018 19:53:20 +0200
Subject: [PATCH] amd_ags_x64: Import v5.1.1 amd_ags.h.

Imported from https://github.com/GPUOpen-LibrariesAndSDKs/AGS_SDK.
---
 dlls/amd_ags_x64/amd_ags.h | 944 +++++++++++++++++++++++++++++++++++++
 1 file changed, 944 insertions(+)
 create mode 100644 dlls/amd_ags_x64/amd_ags.h

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
new file mode 100644
index 00000000000..9c3e37e52e5
--- /dev/null
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -0,0 +1,944 @@
+//
+// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+//
+
+/// \file
+/// \mainpage
+/// AGS Library Overview
+/// --------------------
+/// This document provides an overview of the AGS (AMD GPU Services) library. The AGS library provides software developers with the ability to query
+/// AMD GPU software and hardware state information that is not normally available through standard operating systems or graphic APIs.
+///
+/// The latest version of the API is publicly hosted here: https://github.com/GPUOpen-LibrariesAndSDKs/AGS_SDK/.
+/// It is also worth checking http://gpuopen.com/gaming-product/amd-gpu-services-ags-library/ for any updates and articles on AGS.
+/// \internal
+/// Online documentation is publicly hosted here: http://gpuopen-librariesandsdks.github.io/ags/
+/// \endinternal
+///
+/// What's new in AGS 5.1.1 since version 5.0.6
+/// ---------------------------------------
+/// AGS 5.1.1 includes the following updates:
+/// * An API change for DX11 extensions
+///   - It is now mandatory to call agsDriverExtensionsDX11_CreateDevice() when creating a device if the user wants to access any DX11 AMD extensions.
+///   - The corresponding agsDriverExtensionsDX11_DestroyDevice() call must be called to release the device and free up the internal resources allocated by the create call.
+/// * App registration extension for DX11.
+/// * Freesync 2 HDR support.
+/// * Wave reduce and wave scan shader extensions.
+/// * AMD user markers for DX12.
+/// * Eyefinity bug fixes.
+/// * MultiDrawIndexedInstancedIndirectCountIndirect parameter bug fix.
+/// * Static lib versions of the binary.
+/// * VS2017 support for the samples.
+///
+/// What's new in AGS 5.x since version 4.x
+/// ---------------------------------------
+/// Version 5.x is a major overhaul of the library designed to provide a much clearer view of the GPUs in the system and the displays attached to them.
+/// It also exposes the ability to query each display for HDR capabilities and put those HDR capable displays into various HDR modes.
+/// Some functions such as agsGetGPUMemorySize and agsGetEyefinityConfigInfo have been removed in favor of including this information in the device & display enumeration.
+/// Features include:
+/// * Full GPU enumeration with adapter string, device id, revision id and vendor id.
+/// * Per GPU display enumeration including information on display name, resolution and HDR capabilities.
+/// * Optional user supplied memory allocator.
+/// * Function to set displays into HDR mode.
+/// * A Microsoft WACK compliant version of the library.
+/// * DirectX11 shader compiler controls.
+/// * DirectX11 multiview extension enabling MultiView and MultiRes rendering.
+/// * DirectX11 Crossfire API now supports using the API without needing a driver profile. Can also specify the transfer engine.
+///
+/// Using the AGS library
+/// ---------------------
+/// It is recommended to take a look at the source code for the samples that come with the AGS SDK:
+/// * AGSSample
+/// * CrossfireSample
+/// * EyefinitySample
+/// The AGSSample application is the simplest of the three examples and demonstrates the code required to initialize AGS and use it to query the GPU and Eyefinity state.
+/// The CrossfireSample application demonstrates the use of the new API to transfer resources on GPUs in Crossfire mode. Lastly, the EyefinitySample application provides a more
+/// extensive example of Eyefinity setup than the basic example provided in AGSSample.
+/// There are other samples on Github that demonstrate the DirectX shader extensions, such as the Barycentrics11 and Barycentrics12 samples.
+///
+/// To add AGS support to an existing project, follow these steps:
+/// * Link your project against the correct import library. Choose from either the 32 bit or 64 bit version.
+/// * Copy the AGS dll into the same directory as your game executable.
+/// * Include the amd_ags.h header file from your source code.
+/// * Include the AGS hlsl files if you are using the shader intrinsics.
+/// * Declare a pointer to an AGSContext and make this available for all subsequent calls to AGS.
+/// * On game initialization, call agsInit() passing in the address of the context. On success, this function will return a valid context pointer.
+/// * The agsInit() function should be called before the D3D device is created if the Crossfire mode is specified.
+///
+/// Don't forget to cleanup AGS by calling agsDeInit() when the app exits, after the device has been destroyed.
+
+#ifndef AMD_AGS_H
+#define AMD_AGS_H
+
+#define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
+#define AMD_AGS_VERSION_MINOR 1             ///< AGS minor version
+#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+#define AMD_AGS_API __declspec(dllexport)   ///< AGS calling convention
+
+// Forward declaration of D3D11 types
+struct IDXGIAdapter;
+enum D3D_DRIVER_TYPE;
+enum D3D_FEATURE_LEVEL;
+struct DXGI_SWAP_CHAIN_DESC;
+struct ID3D11Device;
+struct ID3D11DeviceContext;
+struct IDXGISwapChain;
+struct ID3D11Resource;
+struct ID3D11Buffer;
+struct ID3D11Texture1D;
+struct ID3D11Texture2D;
+struct ID3D11Texture3D;
+struct D3D11_BUFFER_DESC;
+struct D3D11_TEXTURE1D_DESC;
+struct D3D11_TEXTURE2D_DESC;
+struct D3D11_TEXTURE3D_DESC;
+struct D3D11_SUBRESOURCE_DATA;
+struct tagRECT;
+typedef tagRECT D3D11_RECT;             ///< typedef this ourselves so we don't have to drag d3d11.h in
+
+// Forward declaration of D3D12 types
+struct ID3D12Device;
+struct ID3D12GraphicsCommandList;
+
+
+/// The return codes
+enum AGSReturnCode
+{
+    AGS_SUCCESS,                    ///< Successful function call
+    AGS_FAILURE,                    ///< Failed to complete call for some unspecified reason
+    AGS_INVALID_ARGS,               ///< Invalid arguments into the function
+    AGS_OUT_OF_MEMORY,              ///< Out of memory when allocating space internally
+    AGS_ERROR_MISSING_DLL,          ///< Returned when a driver dll fails to load - most likely due to not being present in legacy driver installation
+    AGS_ERROR_LEGACY_DRIVER,        ///< Returned if a feature is not present in the installed driver
+    AGS_EXTENSION_NOT_SUPPORTED,    ///< Returned if the driver does not support the requested driver extension
+    AGS_ADL_FAILURE,                ///< Failure in ADL (the AMD Display Library)
+};
+
+/// The DirectX11 extension support bits
+enum AGSDriverExtensionDX11
+{
+    AGS_DX11_EXTENSION_QUADLIST                             = 1 << 0,
+    AGS_DX11_EXTENSION_SCREENRECTLIST                       = 1 << 1,
+    AGS_DX11_EXTENSION_UAV_OVERLAP                          = 1 << 2,
+    AGS_DX11_EXTENSION_DEPTH_BOUNDS_TEST                    = 1 << 3,
+    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT                    = 1 << 4,
+    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT_COUNTINDIRECT      = 1 << 5,
+    AGS_DX11_EXTENSION_CROSSFIRE_API                        = 1 << 6,
+    AGS_DX11_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 7,
+    AGS_DX11_EXTENSION_INTRINSIC_READLANE                   = 1 << 8,
+    AGS_DX11_EXTENSION_INTRINSIC_LANEID                     = 1 << 9,
+    AGS_DX11_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 10,
+    AGS_DX11_EXTENSION_INTRINSIC_BALLOT                     = 1 << 11,
+    AGS_DX11_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 12,
+    AGS_DX11_EXTENSION_INTRINSIC_COMPARE3                   = 1 << 13,
+    AGS_DX11_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 14,
+    AGS_DX11_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 15,   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 16,   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX11_EXTENSION_CREATE_SHADER_CONTROLS               = 1 << 17,
+    AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,
+    AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19    ///< Supported in Radeon Software Version 17.9.1 onwards.
+};
+
+/// The DirectX12 extension support bits
+enum AGSDriverExtensionDX12
+{
+    AGS_DX12_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 0,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_READLANE                   = 1 << 1,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_LANEID                     = 1 << 2,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 3,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BALLOT                     = 1 << 4,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 5,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_COMPARE3                   = 1 << 6,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 7,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 8,   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 9,   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_USER_MARKERS                         = 1 << 10   ///< Supported in Radeon Software Version 17.9.1 onwards.
+};
+
+/// The space id for DirectX12 intrinsic support
+const unsigned int AGS_DX12_SHADER_INSTRINSICS_SPACE_ID = 0x7FFF0ADE; // 2147420894
+
+
+/// Additional topologies supported via extensions
+enum AGSPrimitiveTopology
+{
+    AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,
+    AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9
+};
+
+/// The different modes to control Crossfire behavior.
+enum AGSCrossfireMode
+{
+    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                              ///< Use the default driver-based AFR rendering
+    AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                                ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
+    AGS_CROSSFIRE_MODE_DISABLE                                      ///< Completely disable AFR rendering
+};
+
+
+/// The Crossfire API transfer types
+enum AGSAfrTransferType
+{
+    AGS_AFR_TRANSFER_DEFAULT                                = 0,    ///< Default Crossfire driver resource tracking
+    AGS_AFR_TRANSFER_DISABLE                                = 1,    ///< Turn off driver resource tracking
+    AGS_AFR_TRANSFER_1STEP_P2P                              = 2,    ///< App controlled GPU to next GPU transfer
+    AGS_AFR_TRANSFER_2STEP_NO_BROADCAST                     = 3,    ///< App controlled GPU to next GPU transfer using intermediate system memory
+    AGS_AFR_TRANSFER_2STEP_WITH_BROADCAST                   = 4,    ///< App controlled GPU to all render GPUs transfer using intermediate system memory
+};
+
+/// The Crossfire API transfer engines
+enum AGSAfrTransferEngine
+{
+    AGS_AFR_TRANSFERENGINE_DEFAULT                          = 0,    ///< Use default engine for Crossfire API transfers
+    AGS_AFR_TRANSFERENGINE_3D_ENGINE                        = 1,    ///< Use 3D engine for Crossfire API transfers
+    AGS_AFR_TRANSFERENGINE_COPY_ENGINE                      = 2,    ///< Use Copy engine for Crossfire API transfers
+};
+
+/// The display flags describing various properties of the display.
+enum AGSDisplayFlags
+{
+    AGS_DISPLAYFLAG_PRIMARY_DISPLAY                         = 1 << 0,   ///< Whether this display is marked as the primary display. Not set on the WACK version.
+    AGS_DISPLAYFLAG_HDR10                                   = 1 << 1,   ///< HDR10 is supported on this display
+    AGS_DISPLAYFLAG_DOLBYVISION                             = 1 << 2,   ///< Dolby Vision is supported on this display
+    AGS_DISPLAYFLAG_FREESYNC                                = 1 << 3,   ///< Freesync is supported on this display
+    AGS_DISPLAYFLAG_FREESYNC_2                              = 1 << 4,   ///< Freesync 2 is supported on this display
+    AGS_DISPLAYFLAG_EYEFINITY_IN_GROUP                      = 1 << 5,   ///< The display is part of the Eyefinity group
+    AGS_DISPLAYFLAG_EYEFINITY_PREFERRED_DISPLAY             = 1 << 6,   ///< The display is the preferred display in the Eyefinity group for displaying the UI
+    AGS_DISPLAYFLAG_EYEFINITY_IN_PORTRAIT_MODE              = 1 << 7,   ///< The display is in the Eyefinity group but in portrait mode
+};
+
+struct AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
+
+/// The rectangle struct used by AGS.
+struct AGSRect
+{
+    int offsetX;    ///< Offset on X axis
+    int offsetY;    ///< Offset on Y axis
+    int width;      ///< Width of rectangle
+    int height;     ///< Height of rectangle
+};
+
+/// The clip rectangle struct used by \ref agsDriverExtensionsDX11_SetClipRects
+struct AGSClipRect
+{
+    /// The inclusion mode for the rect
+    enum Mode
+    {
+        ClipRectIncluded = 0,   ///< Include the rect
+        ClipRectExcluded = 1    ///< Exclude the rect
+    };
+
+    Mode            mode; ///< Include/exclude rect region
+    AGSRect         rect; ///< The rect to include/exclude
+};
+
+/// The display info struct used to describe a display enumerated by AGS
+struct AGSDisplayInfo
+{
+    char                    name[ 256 ];                    ///< The name of the display
+    char                    displayDeviceName[ 32 ];        ///< The display device name, i.e. DISPLAY_DEVICE::DeviceName
+
+    unsigned int            displayFlags;                   ///< Bitfield of ::AGSDisplayFlags
+
+    int                     maxResolutionX;                 ///< The maximum supported resolution of the unrotated display
+    int                     maxResolutionY;                 ///< The maximum supported resolution of the unrotated display
+    float                   maxRefreshRate;                 ///< The maximum supported refresh rate of the display
+
+    AGSRect                 currentResolution;              ///< The current resolution and position in the desktop, ignoring Eyefinity bezel compensation
+    AGSRect                 visibleResolution;              ///< The visible resolution and position. When Eyefinity bezel compensation is enabled this will
+                                                            ///< be the sub region in the Eyefinity single large surface (SLS)
+    float                   currentRefreshRate;             ///< The current refresh rate
+
+    int                     eyefinityGridCoordX;            ///< The X coordinate in the Eyefinity grid. -1 if not in an Eyefinity group
+    int                     eyefinityGridCoordY;            ///< The Y coordinate in the Eyefinity grid. -1 if not in an Eyefinity group
+
+    double                  chromaticityRedX;               ///< Red display primary X coord
+    double                  chromaticityRedY;               ///< Red display primary Y coord
+
+    double                  chromaticityGreenX;             ///< Green display primary X coord
+    double                  chromaticityGreenY;             ///< Green display primary Y coord
+
+    double                  chromaticityBlueX;              ///< Blue display primary X coord
+    double                  chromaticityBlueY;              ///< Blue display primary Y coord
+
+    double                  chromaticityWhitePointX;        ///< White point X coord
+    double                  chromaticityWhitePointY;        ///< White point Y coord
+
+    double                  screenDiffuseReflectance;       ///< Percentage expressed between 0 - 1
+    double                  screenSpecularReflectance;      ///< Percentage expressed between 0 - 1
+
+    double                  minLuminance;                   ///< The minimum luminance of the display in nits
+    double                  maxLuminance;                   ///< The maximum luminance of the display in nits
+    double                  avgLuminance;                   ///< The average luminance of the display in nits
+
+    int                     logicalDisplayIndex;            ///< The internally used index of this display
+    int                     adlAdapterIndex;                ///< The internally used ADL adapter index
+};
+
+/// The device info struct used to describe a physical GPU enumerated by AGS
+struct AGSDeviceInfo
+{
+    /// The architecture version
+    enum ArchitectureVersion
+    {
+        ArchitectureVersion_Unknown,                                ///< Unknown architecture, potentially from another IHV. Check AGSDeviceInfo::vendorId
+        ArchitectureVersion_PreGCN,                                 ///< AMD architecture, pre-GCN
+        ArchitectureVersion_GCN                                     ///< AMD GCN architecture
+    };
+
+    ArchitectureVersion             architectureVersion;            ///< Set to Unknown if not AMD hardware
+    const char*                     adapterString;                  ///< The adapter name string
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of GCN compute units. Zero if not GCN
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    int                             isPrimaryDevice;                ///< Whether or not this is the primary adapter in the system. Not set on the WACK version.
+    long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+};
+
+/// \defgroup general General API functions
+/// API for initialization, cleanup, HDR display modes and Crossfire GPU count
+/// @{
+
+typedef void* (__stdcall *AGS_ALLOC_CALLBACK)( int allocationSize );    ///< AGS user defined allocation prototype
+typedef void (__stdcall *AGS_FREE_CALLBACK)( void* allocationPtr );     ///< AGS user defined free prototype
+
+                                                                        /// The configuration options that can be passed in to \ref agsInit
+struct AGSConfiguration
+{
+    AGS_ALLOC_CALLBACK      allocCallback;                  ///< Optional memory allocation callback. If not supplied, malloc() is used
+    AGS_FREE_CALLBACK       freeCallback;                   ///< Optional memory freeing callback. If not supplied, free() is used
+    AGSCrossfireMode        crossfireMode;                  ///< Desired Crossfire mode
+};
+
+/// The top level GPU information returned from \ref agsInit
+struct AGSGPUInfo
+{
+    int                     agsVersionMajor;                ///< Major field of Major.Minor.Patch AGS version number
+    int                     agsVersionMinor;                ///< Minor field of Major.Minor.Patch AGS version number
+    int                     agsVersionPatch;                ///< Patch field of Major.Minor.Patch AGS version number
+    int                     isWACKCompliant;                ///< 1 if WACK compliant.
+
+    const char*             driverVersion;                  ///< The AMD driver package version
+    const char*             radeonSoftwareVersion;          ///< The Radeon Software Version
+
+    int                     numDevices;                     ///< Number of GPUs in the system
+    AGSDeviceInfo*          devices;                        ///< List of GPUs in the system
+};
+
+/// The struct to specify the display settings to the driver.
+struct AGSDisplaySettings
+{
+    /// The display mode
+    enum Mode
+    {
+        Mode_SDR,                                           ///< SDR mode
+        Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
+        Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
+        Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. Values in the range of 0.0 to 125.0 where 125.0 == AGSDisplayInfo::maxLuminance.
+        Mode_DolbyVision                                    ///< Dolby Vision, requiring an 8888 UNORM swapchain
+    };
+
+    Mode                    mode;                           ///< The display mode to set the display into
+
+    double                  chromaticityRedX;               ///< Red display primary X coord
+    double                  chromaticityRedY;               ///< Red display primary Y coord
+
+    double                  chromaticityGreenX;             ///< Green display primary X coord
+    double                  chromaticityGreenY;             ///< Green display primary Y coord
+
+    double                  chromaticityBlueX;              ///< Blue display primary X coord
+    double                  chromaticityBlueY;              ///< Blue display primary Y coord
+
+    double                  chromaticityWhitePointX;        ///< White point X coord
+    double                  chromaticityWhitePointY;        ///< White point Y coord
+
+    double                  minLuminance;                   ///< The minimum scene luminance in nits
+    double                  maxLuminance;                   ///< The maximum scene luminance in nits
+
+    double                  maxContentLightLevel;           ///< The maximum content light level in nits (MaxCLL)
+    double                  maxFrameAverageLightLevel;      ///< The maximum frame average light level in nits (MaxFALL)
+};
+
+///
+/// Function used to initialize the AGS library.
+/// Must be called prior to any of the subsequent AGS API calls.
+/// Must be called prior to ID3D11Device or ID3D12Device creation.
+/// \note This function will fail with AGS_ERROR_LEGACY_DRIVER in Catalyst versions before 12.20.
+/// \note It is good practice to check the AGS version returned from AGSGPUInfo against the version defined in the header in case a mismatch between the dll and header has occurred.
+///
+/// \param [in, out] context                        Address of a pointer to a context. This function allocates a context on the heap which is then required for all subsequent API calls.
+/// \param [in] config                              Optional pointer to a AGSConfiguration struct to override the default library configuration.
+/// \param [out] gpuInfo                            Optional pointer to a AGSGPUInfo struct which will get filled in for all the GPUs in the system.
+///
+AMD_AGS_API AGSReturnCode agsInit( AGSContext** context, const AGSConfiguration* config, AGSGPUInfo* gpuInfo );
+
+///
+///   Function used to clean up the AGS library.
+///
+/// \param [in] context                             Pointer to a context. This function will deallocate the context from the heap.
+///
+AMD_AGS_API AGSReturnCode agsDeInit( AGSContext* context );
+
+///
+/// Function used to query the number of GPUs used for Crossfire acceleration.
+/// This may be different from the total number of GPUs present in the system.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [out] numGPUs                            Number of GPUs used for Crossfire acceleration
+///
+AMD_AGS_API AGSReturnCode agsGetCrossfireGPUCount( AGSContext* context, int* numGPUs );
+
+///
+/// Function used to set a specific display into HDR mode
+/// \note Setting all of the values apart from color space and transfer function to zero will cause the display to use defaults.
+/// \note Call this function after each mode change (switch to fullscreen, any change in swapchain etc).
+/// \note HDR10 PQ mode requires a 1010102 swapchain.
+/// \note HDR10 scRGB mode requires an FP16 swapchain.
+/// \note Freesync2 Gamma mode requires a 1010102 swapchain.
+/// \note Freesync2 scRGB mode requires an FP16 swapchain.
+/// \note Dolby Vision requires a 8888 UNORM swapchain.
+///
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] deviceIndex                         The index of the device listed in \ref AGSGPUInfo::devices.
+/// \param [in] displayIndex                        The index of the display listed in \ref AGSDeviceInfo::displays.
+/// \param [in] settings                            Pointer to the display settings to use.
+///
+AMD_AGS_API AGSReturnCode agsSetDisplayMode( AGSContext* context, int deviceIndex, int displayIndex, const AGSDisplaySettings* settings );
+
+/// @}
+
+/// \defgroup dx12 DirectX12 Extensions
+/// DirectX12 driver extensions
+/// @{
+
+/// \defgroup dx12init Initialization and Cleanup
+/// @{
+
+///
+/// Function used to initialize the AMD-specific driver extensions for D3D12.
+/// Extensions require support in the driver, therefore it is important to check the extensionsSupported bitfield.
+///
+/// When using the HLSL shader extensions please note:
+/// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION option, otherwise it will not work.
+/// * The intrinsic instructions require a 5.1 shader model.
+/// * The Root Signature will need to use an extra resource and sampler. These are not real resources/samplers, they are just used to encode the intrinsic instruction.
+///
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] device                              The D3D12 device.
+/// \param [out] extensionsSupported                Pointer to a bit mask that this function will fill in to indicate which extensions are supported. See ::AGSDriverExtensionDX12
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_Init( AGSContext* context, ID3D12Device* device, unsigned int* extensionsSupported );
+
+///
+/// Function used to cleanup any AMD-specific driver extensions for D3D12
+///
+/// \param [in] context                             Pointer to a context.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DeInit( AGSContext* context );
+
+/// @}
+
+/// \defgroup dx12usermarkers User Markers
+/// @{
+
+///
+/// Function used to push an AMD user marker onto the command list.
+/// This is only has an effect if AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of agsDriverExtensionsDX12_Init()
+/// Supported in Radeon Software Version 17.9.1 onwards.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] commandList                         Pointer to the command list.
+/// \param [in] data                                The marker string.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_PushMarker( AGSContext* context, ID3D12GraphicsCommandList* commandList, const char* data );
+
+///
+/// Function used to pop an AMD user marker on the command list.
+/// Supported in Radeon Software Version 17.9.1 onwards.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] commandList                         Pointer to the command list.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_PopMarker( AGSContext* context, ID3D12GraphicsCommandList* commandList );
+
+///
+/// Function used to insert an single event AMD user marker onto the command list.
+/// Supported in Radeon Software Version 17.9.1 onwards.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] commandList                         Pointer to the command list.
+/// \param [in] data                                The marker string.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_SetMarker( AGSContext* context, ID3D12GraphicsCommandList* commandList, const char* data );
+
+/// @}
+
+/// @}
+
+/// \defgroup dx11 DirectX11 Extensions
+/// DirectX11 driver extensions
+/// @{
+
+/// \defgroup dx11init Device creation and cleanup
+/// It is now mandatory to call agsDriverExtensionsDX11_CreateDevice() when creating a device if the user wants to access any DX11 AMD extensions.
+/// The corresponding agsDriverExtensionsDX11_DestroyDevice() call must be called to release the device and free up the internal resources allocated by the create call.
+/// @{
+
+/// The struct to specify the existing DX11 device creation parameters
+struct AGSDX11DeviceCreationParams
+{
+    IDXGIAdapter*               pAdapter;                   ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    D3D_DRIVER_TYPE             DriverType;                 ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    HMODULE                     Software;                   ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    UINT                        Flags;                      ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    const D3D_FEATURE_LEVEL*    pFeatureLevels;             ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    UINT                        FeatureLevels;              ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    UINT                        SDKVersion;                 ///< Consult the DX documentation on D3D11CreateDevice for this parameter
+    const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc;             ///< Optional swapchain description. Specify this to invoke D3D11CreateDeviceAndSwapChain instead of D3D11CreateDevice. This must be null on the WACK compliant version
+};
+
+#define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX11ExtensionParams
+#define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
+
+/// The struct to specify DX11 additional device creation parameters
+struct AGSDX11ExtensionParams
+{
+    unsigned int    uavSlot;           ///< The UAV slot reserved for intrinsic support. This must match the slot defined in the HLSL, i.e. #define AmdDxExtShaderIntrinsicsUAVSlot.
+                                       /// The default slot is 7, but the caller is free to use an alternative slot.
+    const WCHAR*    pAppName;          ///< Application name
+    UINT            appVersion;        ///< Application version
+    const WCHAR*    pEngineName;       ///< Engine name
+    UINT            engineVersion;     ///< Engine version
+};
+
+/// The struct to hold all the returned parameters from the device creation call
+struct AGSDX11ReturnedParams
+{
+    ID3D11Device*           pDevice;                ///< The newly created device
+    D3D_FEATURE_LEVEL       FeatureLevel;           ///< The feature level supported by the newly created device
+    ID3D11DeviceContext*    pImmediateContext;      ///< The newly created immediate device context
+    IDXGISwapChain*         pSwapChain;             ///< The newly created swap chain. This is only created if a valid pSwapChainDesc is supplied in AGSDX11DeviceCreationParams. This is not supported on the WACK compliant version
+    unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX11_CreateDevice will fill in to indicate which extensions are supported. See AGSDriverExtensionDX11
+};
+
+///
+/// Function used to create a D3D11 device with additional AMD-specific initialization parameters.
+///
+/// When using the HLSL shader extensions please note:
+/// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION option, otherwise it will not work.
+///
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] creationParams                      Pointer to the struct to specify the existing DX11 device creation parameters.
+/// \param [in] extensionParams                     Optional pointer to the struct to specify DX11 additional device creation parameters.
+/// \param [out] returnedParams                     Pointer to struct to hold all the returned parameters from the call.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateDevice( AGSContext* context, AGSDX11DeviceCreationParams* creationParams, AGSDX11ExtensionParams* extensionParams, AGSDX11ReturnedParams* returnedParams );
+
+///
+/// Function to destroy the D3D11 device.
+/// This call will also cleanup any AMD-specific driver extensions for D3D11.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] device                              Pointer to the D3D11 device.
+/// \param [out] references                         Optional pointer to an unsigned int that will be set to the value returned from device->Release().
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice( AGSContext* context, ID3D11Device* device, unsigned int* references );
+
+/// @}
+
+
+/// \defgroup dx11appreg App Registration
+/// @{
+/// This extension allows an apllication to voluntarily register itself with the driver, providing a more robust app detection solution and avoid the issue of the driver
+/// relying on exe names to match the app to a driver profile.
+/// This feature is supported in Radeon Software Version 17.9.2 onwards.
+/// Rules:
+/// * AppName or EngineName must be set, but both are not required. Engine profiles will be used only if app specific profiles do not exist.
+/// * In an engine, the EngineName should be set, so a default profile can be built. If an app modifies the engine, the AppName should be set, to allow a profile for the specific app.
+/// * Version number is not mandatory, but heavily suggested. The use of which can prevent the use of profiles for incompatible versions (for instance engine versions that introduce or change features), and can help prevent older profiles from being used (and introducing new bugs) before the profile is tested with new app builds.
+/// * If Version numbers are used and a new version is introduced, a new profile will not be enabled until an AMD engineer has been able to update a previous profile, or make a new one.
+///
+/// The cases for profile selection are as follows:
+///
+/// |Case|Profile Applied|
+/// |----|---------------|
+/// | App or Engine Version has profile | The profile is used. |
+/// | App or Engine Version num < profile version num | The closest profile > the version number is used. |
+/// | App or Engine Version num > profile version num | No profile selected/The previous method is used. |
+/// | App and Engine Version have profile | The App's profile is used. |
+/// | App and Engine Version num < profile version | The closest App profile > the version number is used. |
+/// | App and Engine Version, no App profile found | The Engine profile will be used. |
+/// | App/Engine name but no Version, has profile | The latest profile is used. |
+/// | No name or version, or no profile | The previous app detection method is used. |
+///
+/// As shown above, if an App name is given, and a profile is found for that app, that will be prioritized. The Engine name and profile will be used only if no app name is given, or no viable profile is found for the app name.
+/// In the case that App nor Engine have a profile, the previous app detection methods will be used. If given a version number that is larger than any profile version number, no profile will be selected.
+/// This is specifically to prevent cases where an update to an engine or app will cause catastrophic  breaks in the profile, allowing an engineer to test the profile before clearing it for public use with the new engine/app update.
+///
+/// @}
+
+/// \defgroup dx11misc Misc Extensions
+/// API for depth bounds test, UAV overlap and prim topologies
+/// @{
+
+///
+/// Function used to set the primitive topology. If you are using any of the extended topology types, then this function should
+/// be called to set ALL topology types.
+///
+/// The Quad List extension is a convenient way to submit quads without using an index buffer. Note that this still submits two triangles at the driver level.
+/// In order to use this function, AGS must already be initialized and agsDriverExtensionsDX11_Init must have been called successfully.
+///
+/// The Screen Rect extension, which is only available on GCN hardware, allows the user to pass in three of the four corners of a rectangle.
+/// The hardware then uses the bounding box of the vertices to rasterize the rectangle primitive (i.e. as a rectangle rather than two triangles).
+/// \note Note that this will not return valid interpolated values, only valid SV_Position values.
+/// \note If either the Quad List or Screen Rect extension are used, then agsDriverExtensionsDX11_IASetPrimitiveTopology should be called in place of the native DirectX11 equivalent all the time.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] topology                            The topology to set on the D3D11 device. This can be either an AGS-defined topology such as AGS_PRIMITIVE_TOPOLOGY_QUAD_LIST
+///                                                 or a standard D3D-defined topology such as D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP.
+///                                                 NB. the AGS-defined types will require casting to a D3D_PRIMITIVE_TOPOLOGY type.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_IASetPrimitiveTopology( AGSContext* context, enum D3D_PRIMITIVE_TOPOLOGY topology );
+
+///
+/// Function used indicate to the driver it can overlap the subsequent batch of back-to-back dispatches.
+/// When calling back-to-back draw calls or dispatch calls that write to the same UAV, the AMD DX11 driver will automatically insert a barrier to ensure there are no write after write (WAW) hazards.
+/// If the app can guarantee there is no overlap between the writes between these calls, then this extension will remove those barriers allowing the work to run in parallel on the GPU.
+///
+/// Usage would be as follows:
+/// \code{.cpp}
+///     // Disable automatic WAW syncs
+///     agsDriverExtensionsDX11_BeginUAVOverlap( m_agsContext );
+///
+///     // Submit back-to-back dispatches that write to the same UAV
+///     m_device->Dispatch( ... );  // First half of UAV
+///     m_device->Dispatch( ... );  // Second half of UAV
+///
+///     // Reenable automatic WAW syncs
+///     agsDriverExtensionsDX11_EndUAVOverlap( m_agsContext );
+/// \endcode
+///
+/// \param [in] context                             Pointer to a context.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_BeginUAVOverlap( AGSContext* context );
+
+///
+/// Function used indicate to the driver it can no longer overlap the batch of back-to-back dispatches that has been submitted.
+///
+/// \param [in] context                             Pointer to a context.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_EndUAVOverlap( AGSContext* context );
+
+///
+/// Function used to set the depth bounds test extension
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] enabled                             Whether to enable or disable the depth bounds testing. If disabled, the next two args are ignored.
+/// \param [in] minDepth                            The near depth range to clip against.
+/// \param [in] maxDepth                            The far depth range to clip against.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* context, bool enabled, float minDepth, float maxDepth );
+
+/// @}
+
+/// \defgroup mdi Multi Draw Indirect (MDI)
+/// API for dispatching multiple instanced draw commands.
+/// The multi draw indirect extensions allow multiple sets of DrawInstancedIndirect to be submitted in one API call.
+/// The draw calls are issued on the GPU's command processor (CP), potentially saving the significant CPU overheads incurred by submitting the equivalent draw calls on the CPU.
+///
+/// The extension allows the following code:
+/// \code{.cpp}
+///     // Submit n batches of DrawIndirect calls
+///     for ( int i = 0; i < n; i++ )
+///         DrawIndexedInstancedIndirect( buffer, i * sizeof( cmd ) );
+/// \endcode
+/// To be replaced by the following call:
+/// \code{.cpp}
+///     // Submit all n batches in one call
+///     agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( m_agsContext, n, buffer, 0, sizeof( cmd ) );
+/// \endcode
+///
+/// The buffer used for the indirect args must be of the following formats:
+/// \code{.cpp}
+///     // Buffer layout for agsDriverExtensions_MultiDrawInstancedIndirect
+///     struct DrawInstancedIndirectArgs
+///     {
+///         UINT VertexCountPerInstance;
+///         UINT InstanceCount;
+///         UINT StartVertexLocation;
+///         UINT StartInstanceLocation;
+///     };
+///
+///     // Buffer layout for agsDriverExtensions_MultiDrawIndexedInstancedIndirect
+///     struct DrawIndexedInstancedIndirectArgs
+///     {
+///         UINT IndexCountPerInstance;
+///         UINT InstanceCount;
+///         UINT StartIndexLocation;
+///         UINT BaseVertexLocation;
+///         UINT StartInstanceLocation;
+///     };
+/// \endcode
+///
+/// @{
+
+///
+/// Function used to submit a batch of draws via MultiDrawIndirect
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] drawCount                           The number of draws.
+/// \param [in] pBufferForArgs                      The args buffer.
+/// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
+/// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirect( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+
+///
+/// Function used to submit a batch of draws via MultiDrawIndirect
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] drawCount                           The number of draws.
+/// \param [in] pBufferForArgs                      The args buffer.
+/// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
+/// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+
+///
+/// Function used to submit a batch of draws via MultiDrawIndirect
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] pBufferForDrawCount                 The draw count buffer.
+/// \param [in] alignedByteOffsetForDrawCount       The offset into the draw count buffer.
+/// \param [in] pBufferForArgs                      The args buffer.
+/// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
+/// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+
+///
+/// Function used to submit a batch of draws via MultiDrawIndirect
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] pBufferForDrawCount                 The draw count buffer.
+/// \param [in] alignedByteOffsetForDrawCount       The offset into the draw count buffer.
+/// \param [in] pBufferForArgs                      The args buffer.
+/// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
+/// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+
+/// @}
+
+/// \defgroup shadercompiler Shader Compiler Controls
+/// API for controlling DirectX11 shader compilation.
+/// Check support for this feature using the AGS_DX11_EXTENSION_CREATE_SHADER_CONTROLS bit.
+/// Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+/// @{
+
+///
+/// This method can be used to limit the maximum number of threads the driver uses for asynchronous shader compilation.
+/// Setting it to 0 will disable asynchronous compilation completely and force the shaders to be compiled "inline" on the threads that call Create*Shader.
+///
+/// This method can only be called before any shaders are created and being compiled by the driver.
+/// If this method is called after shaders have been created the function will return AGS_FAILURE.
+/// This function only sets an upper limit.The driver may create fewer threads than allowed by this function.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] numberOfThreads                     The maximum number of threads to use.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount( AGSContext* context, unsigned int numberOfThreads );
+
+///
+/// This method can be used to determine the total number of asynchronous shader compile jobs that are either
+/// queued for waiting for compilation or being compiled by the driver’s asynchronous compilation threads.
+/// This method can be called at any during the lifetime of the driver.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [out] numberOfJobs                       Pointer to the number of jobs in flight currently.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NumPendingAsyncCompileJobs( AGSContext* context, unsigned int* numberOfJobs );
+
+///
+/// This method can be used to enable or disable the disk based shader cache.
+/// Enabling/disabling the disk cache is not supported if is it disabled explicitly via Radeon Settings or by an app profile.
+/// Calling this method under these conditions will result in AGS_FAILURE being returned.
+/// It is recommended that this method be called before any shaders are created by the application and being compiled by the driver.
+/// Doing so at any other time may result in the cache being left in an inconsistent state.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] enable                              Whether to enable the disk cache. 0 to disable, 1 to enable.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDiskShaderCacheEnabled( AGSContext* context, int enable );
+
+/// @}
+
+/// \defgroup multiview Multiview
+/// API for multiview broadcasting.
+/// Check support for this feature using the AGS_DX11_EXTENSION_MULTIVIEW bit.
+/// Supported in Radeon Software Version 16.12.1 (driver version 16.50.2001) onwards.
+/// @{
+
+///
+/// Function to control draw calls replication to multiple viewports and RT slices.
+/// Setting any mask to 0 disables draw replication.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] vpMask                              Viewport control bit mask.
+/// \param [in] rtSliceMask                         RT slice control bit mask.
+/// \param [in] vpMaskPerRtSliceEnabled             If 0, 16 lower bits of vpMask apply to all RT slices; if 1 each 16 bits of 64-bit mask apply to corresponding 4 RT slices.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetViewBroadcastMasks( AGSContext* context, unsigned long long vpMask, unsigned long long rtSliceMask, int vpMaskPerRtSliceEnabled );
+
+///
+/// Function returns max number of supported clip rectangles.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [out] maxRectCount                       Returned max number of clip rectangles.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_GetMaxClipRects( AGSContext* context, unsigned int* maxRectCount );
+
+///
+/// Function sets clip rectangles.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] clipRectCount                       Number of specified clip rectangles. Use 0 to disable clip rectangles.
+/// \param [in] clipRects                           Array of clip rectangles.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetClipRects( AGSContext* context, unsigned int clipRectCount, const AGSClipRect* clipRects );
+
+/// @}
+
+/// \defgroup cfxapi Explicit Crossfire API
+/// API for explicit control over Crossfire
+/// @{
+
+///
+/// Function to create a Direct3D11 resource with the specified AFR transfer type and specified transfer engine.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] desc                                Pointer to the D3D11 resource description.
+/// \param [in] initialData                         Optional pointer to the initializing data for the resource.
+/// \param [out] buffer                             Returned pointer to the resource.
+/// \param [in] transferType                        The transfer behavior.
+/// \param [in] transferEngine                      The transfer engine to use.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateBuffer( AGSContext* context, const D3D11_BUFFER_DESC* desc, const D3D11_SUBRESOURCE_DATA* initialData, ID3D11Buffer** buffer, AGSAfrTransferType transferType, AGSAfrTransferEngine transferEngine );
+
+///
+/// Function to create a Direct3D11 resource with the specified AFR transfer type and specified transfer engine.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] desc                                Pointer to the D3D11 resource description.
+/// \param [in] initialData                         Optional pointer to the initializing data for the resource.
+/// \param [out] texture1D                          Returned pointer to the resource.
+/// \param [in] transferType                        The transfer behavior.
+/// \param [in] transferEngine                      The transfer engine to use.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateTexture1D( AGSContext* context, const D3D11_TEXTURE1D_DESC* desc, const D3D11_SUBRESOURCE_DATA* initialData, ID3D11Texture1D** texture1D, AGSAfrTransferType transferType, AGSAfrTransferEngine transferEngine );
+
+///
+/// Function to create a Direct3D11 resource with the specified AFR transfer type and specified transfer engine.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] desc                                Pointer to the D3D11 resource description.
+/// \param [in] initialData                         Optional pointer to the initializing data for the resource.
+/// \param [out] texture2D                          Returned pointer to the resource.
+/// \param [in] transferType                        The transfer behavior.
+/// \param [in] transferEngine                      The transfer engine to use.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateTexture2D( AGSContext* context, const D3D11_TEXTURE2D_DESC* desc, const D3D11_SUBRESOURCE_DATA* initialData, ID3D11Texture2D** texture2D, AGSAfrTransferType transferType, AGSAfrTransferEngine transferEngine );
+
+///
+/// Function to create a Direct3D11 resource with the specified AFR transfer type and specified transfer engine.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] desc                                Pointer to the D3D11 resource description.
+/// \param [in] initialData                         Optional pointer to the initializing data for the resource.
+/// \param [out] texture3D                          Returned pointer to the resource.
+/// \param [in] transferType                        The transfer behavior.
+/// \param [in] transferEngine                      The transfer engine to use.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateTexture3D( AGSContext* context, const D3D11_TEXTURE3D_DESC* desc, const D3D11_SUBRESOURCE_DATA* initialData, ID3D11Texture3D** texture3D, AGSAfrTransferType transferType, AGSAfrTransferEngine transferEngine );
+
+///
+/// Function to notify the driver that we have finished writing to the resource this frame.
+/// This will initiate a transfer for AGS_AFR_TRANSFER_1STEP_P2P,
+/// AGS_AFR_TRANSFER_2STEP_NO_BROADCAST, and AGS_AFR_TRANSFER_2STEP_WITH_BROADCAST.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] resource                            Pointer to the resource.
+/// \param [in] transferRegions                     An array of transfer regions (can be null to specify the whole area).
+/// \param [in] subresourceArray                    An array of subresource indices (can be null to specify all subresources).
+/// \param [in] numSubresources                     The number of subresources in subresourceArray OR number of transferRegions. Use 0 to specify ALL subresources and one transferRegion (which may be null if specifying the whole area).
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceEndWrites( AGSContext* context, ID3D11Resource* resource, const D3D11_RECT* transferRegions, const unsigned int* subresourceArray, unsigned int numSubresources );
+
+///
+/// This will notify the driver that the app will begin read/write access to the resource.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] resource                            Pointer to the resource.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceBeginAllAccess( AGSContext* context, ID3D11Resource* resource );
+
+///
+///   This is used for AGS_AFR_TRANSFER_1STEP_P2P to notify when it is safe to initiate a transfer.
+///   This call in frame N-(NumGpus-1) allows a 1 step P2P in frame N to start.
+///   This should be called after agsDriverExtensionsDX11_NotifyResourceEndWrites.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] resource                            Pointer to the resource.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceEndAllAccess( AGSContext* context, ID3D11Resource* resource );
+
+/// @}
+
+/// @}
+
+#ifdef __cplusplus
+} // extern "C"
+#endif
+
+#endif // AMD_AGS_H

From e10f7f83b4d7c4269b93b79912cb3ee4ba58187e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <jkucia@codeweavers.com>
Date: Mon, 23 Jul 2018 19:53:20 +0200
Subject: [PATCH] amd_ags_x64: Make amd_ags.h usable with gcc.

---
 dlls/amd_ags_x64/amd_ags.h | 110 +++++++++++++++++--------------------
 1 file changed, 51 insertions(+), 59 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index 9c3e37e52e5..a83a1f88692 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -96,8 +96,7 @@
 extern "C" {
 #endif
 
-
-#define AMD_AGS_API __declspec(dllexport)   ///< AGS calling convention
+#define AMD_AGS_API WINAPI
 
 // Forward declaration of D3D11 types
 struct IDXGIAdapter;
@@ -117,8 +116,6 @@ struct D3D11_TEXTURE1D_DESC;
 struct D3D11_TEXTURE2D_DESC;
 struct D3D11_TEXTURE3D_DESC;
 struct D3D11_SUBRESOURCE_DATA;
-struct tagRECT;
-typedef tagRECT D3D11_RECT;             ///< typedef this ourselves so we don't have to drag d3d11.h in
 
 // Forward declaration of D3D12 types
 struct ID3D12Device;
@@ -126,7 +123,7 @@ struct ID3D12GraphicsCommandList;
 
 
 /// The return codes
-enum AGSReturnCode
+typedef enum AGSReturnCode
 {
     AGS_SUCCESS,                    ///< Successful function call
     AGS_FAILURE,                    ///< Failed to complete call for some unspecified reason
@@ -136,10 +133,10 @@ enum AGSReturnCode
     AGS_ERROR_LEGACY_DRIVER,        ///< Returned if a feature is not present in the installed driver
     AGS_EXTENSION_NOT_SUPPORTED,    ///< Returned if the driver does not support the requested driver extension
     AGS_ADL_FAILURE,                ///< Failure in ADL (the AMD Display Library)
-};
+} AGSReturnCode;
 
 /// The DirectX11 extension support bits
-enum AGSDriverExtensionDX11
+typedef enum AGSDriverExtensionDX11
 {
     AGS_DX11_EXTENSION_QUADLIST                             = 1 << 0,
     AGS_DX11_EXTENSION_SCREENRECTLIST                       = 1 << 1,
@@ -161,10 +158,10 @@ enum AGSDriverExtensionDX11
     AGS_DX11_EXTENSION_CREATE_SHADER_CONTROLS               = 1 << 17,
     AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,
     AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19    ///< Supported in Radeon Software Version 17.9.1 onwards.
-};
+} AGSDriverExtensionDX11;
 
 /// The DirectX12 extension support bits
-enum AGSDriverExtensionDX12
+typedef enum AGSDriverExtensionDX12
 {
     AGS_DX12_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 0,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
     AGS_DX12_EXTENSION_INTRINSIC_READLANE                   = 1 << 1,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
@@ -177,48 +174,48 @@ enum AGSDriverExtensionDX12
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 8,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 9,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_USER_MARKERS                         = 1 << 10   ///< Supported in Radeon Software Version 17.9.1 onwards.
-};
+} AGSDriverExtensionDX12;
 
 /// The space id for DirectX12 intrinsic support
 const unsigned int AGS_DX12_SHADER_INSTRINSICS_SPACE_ID = 0x7FFF0ADE; // 2147420894
 
 
 /// Additional topologies supported via extensions
-enum AGSPrimitiveTopology
+typedef enum AGSPrimitiveTopology
 {
     AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,
     AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9
-};
+} AGSPrimitiveTopology;
 
 /// The different modes to control Crossfire behavior.
-enum AGSCrossfireMode
+typedef enum AGSCrossfireMode
 {
     AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                              ///< Use the default driver-based AFR rendering
     AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                                ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
     AGS_CROSSFIRE_MODE_DISABLE                                      ///< Completely disable AFR rendering
-};
+} AGSCrossfireMode;
 
 
 /// The Crossfire API transfer types
-enum AGSAfrTransferType
+typedef enum AGSAfrTransferType
 {
     AGS_AFR_TRANSFER_DEFAULT                                = 0,    ///< Default Crossfire driver resource tracking
     AGS_AFR_TRANSFER_DISABLE                                = 1,    ///< Turn off driver resource tracking
     AGS_AFR_TRANSFER_1STEP_P2P                              = 2,    ///< App controlled GPU to next GPU transfer
     AGS_AFR_TRANSFER_2STEP_NO_BROADCAST                     = 3,    ///< App controlled GPU to next GPU transfer using intermediate system memory
     AGS_AFR_TRANSFER_2STEP_WITH_BROADCAST                   = 4,    ///< App controlled GPU to all render GPUs transfer using intermediate system memory
-};
+} AGSAfrTransferType;
 
 /// The Crossfire API transfer engines
-enum AGSAfrTransferEngine
+typedef enum AGSAfrTransferEngine
 {
     AGS_AFR_TRANSFERENGINE_DEFAULT                          = 0,    ///< Use default engine for Crossfire API transfers
     AGS_AFR_TRANSFERENGINE_3D_ENGINE                        = 1,    ///< Use 3D engine for Crossfire API transfers
     AGS_AFR_TRANSFERENGINE_COPY_ENGINE                      = 2,    ///< Use Copy engine for Crossfire API transfers
-};
+} AGSAfrTransferEngine;
 
 /// The display flags describing various properties of the display.
-enum AGSDisplayFlags
+typedef enum AGSDisplayFlags
 {
     AGS_DISPLAYFLAG_PRIMARY_DISPLAY                         = 1 << 0,   ///< Whether this display is marked as the primary display. Not set on the WACK version.
     AGS_DISPLAYFLAG_HDR10                                   = 1 << 1,   ///< HDR10 is supported on this display
@@ -228,35 +225,33 @@ enum AGSDisplayFlags
     AGS_DISPLAYFLAG_EYEFINITY_IN_GROUP                      = 1 << 5,   ///< The display is part of the Eyefinity group
     AGS_DISPLAYFLAG_EYEFINITY_PREFERRED_DISPLAY             = 1 << 6,   ///< The display is the preferred display in the Eyefinity group for displaying the UI
     AGS_DISPLAYFLAG_EYEFINITY_IN_PORTRAIT_MODE              = 1 << 7,   ///< The display is in the Eyefinity group but in portrait mode
-};
+} AGSDisplayFlags;
 
-struct AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
+typedef struct AGSContext AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
 
 /// The rectangle struct used by AGS.
-struct AGSRect
+typedef struct AGSRect
 {
     int offsetX;    ///< Offset on X axis
     int offsetY;    ///< Offset on Y axis
     int width;      ///< Width of rectangle
     int height;     ///< Height of rectangle
-};
+} AGSRect;
 
 /// The clip rectangle struct used by \ref agsDriverExtensionsDX11_SetClipRects
-struct AGSClipRect
+typedef struct AGSClipRect
 {
     /// The inclusion mode for the rect
-    enum Mode
+    enum
     {
         ClipRectIncluded = 0,   ///< Include the rect
         ClipRectExcluded = 1    ///< Exclude the rect
-    };
-
-    Mode            mode; ///< Include/exclude rect region
+    }               mode; ; ///< Include/exclude rect region
     AGSRect         rect; ///< The rect to include/exclude
-};
+} AGSClipRect;
 
 /// The display info struct used to describe a display enumerated by AGS
-struct AGSDisplayInfo
+typedef struct AGSDisplayInfo
 {
     char                    name[ 256 ];                    ///< The name of the display
     char                    displayDeviceName[ 32 ];        ///< The display device name, i.e. DISPLAY_DEVICE::DeviceName
@@ -296,19 +291,19 @@ struct AGSDisplayInfo
 
     int                     logicalDisplayIndex;            ///< The internally used index of this display
     int                     adlAdapterIndex;                ///< The internally used ADL adapter index
-};
+} AGSDisplayInfo;
 
-/// The device info struct used to describe a physical GPU enumerated by AGS
-struct AGSDeviceInfo
+/// The architecture version
+typedef enum ArchitectureVersion
 {
-    /// The architecture version
-    enum ArchitectureVersion
-    {
-        ArchitectureVersion_Unknown,                                ///< Unknown architecture, potentially from another IHV. Check AGSDeviceInfo::vendorId
-        ArchitectureVersion_PreGCN,                                 ///< AMD architecture, pre-GCN
-        ArchitectureVersion_GCN                                     ///< AMD GCN architecture
-    };
+    ArchitectureVersion_Unknown,                                ///< Unknown architecture, potentially from another IHV. Check \ref AGSDeviceInfo::vendorId
+    ArchitectureVersion_PreGCN,                                 ///< AMD architecture, pre-GCN
+    ArchitectureVersion_GCN                                     ///< AMD GCN architecture
+} ArchitectureVersion;
 
+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo
+{
     ArchitectureVersion             architectureVersion;            ///< Set to Unknown if not AMD hardware
     const char*                     adapterString;                  ///< The adapter name string
     int                             vendorId;                       ///< The vendor id
@@ -334,7 +329,7 @@ struct AGSDeviceInfo
     int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
 
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
-};
+} AGSDeviceInfo;
 
 /// \defgroup general General API functions
 /// API for initialization, cleanup, HDR display modes and Crossfire GPU count
@@ -343,16 +338,15 @@ struct AGSDeviceInfo
 typedef void* (__stdcall *AGS_ALLOC_CALLBACK)( int allocationSize );    ///< AGS user defined allocation prototype
 typedef void (__stdcall *AGS_FREE_CALLBACK)( void* allocationPtr );     ///< AGS user defined free prototype
 
-                                                                        /// The configuration options that can be passed in to \ref agsInit
-struct AGSConfiguration
+/// The configuration options that can be passed in to \ref agsInit
+typedef struct AGSConfiguration
 {
     AGS_ALLOC_CALLBACK      allocCallback;                  ///< Optional memory allocation callback. If not supplied, malloc() is used
     AGS_FREE_CALLBACK       freeCallback;                   ///< Optional memory freeing callback. If not supplied, free() is used
-    AGSCrossfireMode        crossfireMode;                  ///< Desired Crossfire mode
-};
+} AGSConfiguration;
 
 /// The top level GPU information returned from \ref agsInit
-struct AGSGPUInfo
+typedef struct AGSGPUInfo
 {
     int                     agsVersionMajor;                ///< Major field of Major.Minor.Patch AGS version number
     int                     agsVersionMinor;                ///< Minor field of Major.Minor.Patch AGS version number
@@ -364,22 +358,20 @@ struct AGSGPUInfo
 
     int                     numDevices;                     ///< Number of GPUs in the system
     AGSDeviceInfo*          devices;                        ///< List of GPUs in the system
-};
+} AGSGPUInfo;
 
 /// The struct to specify the display settings to the driver.
-struct AGSDisplaySettings
+typedef struct AGSDisplaySettings
 {
     /// The display mode
-    enum Mode
+    enum
     {
         Mode_SDR,                                           ///< SDR mode
         Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
         Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
         Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. Values in the range of 0.0 to 125.0 where 125.0 == AGSDisplayInfo::maxLuminance.
         Mode_DolbyVision                                    ///< Dolby Vision, requiring an 8888 UNORM swapchain
-    };
-
-    Mode                    mode;                           ///< The display mode to set the display into
+    }                       mode;                           ///< The display mode to set the display into
 
     double                  chromaticityRedX;               ///< Red display primary X coord
     double                  chromaticityRedY;               ///< Red display primary Y coord
@@ -398,7 +390,7 @@ struct AGSDisplaySettings
 
     double                  maxContentLightLevel;           ///< The maximum content light level in nits (MaxCLL)
     double                  maxFrameAverageLightLevel;      ///< The maximum frame average light level in nits (MaxFALL)
-};
+} AGSDisplaySettings;
 
 ///
 /// Function used to initialize the AGS library.
@@ -526,7 +518,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_SetMarker( AGSContext* context
 /// @{
 
 /// The struct to specify the existing DX11 device creation parameters
-struct AGSDX11DeviceCreationParams
+typedef struct AGSDX11DeviceCreationParams
 {
     IDXGIAdapter*               pAdapter;                   ///< Consult the DX documentation on D3D11CreateDevice for this parameter
     D3D_DRIVER_TYPE             DriverType;                 ///< Consult the DX documentation on D3D11CreateDevice for this parameter
@@ -536,13 +528,13 @@ struct AGSDX11DeviceCreationParams
     UINT                        FeatureLevels;              ///< Consult the DX documentation on D3D11CreateDevice for this parameter
     UINT                        SDKVersion;                 ///< Consult the DX documentation on D3D11CreateDevice for this parameter
     const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc;             ///< Optional swapchain description. Specify this to invoke D3D11CreateDeviceAndSwapChain instead of D3D11CreateDevice. This must be null on the WACK compliant version
-};
+} AGSDX11DeviceCreationParams;
 
 #define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX11ExtensionParams
 #define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
 
 /// The struct to specify DX11 additional device creation parameters
-struct AGSDX11ExtensionParams
+typedef struct AGSDX11ExtensionParams
 {
     unsigned int    uavSlot;           ///< The UAV slot reserved for intrinsic support. This must match the slot defined in the HLSL, i.e. #define AmdDxExtShaderIntrinsicsUAVSlot.
                                        /// The default slot is 7, but the caller is free to use an alternative slot.
@@ -550,17 +542,17 @@ struct AGSDX11ExtensionParams
     UINT            appVersion;        ///< Application version
     const WCHAR*    pEngineName;       ///< Engine name
     UINT            engineVersion;     ///< Engine version
-};
+} AGSDX11ExtensionParams;
 
 /// The struct to hold all the returned parameters from the device creation call
-struct AGSDX11ReturnedParams
+typedef struct AGSDX11ReturnedParams
 {
     ID3D11Device*           pDevice;                ///< The newly created device
     D3D_FEATURE_LEVEL       FeatureLevel;           ///< The feature level supported by the newly created device
     ID3D11DeviceContext*    pImmediateContext;      ///< The newly created immediate device context
     IDXGISwapChain*         pSwapChain;             ///< The newly created swap chain. This is only created if a valid pSwapChainDesc is supplied in AGSDX11DeviceCreationParams. This is not supported on the WACK compliant version
     unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX11_CreateDevice will fill in to indicate which extensions are supported. See AGSDriverExtensionDX11
-};
+} AGSDX11ReturnedParams;
 
 ///
 /// Function used to create a D3D11 device with additional AMD-specific initialization parameters.


From e0c31d82fb16f5a5b4346bf4c0729613244cfbd1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <jkucia@codeweavers.com>
Date: Mon, 23 Jul 2018 19:53:20 +0200
Subject: [PATCH] amd_ags_x64: Add dll.

This is needed to avoid Wolfenstein 2 showing a driver warning dialog on
AMD hardware.
---
 configure                           |   2 +
 configure.ac                        |   1 +
 dlls/amd_ags_x64/Makefile.in        |   6 +
 dlls/amd_ags_x64/amd_ags_x64.spec   |  29 +++++
 dlls/amd_ags_x64/amd_ags_x64_main.c | 193 ++++++++++++++++++++++++++++
 5 files changed, 231 insertions(+)
 create mode 100644 dlls/amd_ags_x64/Makefile.in
 create mode 100644 dlls/amd_ags_x64/amd_ags_x64.spec
 create mode 100644 dlls/amd_ags_x64/amd_ags_x64_main.c

diff --git a/configure b/configure
index 089a87b863b..1e1b06a61dc 100755
--- a/configure
+++ b/configure
@@ -904,6 +904,7 @@ enable_adsldp
 enable_adsldpc
 enable_advapi32
 enable_advpack
+enable_amd_ags_x64
 enable_amsi
 enable_amstream
 enable_api_ms_win_appmodel_identity_l1_1_0
@@ -19271,6 +19272,7 @@ wine_fn_config_makefile dlls/advapi32 enable_advapi32
 wine_fn_config_makefile dlls/advapi32/tests enable_tests
 wine_fn_config_makefile dlls/advpack enable_advpack
 wine_fn_config_makefile dlls/advpack/tests enable_tests
+wine_fn_config_makefile dlls/amd_ags_x64 enable_amd_ags_x64
 wine_fn_config_makefile dlls/amsi enable_amsi
 wine_fn_config_makefile dlls/amstream enable_amstream
 wine_fn_config_makefile dlls/amstream/tests enable_tests
diff --git a/configure.ac b/configure.ac
index 224bc2e7030..49c37fabe0c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2896,6 +2896,7 @@ WINE_CONFIG_MAKEFILE(dlls/advapi32)
 WINE_CONFIG_MAKEFILE(dlls/advapi32/tests)
 WINE_CONFIG_MAKEFILE(dlls/advpack)
 WINE_CONFIG_MAKEFILE(dlls/advpack/tests)
+WINE_CONFIG_MAKEFILE(dlls/amd_ags_x64)
 WINE_CONFIG_MAKEFILE(dlls/amsi)
 WINE_CONFIG_MAKEFILE(dlls/amstream)
 WINE_CONFIG_MAKEFILE(dlls/amstream/tests)
diff --git a/dlls/amd_ags_x64/Makefile.in b/dlls/amd_ags_x64/Makefile.in
new file mode 100644
index 00000000000..7545260d1de
--- /dev/null
+++ b/dlls/amd_ags_x64/Makefile.in
@@ -0,0 +1,6 @@
+MODULE    = amd_ags_x64.dll
+IMPORTS   = vulkan-1
+IMPORTLIB = amd_ags_x64
+
+SOURCES = \
+	amd_ags_x64_main.c
diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
new file mode 100644
index 00000000000..b4da6136a64
--- /dev/null
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -0,0 +1,29 @@
+1 stdcall agsDeInit(ptr)
+2 stub agsDriverExtensionsDX11_BeginUAVOverlap
+3 stub agsDriverExtensionsDX11_CreateBuffer
+4 stub agsDriverExtensionsDX11_CreateTexture1D
+5 stub agsDriverExtensionsDX11_CreateTexture2D
+6 stub agsDriverExtensionsDX11_CreateTexture3D
+7 stub agsDriverExtensionsDX11_DeInit
+8 stub agsDriverExtensionsDX11_EndUAVOverlap
+9 stub agsDriverExtensionsDX11_GetMaxClipRects
+10 stub agsDriverExtensionsDX11_IASetPrimitiveTopology
+11 stub agsDriverExtensionsDX11_Init
+12 stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect
+13 stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect
+14 stub agsDriverExtensionsDX11_MultiDrawInstancedIndirect
+15 stub agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect
+16 stub agsDriverExtensionsDX11_NotifyResourceBeginAllAccess
+17 stub agsDriverExtensionsDX11_NotifyResourceEndAllAccess
+18 stub agsDriverExtensionsDX11_NotifyResourceEndWrites
+19 stub agsDriverExtensionsDX11_NumPendingAsyncCompileJobs
+20 stub agsDriverExtensionsDX11_SetClipRects
+21 stub agsDriverExtensionsDX11_SetDepthBounds
+22 stub agsDriverExtensionsDX11_SetDiskShaderCacheEnabled
+23 stub agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
+24 stub agsDriverExtensionsDX11_SetViewBroadcastMasks
+25 stub agsDriverExtensionsDX12_DeInit
+26 stub agsDriverExtensionsDX12_Init
+27 stub agsGetCrossfireGPUCount
+28 stdcall agsInit(ptr ptr ptr)
+29 stub agsSetDisplayMode
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
new file mode 100644
index 00000000000..382447089bc
--- /dev/null
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -0,0 +1,191 @@
+#include "config.h"
+
+#include <stdarg.h>
+#include <stdbool.h>
+
+#include "windef.h"
+#include "winbase.h"
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+#include "wine/vulkan.h"
+
+#include "d3d11.h"
+#include "d3d12.h"
+
+#include "amd_ags.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(amd_ags);
+
+struct AGSContext
+{
+    unsigned int device_count;
+    AGSDeviceInfo *devices;
+    VkPhysicalDeviceProperties *properties;
+};
+
+static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
+        VkPhysicalDeviceProperties **out)
+{
+    VkPhysicalDeviceProperties *properties = NULL;
+    VkPhysicalDevice *vk_physical_devices = NULL;
+    VkInstance vk_instance = VK_NULL_HANDLE;
+    VkInstanceCreateInfo create_info;
+    AGSReturnCode ret = AGS_SUCCESS;
+    uint32_t count, i;
+    VkResult vr;
+
+    *out = NULL;
+    *out_count = 0;
+
+    memset(&create_info, 0, sizeof(create_info));
+    create_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
+    if ((vr = vkCreateInstance(&create_info, NULL, &vk_instance) < 0))
+    {
+        WARN("Failed to create Vulkan instance, vr %d.\n", vr);
+        goto done;
+    }
+
+    if ((vr = vkEnumeratePhysicalDevices(vk_instance, &count, NULL)) < 0)
+    {
+        WARN("Failed to enumerate devices, vr %d.\n", vr);
+        goto done;
+    }
+
+    if (!(vk_physical_devices = heap_calloc(count, sizeof(*vk_physical_devices))))
+    {
+        WARN("Failed to allocate memory.\n");
+        ret = AGS_OUT_OF_MEMORY;
+        goto done;
+    }
+
+    if ((vr = vkEnumeratePhysicalDevices(vk_instance, &count, vk_physical_devices)) < 0)
+    {
+        WARN("Failed to enumerate devices, vr %d.\n", vr);
+        goto done;
+    }
+
+    if (!(properties = heap_calloc(count, sizeof(*properties))))
+    {
+        WARN("Failed to allocate memory.\n");
+        ret = AGS_OUT_OF_MEMORY;
+        goto done;
+    }
+
+    for (i = 0; i < count; ++i)
+        vkGetPhysicalDeviceProperties(vk_physical_devices[i], &properties[i]);
+
+    *out_count = count;
+    *out = properties;
+
+done:
+    heap_free(vk_physical_devices);
+    if (vk_instance)
+        vkDestroyInstance(vk_instance, NULL);
+    return ret;
+}
+
+static AGSReturnCode init_ags_context(AGSContext *context)
+{
+    AGSReturnCode ret;
+    unsigned int i;
+
+    context->device_count = 0;
+    context->devices = NULL;
+    context->properties = NULL;
+
+    ret = vk_get_physical_device_properties(&context->device_count, &context->properties);
+    if (ret != AGS_SUCCESS || !context->device_count)
+        return ret;
+
+    if (!(context->devices = heap_calloc(context->device_count, sizeof(*context->devices))))
+    {
+        WARN("Failed to allocate memory.\n");
+        heap_free(context->properties);
+        return AGS_OUT_OF_MEMORY;
+    }
+
+    for (i = 0; i < context->device_count; ++i)
+    {
+        const VkPhysicalDeviceProperties *vk_properties = &context->properties[i];
+        AGSDeviceInfo *device = &context->devices[i];
+
+        device->adapterString = vk_properties->deviceName;
+        device->vendorId = vk_properties->vendorID;
+        device->deviceId = vk_properties->deviceID;
+
+        if (device->vendorId == 0x1002)
+            device->architectureVersion = ArchitectureVersion_GCN;
+
+        if (!i)
+            device->isPrimaryDevice = 1;
+    }
+
+    return AGS_SUCCESS;
+}
+
+AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *config, AGSGPUInfo *gpu_info)
+{
+    struct AGSContext *object;
+    AGSReturnCode ret;
+
+    TRACE("context %p, config %p, gpu_info %p.\n", context, config, gpu_info);
+
+    if (!context || !gpu_info)
+        return AGS_INVALID_ARGS;
+
+    if (config)
+        FIXME("Ignoring config %p.\n", config);
+
+    if (!(object = heap_alloc(sizeof(*object))))
+        return AGS_OUT_OF_MEMORY;
+
+    if ((ret = init_ags_context(object)) != AGS_SUCCESS)
+    {
+        heap_free(object);
+        return ret;
+    }
+
+    memset(gpu_info, 0, sizeof(*gpu_info));
+    gpu_info->agsVersionMajor = AMD_AGS_VERSION_MAJOR;
+    gpu_info->agsVersionMinor = AMD_AGS_VERSION_MINOR;
+    gpu_info->agsVersionPatch = AMD_AGS_VERSION_PATCH;
+    gpu_info->driverVersion = "18.10.16-180516a-328911C-RadeonSoftwareAdrenalin";
+    gpu_info->radeonSoftwareVersion  = "18.5.1";
+    gpu_info->numDevices = object->device_count;
+    gpu_info->devices = object->devices;
+
+    TRACE("Created context %p.\n", object);
+
+    *context = object;
+
+    return AGS_SUCCESS;
+}
+
+AGSReturnCode WINAPI agsDeInit(AGSContext *context)
+{
+    TRACE("context %p.\n", context);
+
+    if (context)
+    {
+        heap_free(context->properties);
+        heap_free(context->devices);
+        heap_free(context);
+    }
+
+    return AGS_SUCCESS;
+}
+
+BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, void *reserved)
+{
+    TRACE("%p, %u, %p.\n", instance, reason, reserved);
+
+    switch (reason)
+    {
+        case DLL_PROCESS_ATTACH:
+            DisableThreadLibraryCalls(instance);
+            break;
+    }
+
+    return TRUE;
+}
From 6c1f7e489f1cf1726e9e818e24a1d45398acf81c Mon Sep 17 00:00:00 2001
From: Zhiyi Zhang <zzhang@codeweavers.com>
Date: Tue, 1 Oct 2019 09:28:29 +0800
Subject: [PATCH] amd_args_x64: Add agsGetCrossfireGPUCount stub.

Signed-off-by: Zhiyi Zhang <zzhang@codeweavers.com>
---
 dlls/amd_ags_x64/amd_ags_x64.spec   |  2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 11 +++++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index b4da6136a64..a302d2fc657 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -24,6 +24,6 @@
 24 stub agsDriverExtensionsDX11_SetViewBroadcastMasks
 25 stub agsDriverExtensionsDX12_DeInit
 26 stub agsDriverExtensionsDX12_Init
-27 stub agsGetCrossfireGPUCount
+27 stdcall agsGetCrossfireGPUCount(ptr ptr)
 28 stdcall agsInit(ptr ptr ptr)
 29 stub agsSetDisplayMode
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 382447089bc..26b39991525 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -176,6 +176,17 @@ AGSReturnCode WINAPI agsDeInit(AGSContext *context)
     return AGS_SUCCESS;
 }
 
+AGSReturnCode WINAPI agsGetCrossfireGPUCount(AGSContext *context, int *gpu_count)
+{
+    TRACE("context %p gpu_count %p stub!\n", context, gpu_count);
+
+    if (!context || !gpu_count)
+        return AGS_INVALID_ARGS;
+
+    *gpu_count = 1;
+    return AGS_SUCCESS;
+}
+
 BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p.\n", instance, reason, reserved);
From 64bebf345ed6bb4620938753f7668a85c6bf1410 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Thu, 11 Jun 2020 15:39:32 -0700
Subject: [PATCH] amd_ags_x64: Build with msvcrt.

Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
---
 dlls/amd_ags_x64/Makefile.in        | 2 ++
 dlls/amd_ags_x64/amd_ags_x64_main.c | 2 --
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/amd_ags_x64/Makefile.in b/dlls/amd_ags_x64/Makefile.in
index 7545260d1de..aa7127e2ede 100644
--- a/dlls/amd_ags_x64/Makefile.in
+++ b/dlls/amd_ags_x64/Makefile.in
@@ -2,5 +2,7 @@ MODULE    = amd_ags_x64.dll
 IMPORTS   = vulkan-1
 IMPORTLIB = amd_ags_x64
 
+EXTRADLLFLAGS = -mno-cygwin -Wb,--prefer-native
+
 SOURCES = \
 	amd_ags_x64_main.c
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 26b39991525..c6554a17b6f 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -1,5 +1,3 @@
-#include "config.h"
-
 #include <stdarg.h>
 #include <stdbool.h>
 
From b0941df623aad8d30fdfe9328cffdb3a1a2e66b1 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Thu, 11 Jun 2020 17:33:56 -0700
Subject: [PATCH] amd_ags_x64: Update to 5.2.0.

---
 dlls/amd_ags_x64/amd_ags.h          | 577 +++++++++++++++++++++++-----
 dlls/amd_ags_x64/amd_ags_x64_main.c |  60 ++-
 2 files changed, 531 insertions(+), 106 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index a83a1f88692..b647f912aa7 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -1,5 +1,5 @@
 //
-// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
+// Copyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.
 //
 // Permission is hereby granted, free of charge, to any person obtaining a copy
 // of this software and associated documentation files (the "Software"), to deal
@@ -24,7 +24,7 @@
 /// \mainpage
 /// AGS Library Overview
 /// --------------------
-/// This document provides an overview of the AGS (AMD GPU Services) library. The AGS library provides software developers with the ability to query
+/// This document provides an overview of the AGS (AMD GPU Services) library. The AGS library provides software developers with the ability to query 
 /// AMD GPU software and hardware state information that is not normally available through standard operating systems or graphic APIs.
 ///
 /// The latest version of the API is publicly hosted here: https://github.com/GPUOpen-LibrariesAndSDKs/AGS_SDK/.
@@ -33,6 +33,15 @@
 /// Online documentation is publicly hosted here: http://gpuopen-librariesandsdks.github.io/ags/
 /// \endinternal
 ///
+/// What's new in AGS 5.2.0 since version 5.1
+/// ---------------------------------------
+/// AGS 5.2 includes the following updates:
+/// * DX12 app registration API
+/// * DX11 breadcrumb marker API for tracking down GPU hangs:\ref agsDriverExtensionsDX11_WriteBreadcrumb
+/// * DX12 extensions now require the creation of the device via \ref agsDriverExtensionsDX12_CreateDevice
+/// * agsGetCrossfireGPUCount has been removed in favor of retrieving the value from \ref agsDriverExtensionsDX11_CreateDevice
+/// * API change that fixes a reference leak in \ref agsDriverExtensionsDX11_DestroyDevice
+///
 /// What's new in AGS 5.1.1 since version 5.0.6
 /// ---------------------------------------
 /// AGS 5.1.1 includes the following updates:
@@ -50,7 +59,7 @@
 ///
 /// What's new in AGS 5.x since version 4.x
 /// ---------------------------------------
-/// Version 5.x is a major overhaul of the library designed to provide a much clearer view of the GPUs in the system and the displays attached to them.
+/// Version 5.x is a major overhaul of the library designed to provide a much clearer view of the GPUs in the system and the displays attached to them. 
 /// It also exposes the ability to query each display for HDR capabilities and put those HDR capable displays into various HDR modes.
 /// Some functions such as agsGetGPUMemorySize and agsGetEyefinityConfigInfo have been removed in favor of including this information in the device & display enumeration.
 /// Features include:
@@ -69,8 +78,8 @@
 /// * AGSSample
 /// * CrossfireSample
 /// * EyefinitySample
-/// The AGSSample application is the simplest of the three examples and demonstrates the code required to initialize AGS and use it to query the GPU and Eyefinity state.
-/// The CrossfireSample application demonstrates the use of the new API to transfer resources on GPUs in Crossfire mode. Lastly, the EyefinitySample application provides a more
+/// The AGSSample application is the simplest of the three examples and demonstrates the code required to initialize AGS and use it to query the GPU and Eyefinity state. 
+/// The CrossfireSample application demonstrates the use of the new API to transfer resources on GPUs in Crossfire mode. Lastly, the EyefinitySample application provides a more 
 /// extensive example of Eyefinity setup than the basic example provided in AGSSample.
 /// There are other samples on Github that demonstrate the DirectX shader extensions, such as the Barycentrics11 and Barycentrics12 samples.
 ///
@@ -80,17 +89,16 @@
 /// * Include the amd_ags.h header file from your source code.
 /// * Include the AGS hlsl files if you are using the shader intrinsics.
 /// * Declare a pointer to an AGSContext and make this available for all subsequent calls to AGS.
-/// * On game initialization, call agsInit() passing in the address of the context. On success, this function will return a valid context pointer.
-/// * The agsInit() function should be called before the D3D device is created if the Crossfire mode is specified.
+/// * On game initialization, call \ref agsInit passing in the address of the context. On success, this function will return a valid context pointer.
 ///
-/// Don't forget to cleanup AGS by calling agsDeInit() when the app exits, after the device has been destroyed.
+/// Don't forget to cleanup AGS by calling \ref agsDeInit when the app exits, after the device has been destroyed.
 
 #ifndef AMD_AGS_H
 #define AMD_AGS_H
 
 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
-#define AMD_AGS_VERSION_MINOR 1             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
+#define AMD_AGS_VERSION_MINOR 2             ///< AGS minor version
+#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
 
 #ifdef __cplusplus
 extern "C" {
@@ -138,42 +146,44 @@ typedef enum AGSReturnCode
 /// The DirectX11 extension support bits
 typedef enum AGSDriverExtensionDX11
 {
-    AGS_DX11_EXTENSION_QUADLIST                             = 1 << 0,
-    AGS_DX11_EXTENSION_SCREENRECTLIST                       = 1 << 1,
-    AGS_DX11_EXTENSION_UAV_OVERLAP                          = 1 << 2,
-    AGS_DX11_EXTENSION_DEPTH_BOUNDS_TEST                    = 1 << 3,
-    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT                    = 1 << 4,
-    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT_COUNTINDIRECT      = 1 << 5,
-    AGS_DX11_EXTENSION_CROSSFIRE_API                        = 1 << 6,
-    AGS_DX11_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 7,
-    AGS_DX11_EXTENSION_INTRINSIC_READLANE                   = 1 << 8,
-    AGS_DX11_EXTENSION_INTRINSIC_LANEID                     = 1 << 9,
-    AGS_DX11_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 10,
-    AGS_DX11_EXTENSION_INTRINSIC_BALLOT                     = 1 << 11,
-    AGS_DX11_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 12,
-    AGS_DX11_EXTENSION_INTRINSIC_COMPARE3                   = 1 << 13,
-    AGS_DX11_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 14,
+    AGS_DX11_EXTENSION_QUADLIST                             = 1 << 0,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_SCREENRECTLIST                       = 1 << 1,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_UAV_OVERLAP                          = 1 << 2,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_DEPTH_BOUNDS_TEST                    = 1 << 3,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT                    = 1 << 4,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_MULTIDRAWINDIRECT_COUNTINDIRECT      = 1 << 5,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_CROSSFIRE_API                        = 1 << 6,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 7,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_READLANE                   = 1 << 8,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_LANEID                     = 1 << 9,    ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 10,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_BALLOT                     = 1 << 11,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 12,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_MED3                       = 1 << 13,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 14,   ///< Supported in Radeon Software Version 16.9.2 onwards.
     AGS_DX11_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 15,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX11_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 16,   ///< Supported in Radeon Software Version 17.9.1 onwards.
-    AGS_DX11_EXTENSION_CREATE_SHADER_CONTROLS               = 1 << 17,
-    AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,
-    AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19    ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX11_EXTENSION_CREATE_SHADER_CONTROLS               = 1 << 17,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,   ///< Supported in Radeon Software Version 16.12.1 onwards.
+    AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19,   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX11_EXTENSION_BREADCRUMB_MARKERS                   = 1 << 20,   ///< Supported in Radeon Software Version 17.11.1 onwards.
 } AGSDriverExtensionDX11;
 
 /// The DirectX12 extension support bits
 typedef enum AGSDriverExtensionDX12
 {
-    AGS_DX12_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 0,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_READLANE                   = 1 << 1,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_LANEID                     = 1 << 2,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 3,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_BALLOT                     = 1 << 4,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 5,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_COMPARE3                   = 1 << 6,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 7,   ///< Supported in Radeon Software Version 16.9.2 (driver version 16.40.2311) onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_READFIRSTLANE              = 1 << 0,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_READLANE                   = 1 << 1,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_LANEID                     = 1 << 2,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_SWIZZLE                    = 1 << 3,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BALLOT                     = 1 << 4,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_MBCOUNT                    = 1 << 5,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_MED3                       = 1 << 6,   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BARYCENTRICS               = 1 << 7,   ///< Supported in Radeon Software Version 16.9.2 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 8,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 9,   ///< Supported in Radeon Software Version 17.9.1 onwards.
-    AGS_DX12_EXTENSION_USER_MARKERS                         = 1 << 10   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_USER_MARKERS                         = 1 << 10,  ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_APP_REGISTRATION                     = 1 << 11   ///< Supported in Radeon Software Version 17.9.1 onwards.
 } AGSDriverExtensionDX12;
 
 /// The space id for DirectX12 intrinsic support
@@ -183,37 +193,10 @@ const unsigned int AGS_DX12_SHADER_INSTRINSICS_SPACE_ID = 0x7FFF0ADE; // 2147420
 /// Additional topologies supported via extensions
 typedef enum AGSPrimitiveTopology
 {
-    AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,
-    AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9
+    AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,    ///< Quad list
+    AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9     ///< Screen rect list
 } AGSPrimitiveTopology;
 
-/// The different modes to control Crossfire behavior.
-typedef enum AGSCrossfireMode
-{
-    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                              ///< Use the default driver-based AFR rendering
-    AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                                ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
-    AGS_CROSSFIRE_MODE_DISABLE                                      ///< Completely disable AFR rendering
-} AGSCrossfireMode;
-
-
-/// The Crossfire API transfer types
-typedef enum AGSAfrTransferType
-{
-    AGS_AFR_TRANSFER_DEFAULT                                = 0,    ///< Default Crossfire driver resource tracking
-    AGS_AFR_TRANSFER_DISABLE                                = 1,    ///< Turn off driver resource tracking
-    AGS_AFR_TRANSFER_1STEP_P2P                              = 2,    ///< App controlled GPU to next GPU transfer
-    AGS_AFR_TRANSFER_2STEP_NO_BROADCAST                     = 3,    ///< App controlled GPU to next GPU transfer using intermediate system memory
-    AGS_AFR_TRANSFER_2STEP_WITH_BROADCAST                   = 4,    ///< App controlled GPU to all render GPUs transfer using intermediate system memory
-} AGSAfrTransferType;
-
-/// The Crossfire API transfer engines
-typedef enum AGSAfrTransferEngine
-{
-    AGS_AFR_TRANSFERENGINE_DEFAULT                          = 0,    ///< Use default engine for Crossfire API transfers
-    AGS_AFR_TRANSFERENGINE_3D_ENGINE                        = 1,    ///< Use 3D engine for Crossfire API transfers
-    AGS_AFR_TRANSFERENGINE_COPY_ENGINE                      = 2,    ///< Use Copy engine for Crossfire API transfers
-} AGSAfrTransferEngine;
-
 /// The display flags describing various properties of the display.
 typedef enum AGSDisplayFlags
 {
@@ -227,6 +210,13 @@ typedef enum AGSDisplayFlags
     AGS_DISPLAYFLAG_EYEFINITY_IN_PORTRAIT_MODE              = 1 << 7,   ///< The display is in the Eyefinity group but in portrait mode
 } AGSDisplayFlags;
 
+/// The display settings flags.
+typedef enum AGSDisplaySettingsFlags
+{
+    AGS_DISPLAYSETTINGSFLAG_DISABLE_LOCAL_DIMMING           = 1 << 0,   ///< Disables local dimming if possible
+} AGSDisplaySettingsFlags;
+
+
 typedef struct AGSContext AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
 
 /// The rectangle struct used by AGS.
@@ -302,7 +292,7 @@ typedef enum ArchitectureVersion
 } ArchitectureVersion;
 
 /// The device info struct used to describe a physical GPU enumerated by AGS
-typedef struct AGSDeviceInfo
+typedef struct AGSDeviceInfo_511
 {
     ArchitectureVersion             architectureVersion;            ///< Set to Unknown if not AMD hardware
     const char*                     adapterString;                  ///< The adapter name string
@@ -329,20 +319,71 @@ typedef struct AGSDeviceInfo
     int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
 
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+} AGSDeviceInfo_511;
+
+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo_520
+{
+    const char*                     adapterString;                  ///< The adapter name string
+    ArchitectureVersion             architectureVersion;            ///< Set to Unknown if not AMD hardware
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of compute units. Zero if not GCN onwards
+    int                             numROPs;                        ///< Number of ROPs
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    int                             memoryBandwidth;                ///< Memory bandwidth in MB/s
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN onwards. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    int                             isPrimaryDevice;                ///< Whether or not this is the primary adapter in the system. Not set on the WACK version.
+    long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+} AGSDeviceInfo_520;
+
+typedef union AGSDeviceInfo
+{
+    AGSDeviceInfo_511 agsDeviceInfo511;
+    AGSDeviceInfo_520 agsDeviceInfo520;
 } AGSDeviceInfo;
 
 /// \defgroup general General API functions
 /// API for initialization, cleanup, HDR display modes and Crossfire GPU count
 /// @{
 
-typedef void* (__stdcall *AGS_ALLOC_CALLBACK)( int allocationSize );    ///< AGS user defined allocation prototype
-typedef void (__stdcall *AGS_FREE_CALLBACK)( void* allocationPtr );     ///< AGS user defined free prototype
+typedef void* (__stdcall *AGS_ALLOC_CALLBACK_511)( int allocationSize );    ///< AGS user defined allocation prototype
+typedef void* (__stdcall *AGS_ALLOC_CALLBACK)( size_t allocationSize );     ///< AGS user defined allocation prototype
+typedef void (__stdcall *AGS_FREE_CALLBACK)( void* allocationPtr );         ///< AGS user defined free prototype
 
 /// The configuration options that can be passed in to \ref agsInit
-typedef struct AGSConfiguration
+typedef struct AGSConfiguration_511
+{
+    AGS_ALLOC_CALLBACK_511  allocCallback;                  ///< Optional memory allocation callback. If not supplied, malloc() is used
+    AGS_FREE_CALLBACK       freeCallback;                   ///< Optional memory freeing callback. If not supplied, free() is used
+} AGSConfiguration_511;
+
+typedef struct AGSConfiguration_520
 {
     AGS_ALLOC_CALLBACK      allocCallback;                  ///< Optional memory allocation callback. If not supplied, malloc() is used
     AGS_FREE_CALLBACK       freeCallback;                   ///< Optional memory freeing callback. If not supplied, free() is used
+} AGSConfiguration_520;
+
+typedef union AGSConfiguration
+{
+    AGSConfiguration_511    agsConfiguration511;
+    AGSConfiguration_520    agsConfiguration520;
 } AGSConfiguration;
 
 /// The top level GPU information returned from \ref agsInit
@@ -369,7 +410,7 @@ typedef struct AGSDisplaySettings
         Mode_SDR,                                           ///< SDR mode
         Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
         Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
-        Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. Values in the range of 0.0 to 125.0 where 125.0 == AGSDisplayInfo::maxLuminance.
+        Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. 1.0 == 80 nits. Tonemap your scene to the range of 0.0 to AGSDisplayInfo::maxLuminance.
         Mode_DolbyVision                                    ///< Dolby Vision, requiring an 8888 UNORM swapchain
     }                       mode;                           ///< The display mode to set the display into
 
@@ -390,13 +431,16 @@ typedef struct AGSDisplaySettings
 
     double                  maxContentLightLevel;           ///< The maximum content light level in nits (MaxCLL)
     double                  maxFrameAverageLightLevel;      ///< The maximum frame average light level in nits (MaxFALL)
+
+    // ADDED IN 5.2.0
+    int                     flags;                          ///< Bitfield of ::AGSDisplaySettingsFlags
 } AGSDisplaySettings;
 
 ///
 /// Function used to initialize the AGS library.
 /// Must be called prior to any of the subsequent AGS API calls.
 /// Must be called prior to ID3D11Device or ID3D12Device creation.
-/// \note This function will fail with AGS_ERROR_LEGACY_DRIVER in Catalyst versions before 12.20.
+/// \note This function will fail with \ref AGS_ERROR_LEGACY_DRIVER in Catalyst versions before 12.20.
 /// \note It is good practice to check the AGS version returned from AGSGPUInfo against the version defined in the header in case a mismatch between the dll and header has occurred.
 ///
 /// \param [in, out] context                        Address of a pointer to a context. This function allocates a context on the heap which is then required for all subsequent API calls.
@@ -419,6 +463,7 @@ AMD_AGS_API AGSReturnCode agsDeInit( AGSContext* context );
 /// \param [in] context                             Pointer to a context.
 /// \param [out] numGPUs                            Number of GPUs used for Crossfire acceleration
 ///
+/// REMOVED IN 5.2.0
 AMD_AGS_API AGSReturnCode agsGetCrossfireGPUCount( AGSContext* context, int* numGPUs );
 
 ///
@@ -427,7 +472,6 @@ AMD_AGS_API AGSReturnCode agsGetCrossfireGPUCount( AGSContext* context, int* num
 /// \note Call this function after each mode change (switch to fullscreen, any change in swapchain etc).
 /// \note HDR10 PQ mode requires a 1010102 swapchain.
 /// \note HDR10 scRGB mode requires an FP16 swapchain.
-/// \note Freesync2 Gamma mode requires a 1010102 swapchain.
 /// \note Freesync2 scRGB mode requires an FP16 swapchain.
 /// \note Dolby Vision requires a 8888 UNORM swapchain.
 ///
@@ -444,9 +488,65 @@ AMD_AGS_API AGSReturnCode agsSetDisplayMode( AGSContext* context, int deviceInde
 /// DirectX12 driver extensions
 /// @{
 
-/// \defgroup dx12init Initialization and Cleanup
+/// \defgroup dx12init Device creation and cleanup
+/// It is now mandatory to call \ref agsDriverExtensionsDX12_CreateDevice when creating a device if the user wants to access any future DX12 AMD extensions.
+/// The corresponding \ref agsDriverExtensionsDX12_DestroyDevice call must be called to release the device and free up the internal resources allocated by the create call.
 /// @{
 
+/// The struct to specify the DX12 device creation parameters
+typedef struct AGSDX12DeviceCreationParams
+{
+    IDXGIAdapter*               pAdapter;                   ///< Pointer to the adapter to use when creating the device.  This may be null.
+    IID                         iid;                        ///< The interface ID for the type of device to be created.
+    D3D_FEATURE_LEVEL           FeatureLevel;               ///< The minimum feature level to create the device with.
+} AGSDX12DeviceCreationParams;
+
+#define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX12ExtensionParams and \ref AGSDX11ExtensionParams
+#define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
+
+/// The struct to specify DX12 additional device creation parameters
+typedef struct AGSDX12ExtensionParams
+{
+    const WCHAR*    pAppName;               ///< Application name
+    const WCHAR*    pEngineName;            ///< Engine name
+    unsigned int    appVersion;             ///< Application version
+    unsigned int    engineVersion;          ///< Engine version
+} AGSDX12ExtensionParams;
+
+/// The struct to hold all the returned parameters from the device creation call
+typedef struct AGSDX12ReturnedParams
+{
+    ID3D12Device*           pDevice;                ///< The newly created device
+    unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX12_CreateDevice will fill in to indicate which extensions are supported. See \ref AGSDriverExtensionDX12
+} AGSDX12ReturnedParams;
+
+
+///
+/// Function used to create a D3D12 device with additional AMD-specific initialization parameters.
+///
+/// When using the HLSL shader extensions please note:
+/// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION (/Od) option, otherwise it will not work.
+/// * The shader compiler needs D3DCOMPILE_ENABLE_STRICTNESS (/Ges) enabled.
+/// * The intrinsic instructions require a 5.1 shader model.
+/// * The Root Signature will need to use an extra resource and sampler. These are not real resources/samplers, they are just used to encode the intrinsic instruction.
+///
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] creationParams                      Pointer to the struct to specify the existing DX12 device creation parameters.
+/// \param [in] extensionParams                     Optional pointer to the struct to specify DX12 additional device creation parameters.
+/// \param [out] returnedParams                     Pointer to struct to hold all the returned parameters from the call.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_CreateDevice( AGSContext* context, const AGSDX12DeviceCreationParams* creationParams, const AGSDX12ExtensionParams* extensionParams, AGSDX12ReturnedParams* returnedParams );
+
+///
+/// Function to destroy the D3D12 device.
+/// This call will also cleanup any AMD-specific driver extensions for D3D12.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] device                              Pointer to the D3D12 device.
+/// \param [out] deviceReferences                   Optional pointer to an unsigned int that will be set to the value returned from device->Release().
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DestroyDevice( AGSContext* context, ID3D12Device* device, unsigned int* deviceReferences );
+
 ///
 /// Function used to initialize the AMD-specific driver extensions for D3D12.
 /// Extensions require support in the driver, therefore it is important to check the extensionsSupported bitfield.
@@ -460,6 +560,7 @@ AMD_AGS_API AGSReturnCode agsSetDisplayMode( AGSContext* context, int deviceInde
 /// \param [in] device                              The D3D12 device.
 /// \param [out] extensionsSupported                Pointer to a bit mask that this function will fill in to indicate which extensions are supported. See ::AGSDriverExtensionDX12
 ///
+/// REMOVED IN 5.2.0
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_Init( AGSContext* context, ID3D12Device* device, unsigned int* extensionsSupported );
 
 ///
@@ -467,6 +568,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_Init( AGSContext* context, ID3
 ///
 /// \param [in] context                             Pointer to a context.
 ///
+/// REMOVED IN 5.2.0
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DeInit( AGSContext* context );
 
 /// @}
@@ -476,7 +578,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DeInit( AGSContext* context );
 
 ///
 /// Function used to push an AMD user marker onto the command list.
-/// This is only has an effect if AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of agsDriverExtensionsDX12_Init()
+/// This is only has an effect if AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of \ref agsDriverExtensionsDX12_CreateDevice
 /// Supported in Radeon Software Version 17.9.1 onwards.
 ///
 /// \param [in] context                             Pointer to a context.
@@ -513,10 +615,18 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_SetMarker( AGSContext* context
 /// @{
 
 /// \defgroup dx11init Device creation and cleanup
-/// It is now mandatory to call agsDriverExtensionsDX11_CreateDevice() when creating a device if the user wants to access any DX11 AMD extensions.
-/// The corresponding agsDriverExtensionsDX11_DestroyDevice() call must be called to release the device and free up the internal resources allocated by the create call.
+/// It is now mandatory to call \ref agsDriverExtensionsDX11_CreateDevice when creating a device if the user wants to access any DX11 AMD extensions.
+/// The corresponding \ref agsDriverExtensionsDX11_DestroyDevice call must be called to release the device and free up the internal resources allocated by the create call.
 /// @{
 
+/// The different modes to control Crossfire behavior.
+typedef enum AGSCrossfireMode
+{
+    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                      ///< Use the default driver-based AFR rendering
+    AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                        ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
+    AGS_CROSSFIRE_MODE_DISABLE                              ///< Completely disable AFR rendering
+} AGSCrossfireMode;
+
 /// The struct to specify the existing DX11 device creation parameters
 typedef struct AGSDX11DeviceCreationParams
 {
@@ -530,11 +640,8 @@ typedef struct AGSDX11DeviceCreationParams
     const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc;             ///< Optional swapchain description. Specify this to invoke D3D11CreateDeviceAndSwapChain instead of D3D11CreateDevice. This must be null on the WACK compliant version
 } AGSDX11DeviceCreationParams;
 
-#define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX11ExtensionParams
-#define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
-
 /// The struct to specify DX11 additional device creation parameters
-typedef struct AGSDX11ExtensionParams
+typedef struct AGSDX11ExtensionParams_511
 {
     unsigned int    uavSlot;           ///< The UAV slot reserved for intrinsic support. This must match the slot defined in the HLSL, i.e. #define AmdDxExtShaderIntrinsicsUAVSlot.
                                        /// The default slot is 7, but the caller is free to use an alternative slot.
@@ -542,30 +649,80 @@ typedef struct AGSDX11ExtensionParams
     UINT            appVersion;        ///< Application version
     const WCHAR*    pEngineName;       ///< Engine name
     UINT            engineVersion;     ///< Engine version
+} AGSDX11ExtensionParams_511;
+
+typedef struct AGSDX11ExtensionParams_520
+{
+    const WCHAR*                pAppName;                   ///< Application name
+    const WCHAR*                pEngineName;                ///< Engine name
+    unsigned int                appVersion;                 ///< Application version
+    unsigned int                engineVersion;              ///< Engine version
+    unsigned int                numBreadcrumbMarkers;       ///< The number of breadcrumb markers to allocate. Each marker is a uint64 (ie 8 bytes). If 0, the system is disabled.
+    unsigned int                uavSlot;                    ///< The UAV slot reserved for intrinsic support. This must match the slot defined in the HLSL, i.e. "#define AmdDxExtShaderIntrinsicsUAVSlot".
+                                                            /// The default slot is 7, but the caller is free to use an alternative slot.
+                                                            /// If 0 is specified, then the default of 7 will be used.
+    AGSCrossfireMode            crossfireMode;              ///< Desired Crossfire mode
+} AGSDX11ExtensionParams_520;
+
+typedef union AGSDX11ExtensionParams
+{
+    AGSDX11ExtensionParams_511   agsDX11ExtensionParams511;
+    AGSDX11ExtensionParams_520   agsDX11ExtensionParams520;
 } AGSDX11ExtensionParams;
 
 /// The struct to hold all the returned parameters from the device creation call
-typedef struct AGSDX11ReturnedParams
+typedef struct AGSDX11ReturnedParams_511
 {
     ID3D11Device*           pDevice;                ///< The newly created device
     D3D_FEATURE_LEVEL       FeatureLevel;           ///< The feature level supported by the newly created device
     ID3D11DeviceContext*    pImmediateContext;      ///< The newly created immediate device context
     IDXGISwapChain*         pSwapChain;             ///< The newly created swap chain. This is only created if a valid pSwapChainDesc is supplied in AGSDX11DeviceCreationParams. This is not supported on the WACK compliant version
     unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX11_CreateDevice will fill in to indicate which extensions are supported. See AGSDriverExtensionDX11
+} AGSDX11ReturnedParams_511;
+
+typedef struct AGSDX11ReturnedParams_520
+{
+    ID3D11Device*           pDevice;                ///< The newly created device
+    ID3D11DeviceContext*    pImmediateContext;      ///< The newly created immediate device context
+    IDXGISwapChain*         pSwapChain;             ///< The newly created swap chain. This is only created if a valid pSwapChainDesc is supplied in AGSDX11DeviceCreationParams. This is not supported on the WACK compliant version
+    D3D_FEATURE_LEVEL       FeatureLevel;           ///< The feature level supported by the newly created device
+    unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX11_CreateDevice will fill in to indicate which extensions are supported. See \ref AGSDriverExtensionDX11
+    unsigned int            crossfireGPUCount;      ///< The number of GPUs that are active for this app
+    void*                   breadcrumbBuffer;       ///< The CPU buffer returned if the initialization of the breadcrumb was successful.
+} AGSDX11ReturnedParams_520;
+
+typedef union AGSDX11ReturnedParams
+{
+    AGSDX11ReturnedParams_511   agsDX11ReturnedParams511;
+    AGSDX11ReturnedParams_520   agsDX11ReturnedParams520;
 } AGSDX11ReturnedParams;
 
 ///
 /// Function used to create a D3D11 device with additional AMD-specific initialization parameters.
 ///
 /// When using the HLSL shader extensions please note:
-/// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION option, otherwise it will not work.
+/// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION (/Od) option, otherwise it will not work.
+/// * The shader compiler needs D3DCOMPILE_ENABLE_STRICTNESS (/Ges) enabled.
 ///
 /// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
 /// \param [in] creationParams                      Pointer to the struct to specify the existing DX11 device creation parameters.
 /// \param [in] extensionParams                     Optional pointer to the struct to specify DX11 additional device creation parameters.
 /// \param [out] returnedParams                     Pointer to struct to hold all the returned parameters from the call.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateDevice( AGSContext* context, AGSDX11DeviceCreationParams* creationParams, AGSDX11ExtensionParams* extensionParams, AGSDX11ReturnedParams* returnedParams );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateDevice( AGSContext* context, const AGSDX11DeviceCreationParams* creationParams, const AGSDX11ExtensionParams* extensionParams, AGSDX11ReturnedParams* returnedParams );
+
+///
+/// Function to destroy the D3D11 device and its immediate context.
+/// This call will also cleanup any AMD-specific driver extensions for D3D11.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] device                              Pointer to the D3D11 device.
+/// \param [out] deviceReferences                   Optional pointer to an unsigned int that will be set to the value returned from device->Release().
+/// \param [in] immediateContext                    Pointer to the D3D11 immediate device context.
+/// \param [out] immediateContextReferences         Optional pointer to an unsigned int that will be set to the value returned from immediateContext->Release().
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice_520( AGSContext* context, ID3D11Device* device, unsigned int* deviceReferences, ID3D11DeviceContext* immediateContext, unsigned int* immediateContextReferences );
+
 
 ///
 /// Function to destroy the D3D11 device.
@@ -575,7 +732,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_CreateDevice( AGSContext* cont
 /// \param [in] device                              Pointer to the D3D11 device.
 /// \param [out] references                         Optional pointer to an unsigned int that will be set to the value returned from device->Release().
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice( AGSContext* context, ID3D11Device* device, unsigned int* references );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice_511( AGSContext* context, ID3D11Device* device, unsigned int* references );
 
 /// @}
 
@@ -610,6 +767,211 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice( AGSContext* con
 ///
 /// @}
 
+/// \defgroup breadcrumbs Breadcrumb API
+/// API for writing top-of-pipe and bottom-of-pipe markers to help track down GPU hangs.
+///
+/// The API is available if the \ref AGS_DX11_EXTENSION_BREADCRUMB_MARKERS is present in \ref AGSDX11ReturnedParams::extensionsSupported.
+///
+/// To use the API, a non zero value needs to be specificed in \ref AGSDX11ExtensionParams::numBreadcrumbMarkers.  This enables the API (if available) and allocates a system memory buffer
+/// which is returned to the user in \ref AGSDX11ReturnedParams::breadcrumbBuffer.
+///
+/// The user can now write markers before and after draw calls using \ref agsDriverExtensionsDX11_WriteBreadcrumb.
+///
+/// \section background Background
+///
+/// A top-of-pipe (TOP) command is scheduled for execution as soon as the command processor (CP) reaches the command.
+/// A bottom-of-pipe (BOP) command is scheduled for execution once the previous rendering commands (draw and dispatch) finish execution.
+/// TOP and BOP commands do not block CP. i.e. the CP schedules the command for execution then proceeds to the next command without waiting.
+/// To effectively use TOP and BOP commands, it is important to understand how they interact with rendering commands:
+///
+/// When the CP encounters a rendering command it queues it for execution and moves to the next command.  The queued rendering commands are issued in order.
+/// There can be multiple rendering commands running in parallel.  When a rendering command is issued we say it is at the top of the pipe.  When a rendering command
+/// finishes execution we say it has reached the bottom of the pipe.
+///
+/// A BOP command remains in a waiting queue and is executed once prior rendering commands finish.  The queue of BOP commands is limited to 64 entries in GCN generation 1, 2, 3, 4 and 5.
+/// If the 64 limit is reached the CP will stop queueing BOP commands and also rendering commands.  Developers should limit the number of BOP commands that write markers to avoid contention.
+/// In general, developers should limit both TOP and BOP commands to avoid stalling the CP.
+///
+/// \subsection eg1 Example 1:
+///
+/// \code{.cpp}
+/// // Start of a command buffer
+/// WriteMarker(TopOfPipe, 1)
+/// WriteMarker(BottomOfPipe, 2)
+/// WriteMarker(BottomOfPipe, 3)
+/// DrawX
+/// WriteMarker(BottomOfPipe, 4)
+/// WriteMarker(BottomOfPipe, 5)
+/// WriteMarker(TopOfPipe, 6)
+/// // End of command buffer
+/// \endcode
+///
+/// In the above example, the CP writes markers 1, 2 and 3 without waiting:
+/// Marker 1 is TOP so it's independent from other commands
+/// There's no wait for marker 2 and 3 because there are no draws preceding the BOP commands
+/// Marker 4 is only written once DrawX finishes execution
+/// Marker 5 doesn't wait for additional draws so it is written right after marker 4
+/// Marker 6 can be written as soon as the CP reaches the command. For instance, it is very possible that CP writes marker 6 while DrawX 
+/// is running and therefore marker 6 gets written before markers 4 and 5
+///
+/// \subsection eg2 Example 2:
+///
+/// \code{.cpp}
+/// WriteMarker(TopOfPipe, 1)
+/// DrawX
+/// WriteMarker(BottomOfPipe, 2)
+/// WriteMarker(TopOfPipe, 3)
+/// DrawY
+/// WriteMarker(BottomOfPipe, 4)
+/// \endcode
+///
+/// In this example marker 1 is written before the start of DrawX
+/// Marker 2 is written once DrawX finishes execution
+/// Similarly marker 3 is written before the start of DrawY
+/// Marker 4 is written once DrawY finishes execution
+/// In case of a GPU hang, if markers 1 and 3 are written but markers 2 and 4 are missing we can conclude that:
+/// The CP has reached both DrawX and DrawY commands since marker 1 and 3 are present
+/// The fact that marker 2 and 4 are missing means that either DrawX is hanging while DrawY is at the top of the pipe or both DrawX and DrawY
+/// started and both are simultaneously hanging
+///
+/// \subsection eg3 Example 3:
+///
+/// \code{.cpp}
+/// // Start of a command buffer
+/// WriteMarker(BottomOfPipe, 1)
+/// DrawX
+/// WriteMarker(BottomOfPipe, 2)
+/// DrawY
+/// WriteMarker(BottomOfPipe, 3)
+/// DrawZ
+/// WriteMarker(BottomOfPipe, 4)
+/// // End of command buffer
+/// \endcode
+///
+/// In this example marker 1 is written before the start of DrawX
+/// Marker 2 is written once DrawX finishes
+/// Marker 3 is written once DrawY finishes
+/// Marker 4 is written once DrawZ finishes 
+/// If the GPU hangs and only marker 1 is written we can conclude that the hang is happening in either DrawX, DrawY or DrawZ
+/// If the GPU hangs and only marker 1 and 2 are written we can conclude that the hang is happening in DrawY or DrawZ
+/// If the GPU hangs and only marker 4 is missing we can conclude that the hang is happening in DrawZ
+///
+/// \subsection eg4 Example 4:
+///
+/// \code{.cpp}
+/// Start of a command buffer
+/// WriteMarker(TopOfPipe, 1)
+/// DrawX
+/// WriteMarker(TopOfPipe, 2)
+/// DrawY
+/// WriteMarker(TopOfPipe, 3)
+/// DrawZ
+/// // End of command buffer
+/// \endcode
+///
+/// In this example, in case the GPU hangs and only marker 1 is written we can conclude that the hang is happening in DrawX
+/// In case the GPU hangs and only marker 1 and 2 are written we can conclude that the hang is happening in DrawX or DrawY
+/// In case the GPU hangs and all 3 markers are written we can conclude that the hang is happening in any of DrawX, DrawY or DrawZ
+///
+/// \subsection eg5 Example 5:
+///
+/// \code{.cpp}
+/// DrawX
+/// WriteMarker(TopOfPipe, 1)
+/// WriteMarker(BottomOfPipe, 2)
+/// DrawY
+/// WriteMarker(TopOfPipe, 3)
+/// WriteMarker(BottomOfPipe, 4)
+/// \endcode
+///
+/// Marker 1 is written right after DrawX is queued for execution.
+/// Marker 2 is only written once DrawX finishes execution.
+/// Marker 3 is written right after DrawY is queued for execution.
+/// Marker 4 is only written once DrawY finishes execution
+/// If marker 1 is written we would know that the CP has reached the command DrawX (DrawX at the top of the pipe).
+/// If marker 2 is written we can say that DrawX has finished execution (DrawX at the bottom of the pipe). 
+/// In case the GPU hangs and only marker 1 and 3 are written we can conclude that the hang is happening in DrawX or DrawY
+/// In case the GPU hangs and only marker 1 is written we can conclude that the hang is happening in DrawX
+/// In case the GPU hangs and only marker 4 is missing we can conclude that the hang is happening in DrawY
+///
+/// \section data Retrieving GPU Data
+///
+/// In the event of a GPU hang, the user can inspect the system memory buffer to determine which draw has caused the hang.
+/// For example:
+/// \code{.cpp}
+///     // Force the work to be flushed to prevent CPU ahead of GPU
+///     g_pImmediateContext->Flush();
+///     
+///     // Present the information rendered to the back buffer to the front buffer (the screen)
+///     HRESULT hr = g_pSwapChain->Present( 0, 0 );
+///     
+///     // Read the marker data buffer once detect device lost
+///     if ( hr != S_OK )
+///     {
+///         for (UINT i = 0; i < g_NumMarkerWritten; i++)
+///         {
+///             UINT64* pTempData;
+///             pTempData = static_cast<UINT64*>(pMarkerBuffer);
+/// 
+///             // Write the marker data to file
+///             ofs << i << "\r\n";
+///             ofs << std::hex << *(pTempData + i * 2) << "\r\n";
+///             ofs << std::hex << *(pTempData + (i * 2 + 1)) << "\r\n";
+/// 
+///             WCHAR s1[256];
+///             setlocale(LC_NUMERIC, "en_US.iso88591");
+/// 
+///             // Output the marker data to console
+///             swprintf(s1, 256, L" The Draw count is %d; The Top maker is % 016llX and the Bottom marker is % 016llX \r\n", i, *(pTempData + i * 2), *(pTempData + (i * 2 + 1)));
+/// 
+///             OutputDebugStringW(s1);
+///         }
+///     }
+/// \endcode
+///
+/// The console output would resemble something like:
+/// \code{.cpp}
+/// D3D11: Removing Device. 
+/// D3D11 ERROR: ID3D11Device::RemoveDevice: Device removal has been triggered for the following reason (DXGI_ERROR_DEVICE_HUNG: The Device took an unreasonable amount of time to execute its commands, or the hardware crashed/hung. As a result, the TDR (Timeout Detection and Recovery) mechanism has been triggered. The current Device Context was executing commands when the hang occurred. The application may want to respawn and fallback to less aggressive use of the display hardware). [ EXECUTION ERROR #378: DEVICE_REMOVAL_PROCESS_AT_FAULT]
+///  The Draw count is 0; The Top maker is 00000000DEADCAFE and the Bottom marker is 00000000DEADBEEF 
+///  The Draw count is 1; The Top maker is 00000000DEADCAFE and the Bottom marker is 00000000DEADBEEF 
+///  The Draw count is 2; The Top maker is 00000000DEADCAFE and the Bottom marker is 00000000DEADBEEF 
+///  The Draw count is 3; The Top maker is 00000000DEADCAFE and the Bottom marker is 00000000DEADBEEF 
+///  The Draw count is 4; The Top maker is 00000000DEADCAFE and the Bottom marker is 00000000DEADBEEF 
+///  The Draw count is 5; The Top maker is CDCDCDCDCDCDCDCD and the Bottom marker is CDCDCDCDCDCDCDCD 
+///  The Draw count is 6; The Top maker is CDCDCDCDCDCDCDCD and the Bottom marker is CDCDCDCDCDCDCDCD 
+///  The Draw count is 7; The Top maker is CDCDCDCDCDCDCDCD and the Bottom marker is CDCDCDCDCDCDCDCD 
+/// \endcode
+/// 
+/// @{
+
+/// The breadcrumb marker struct used by \ref agsDriverExtensionsDX11_WriteBreadcrumb
+typedef struct AGSBreadcrumbMarker
+{
+    unsigned long long  markerData; ///< The user data to write.
+    enum
+    {
+        TopOfPipe       = 0,    ///< Top-of-pipe marker
+        BottomOfPipe    = 1     ///< Bottom-of-pipe marker
+    }                   type;       ///< Whether this marker is top or bottom of pipe.
+    unsigned int        index;      ///< The index of the marker. This should be less than the value specified in \ref AGSDX11ExtensionParams::numBreadcrumbMarkers
+} AGSBreadcrumbMarker;
+
+///
+/// Function to write a breadcrumb marker.
+///
+/// This method inserts a write marker operation in the GPU command stream. In the case where the GPU is hanging the write
+/// command will never be reached and the marker will never get written to memory.
+///
+/// In order to use this function, \ref AGSDX11ExtensionParams::numBreadcrumbMarkers must be set to a non zero value.
+///
+/// \param [in] context                             Pointer to a context.
+/// \param [in] marker                              Pointer to a marker.
+///
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_WriteBreadcrumb( AGSContext* context, const AGSBreadcrumbMarker* marker );
+
+/// @}
+
 /// \defgroup dx11misc Misc Extensions
 /// API for depth bounds test, UAV overlap and prim topologies
 /// @{
@@ -618,34 +980,37 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice( AGSContext* con
 /// Function used to set the primitive topology. If you are using any of the extended topology types, then this function should
 /// be called to set ALL topology types.
 ///
-/// The Quad List extension is a convenient way to submit quads without using an index buffer. Note that this still submits two triangles at the driver level.
+/// The Quad List extension is a convenient way to submit quads without using an index buffer. Note that this still submits two triangles at the driver level. 
 /// In order to use this function, AGS must already be initialized and agsDriverExtensionsDX11_Init must have been called successfully.
 ///
-/// The Screen Rect extension, which is only available on GCN hardware, allows the user to pass in three of the four corners of a rectangle.
-/// The hardware then uses the bounding box of the vertices to rasterize the rectangle primitive (i.e. as a rectangle rather than two triangles).
+/// The Screen Rect extension, which is only available on GCN hardware, allows the user to pass in three of the four corners of a rectangle. 
+/// The hardware then uses the bounding box of the vertices to rasterize the rectangle primitive (i.e. as a rectangle rather than two triangles). 
 /// \note Note that this will not return valid interpolated values, only valid SV_Position values.
 /// \note If either the Quad List or Screen Rect extension are used, then agsDriverExtensionsDX11_IASetPrimitiveTopology should be called in place of the native DirectX11 equivalent all the time.
 ///
 /// \param [in] context                             Pointer to a context.
-/// \param [in] topology                            The topology to set on the D3D11 device. This can be either an AGS-defined topology such as AGS_PRIMITIVE_TOPOLOGY_QUAD_LIST
+/// \param [in] topology                            The topology to set on the D3D11 device. This can be either an AGS-defined topology such as AGS_PRIMITIVE_TOPOLOGY_QUADLIST
 ///                                                 or a standard D3D-defined topology such as D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP.
 ///                                                 NB. the AGS-defined types will require casting to a D3D_PRIMITIVE_TOPOLOGY type.
 ///
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_IASetPrimitiveTopology( AGSContext* context, enum D3D_PRIMITIVE_TOPOLOGY topology );
 
 ///
-/// Function used indicate to the driver it can overlap the subsequent batch of back-to-back dispatches.
+/// Function used indicate to the driver that it doesn't need to sync the UAVs bound for the subsequent set of back-to-back dispatches.
 /// When calling back-to-back draw calls or dispatch calls that write to the same UAV, the AMD DX11 driver will automatically insert a barrier to ensure there are no write after write (WAW) hazards.
 /// If the app can guarantee there is no overlap between the writes between these calls, then this extension will remove those barriers allowing the work to run in parallel on the GPU.
 ///
 /// Usage would be as follows:
 /// \code{.cpp}
+///     m_device->Dispatch( ... );  // First call that writes to the UAV
+///
 ///     // Disable automatic WAW syncs
 ///     agsDriverExtensionsDX11_BeginUAVOverlap( m_agsContext );
 ///
-///     // Submit back-to-back dispatches that write to the same UAV
-///     m_device->Dispatch( ... );  // First half of UAV
-///     m_device->Dispatch( ... );  // Second half of UAV
+///     // Submit other dispatches that write to the same UAV concurrently
+///     m_device->Dispatch( ... );
+///     m_device->Dispatch( ... );
+///     m_device->Dispatch( ... );
 ///
 ///     // Reenable automatic WAW syncs
 ///     agsDriverExtensionsDX11_EndUAVOverlap( m_agsContext );
@@ -713,6 +1078,8 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* co
 ///     };
 /// \endcode
 ///
+/// Example usage can be seen in AMD's GeometryFX (https://github.com/GPUOpen-Effects/GeometryFX).  In particular, in this file: https://github.com/GPUOpen-Effects/GeometryFX/blob/master/amd_geometryfx/src/AMD_GeometryFX_Filtering.cpp
+///
 /// @{
 
 ///
@@ -846,6 +1213,24 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetClipRects( AGSContext* cont
 /// API for explicit control over Crossfire
 /// @{
 
+/// The Crossfire API transfer types
+typedef enum AGSAfrTransferType
+{
+    AGS_AFR_TRANSFER_DEFAULT                                = 0,    ///< Default Crossfire driver resource tracking
+    AGS_AFR_TRANSFER_DISABLE                                = 1,    ///< Turn off driver resource tracking
+    AGS_AFR_TRANSFER_1STEP_P2P                              = 2,    ///< App controlled GPU to next GPU transfer
+    AGS_AFR_TRANSFER_2STEP_NO_BROADCAST                     = 3,    ///< App controlled GPU to next GPU transfer using intermediate system memory
+    AGS_AFR_TRANSFER_2STEP_WITH_BROADCAST                   = 4,    ///< App controlled GPU to all render GPUs transfer using intermediate system memory
+} AGSAfrTransferType;
+
+/// The Crossfire API transfer engines
+typedef enum AGSAfrTransferEngine
+{
+    AGS_AFR_TRANSFERENGINE_DEFAULT                          = 0,    ///< Use default engine for Crossfire API transfers
+    AGS_AFR_TRANSFERENGINE_3D_ENGINE                        = 1,    ///< Use 3D engine for Crossfire API transfers
+    AGS_AFR_TRANSFERENGINE_COPY_ENGINE                      = 2,    ///< Use Copy engine for Crossfire API transfers
+} AGSAfrTransferEngine;
+
 ///
 /// Function to create a Direct3D11 resource with the specified AFR transfer type and specified transfer engine.
 ///
@@ -916,9 +1301,9 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceEndWrites( AGSCo
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceBeginAllAccess( AGSContext* context, ID3D11Resource* resource );
 
 ///
-///   This is used for AGS_AFR_TRANSFER_1STEP_P2P to notify when it is safe to initiate a transfer.
-///   This call in frame N-(NumGpus-1) allows a 1 step P2P in frame N to start.
-///   This should be called after agsDriverExtensionsDX11_NotifyResourceEndWrites.
+/// This is used for AGS_AFR_TRANSFER_1STEP_P2P to notify when it is safe to initiate a transfer.
+/// This call in frame N-(NumGpus-1) allows a 1 step P2P in frame N to start.
+/// This should be called after agsDriverExtensionsDX11_NotifyResourceEndWrites.
 ///
 /// \param [in] context                             Pointer to a context.
 /// \param [in] resource                            Pointer to the resource.
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index c6554a17b6f..5ba3d680f43 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -15,8 +15,29 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(amd_ags);
 
+enum amd_ags_version
+{
+    AMD_AGS_VERSION_5_1_1,
+    AMD_AGS_VERSION_5_2_0,
+
+    AMD_AGS_VERSION_COUNT
+};
+
+struct
+{
+    int major;
+    int minor;
+    int patch;
+}
+static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
+{
+    {5, 1, 1},
+    {5, 2, 0},
+};
+
 struct AGSContext
 {
+    enum amd_ags_version version;
     unsigned int device_count;
     AGSDeviceInfo *devices;
     VkPhysicalDeviceProperties *properties;
@@ -88,6 +109,8 @@ static AGSReturnCode init_ags_context(AGSContext *context)
     AGSReturnCode ret;
     unsigned int i;
 
+    // TODO: version check
+    context->version = AMD_AGS_VERSION_5_1_1;
     context->device_count = 0;
     context->devices = NULL;
     context->properties = NULL;
@@ -108,15 +131,32 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         const VkPhysicalDeviceProperties *vk_properties = &context->properties[i];
         AGSDeviceInfo *device = &context->devices[i];
 
-        device->adapterString = vk_properties->deviceName;
-        device->vendorId = vk_properties->vendorID;
-        device->deviceId = vk_properties->deviceID;
+        switch (context->version)
+        {
+        case AMD_AGS_VERSION_5_1_1:
+            device->agsDeviceInfo511.adapterString = vk_properties->deviceName;
+            device->agsDeviceInfo511.vendorId = vk_properties->vendorID;
+            device->agsDeviceInfo511.deviceId = vk_properties->deviceID;
+
+            if (device->agsDeviceInfo511.vendorId == 0x1002)
+                device->agsDeviceInfo511.architectureVersion = ArchitectureVersion_GCN;
 
-        if (device->vendorId == 0x1002)
-            device->architectureVersion = ArchitectureVersion_GCN;
+            if (!i)
+                device->agsDeviceInfo511.isPrimaryDevice = 1;
+            break;
+        case AMD_AGS_VERSION_5_2_0:
+        default:
+            device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
+            device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
+            device->agsDeviceInfo520.deviceId = vk_properties->deviceID;
+
+            if (device->agsDeviceInfo520.vendorId == 0x1002)
+                device->agsDeviceInfo520.architectureVersion = ArchitectureVersion_GCN;
 
-        if (!i)
-            device->isPrimaryDevice = 1;
+            if (!i)
+                device->agsDeviceInfo520.isPrimaryDevice = 1;
+            break;
+        }
     }
 
     return AGS_SUCCESS;
@@ -145,9 +185,9 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     }
 
     memset(gpu_info, 0, sizeof(*gpu_info));
-    gpu_info->agsVersionMajor = AMD_AGS_VERSION_MAJOR;
-    gpu_info->agsVersionMinor = AMD_AGS_VERSION_MINOR;
-    gpu_info->agsVersionPatch = AMD_AGS_VERSION_PATCH;
+    gpu_info->agsVersionMajor = amd_ags_versions[object->version].major;
+    gpu_info->agsVersionMinor = amd_ags_versions[object->version].minor;
+    gpu_info->agsVersionPatch = amd_ags_versions[object->version].patch;
     gpu_info->driverVersion = "18.10.16-180516a-328911C-RadeonSoftwareAdrenalin";
     gpu_info->radeonSoftwareVersion  = "18.5.1";
     gpu_info->numDevices = object->device_count;
From fd152d5e4d3edcfd283b6b2c430ea466fb47e5de Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 14:32:18 -0700
Subject: [PATCH] amd_ags_x64: Update to 5.2.1.

---
 dlls/amd_ags_x64/amd_ags.h          | 14 ++++++++++----
 dlls/amd_ags_x64/amd_ags_x64_main.c |  3 +++
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index b647f912aa7..c39adb53678 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -33,6 +33,12 @@
 /// Online documentation is publicly hosted here: http://gpuopen-librariesandsdks.github.io/ags/
 /// \endinternal
 ///
+/// What's new in AGS 5.2.1 since version 5.2.0
+/// ---------------------------------------
+/// * Fix for crash when using Eyefinity
+/// * Fix for DX12 app registration in the UWP version
+///
+///
 /// What's new in AGS 5.2.0 since version 5.1
 /// ---------------------------------------
 /// AGS 5.2 includes the following updates:
@@ -98,7 +104,7 @@
 
 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
 #define AMD_AGS_VERSION_MINOR 2             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
+#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
 
 #ifdef __cplusplus
 extern "C" {
@@ -622,7 +628,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_SetMarker( AGSContext* context
 /// The different modes to control Crossfire behavior.
 typedef enum AGSCrossfireMode
 {
-    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                      ///< Use the default driver-based AFR rendering
+    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                      ///< Use the default driver-based AFR rendering. If this mode is specified, do NOT use the agsDriverExtensionsDX11_Create*() APIs to create resources
     AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                        ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
     AGS_CROSSFIRE_MODE_DISABLE                              ///< Completely disable AFR rendering
 } AGSCrossfireMode;
@@ -739,7 +745,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice_511( AGSContext*
 
 /// \defgroup dx11appreg App Registration
 /// @{
-/// This extension allows an apllication to voluntarily register itself with the driver, providing a more robust app detection solution and avoid the issue of the driver
+/// This extension allows an apllication to voluntarily register itself with the driver, providing a more robust app detection solution and avoid the issue of the driver 
 /// relying on exe names to match the app to a driver profile.
 /// This feature is supported in Radeon Software Version 17.9.2 onwards.
 /// Rules:
@@ -1151,7 +1157,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount(
 
 ///
 /// This method can be used to determine the total number of asynchronous shader compile jobs that are either
-/// queued for waiting for compilation or being compiled by the driver’s asynchronous compilation threads.
+/// queued for waiting for compilation or being compiled by the driverÂ’s asynchronous compilation threads.
 /// This method can be called at any during the lifetime of the driver.
 ///
 /// \param [in] context                             Pointer to a context.
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 5ba3d680f43..6ed627a67d6 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -19,6 +19,7 @@ enum amd_ags_version
 {
     AMD_AGS_VERSION_5_1_1,
     AMD_AGS_VERSION_5_2_0,
+    AMD_AGS_VERSION_5_2_1,
 
     AMD_AGS_VERSION_COUNT
 };
@@ -33,6 +34,7 @@ static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
 {
     {5, 1, 1},
     {5, 2, 0},
+    {5, 2, 1},
 };
 
 struct AGSContext
@@ -145,6 +147,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
                 device->agsDeviceInfo511.isPrimaryDevice = 1;
             break;
         case AMD_AGS_VERSION_5_2_0:
+        case AMD_AGS_VERSION_5_2_1:
         default:
             device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
From 54feee8728b0f5ae35ff2db4d62fc617bc9ac917 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 14:44:25 -0700
Subject: [PATCH] amd_ags_x64: Update to 5.3.0.

---
 dlls/amd_ags_x64/amd_ags.h          | 98 +++++++++++++++++++++++------
 dlls/amd_ags_x64/amd_ags_x64_main.c |  3 +
 2 files changed, 82 insertions(+), 19 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index c39adb53678..58f7bb84e37 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -33,6 +33,14 @@
 /// Online documentation is publicly hosted here: http://gpuopen-librariesandsdks.github.io/ags/
 /// \endinternal
 ///
+/// ---------------------------------------
+/// What's new in AGS 5.3 since version 5.2
+/// ---------------------------------------
+/// AGS 5.3 includes the following updates:
+/// * DX11 deferred context support for Multi Draw Indirect and UAV Overlap extensions.
+/// * A Radeon Software Version helper to determine whether the installed driver meets your game's minimum driver version requirements.
+/// * Freesync2 Gamma 2.2 mode which uses a 1010102 swapchain and can be considered as an alternative to using the 64 bit swapchain required for Freesync2 scRGB.
+///
 /// What's new in AGS 5.2.1 since version 5.2.0
 /// ---------------------------------------
 /// * Fix for crash when using Eyefinity
@@ -103,8 +111,8 @@
 #define AMD_AGS_H
 
 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
-#define AMD_AGS_VERSION_MINOR 2             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
+#define AMD_AGS_VERSION_MINOR 3             ///< AGS minor version
+#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
 
 #ifdef __cplusplus
 extern "C" {
@@ -112,6 +120,9 @@ extern "C" {
 
 #define AMD_AGS_API WINAPI
 
+#define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX12ExtensionParams and \ref AGSDX11ExtensionParams and the Radeon Software Version
+#define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
+
 // Forward declaration of D3D11 types
 struct IDXGIAdapter;
 enum D3D_DRIVER_TYPE;
@@ -147,6 +158,7 @@ typedef enum AGSReturnCode
     AGS_ERROR_LEGACY_DRIVER,        ///< Returned if a feature is not present in the installed driver
     AGS_EXTENSION_NOT_SUPPORTED,    ///< Returned if the driver does not support the requested driver extension
     AGS_ADL_FAILURE,                ///< Failure in ADL (the AMD Display Library)
+    AGS_DX_FAILURE                  ///< Failure from DirectX runtime
 } AGSReturnCode;
 
 /// The DirectX11 extension support bits
@@ -173,6 +185,9 @@ typedef enum AGSDriverExtensionDX11
     AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,   ///< Supported in Radeon Software Version 16.12.1 onwards.
     AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX11_EXTENSION_BREADCRUMB_MARKERS                   = 1 << 20,   ///< Supported in Radeon Software Version 17.11.1 onwards.
+    AGS_DX11_EXTENSION_MDI_DEFERRED_CONTEXTS                = 1 << 21,   ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
+    AGS_DX11_EXTENSION_UAV_OVERLAP_DEFERRED_CONTEXTS        = 1 << 22,   ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
+    AGS_DX11_EXTENSION_DEPTH_BOUNDS_DEFERRED_CONTEXTS       = 1 << 23    ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
 } AGSDriverExtensionDX11;
 
 /// The DirectX12 extension support bits
@@ -417,6 +432,8 @@ typedef struct AGSDisplaySettings
         Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
         Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
         Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. 1.0 == 80 nits. Tonemap your scene to the range of 0.0 to AGSDisplayInfo::maxLuminance.
+        // Mode_Freesync2_Gamma22 ADDED IN 5.3.0
+        Mode_Freesync2_Gamma22,                             ///< Freesync2 Gamma 2.2, requiring a 1010102 UNORM swapchain.  The output needs to be encoded to gamma 2.2.
         Mode_DolbyVision                                    ///< Dolby Vision, requiring an 8888 UNORM swapchain
     }                       mode;                           ///< The display mode to set the display into
 
@@ -442,6 +459,24 @@ typedef struct AGSDisplaySettings
     int                     flags;                          ///< Bitfield of ::AGSDisplaySettingsFlags
 } AGSDisplaySettings;
 
+/// The result returned from \ref agsCheckDriverVersion
+typedef enum AGSDriverVersionResult
+{
+    AGS_SOFTWAREVERSIONCHECK_OK,                              ///< The reported Radeon Software Version is newer or the same as the required version
+    AGS_SOFTWAREVERSIONCHECK_OLDER,                           ///< The reported Radeon Software Version is older than the required version
+    AGS_SOFTWAREVERSIONCHECK_UNDEFINED                        ///< The check could not determine as result.  This could be because it is a private or custom driver or just invalid arguments.
+} AGSDriverVersionResult;
+
+///
+/// Helper function to check the installed software version against the required software version.
+///
+/// \param [in] radeonSoftwareVersionReported       The Radeon Software Version returned from \ref AGSGPUInfo::radeonSoftwareVersion.
+/// \param [in] radeonSoftwareVersionRequired       The Radeon Software Version to check against.  This is specificed using \ref AGS_MAKE_VERSION.
+/// \return                                         The result of the check.
+///
+AMD_AGS_API AGSDriverVersionResult agsCheckDriverVersion( const char* radeonSoftwareVersionReported, unsigned int radeonSoftwareVersionRequired );
+
+
 ///
 /// Function used to initialize the AGS library.
 /// Must be called prior to any of the subsequent AGS API calls.
@@ -494,7 +529,7 @@ AMD_AGS_API AGSReturnCode agsSetDisplayMode( AGSContext* context, int deviceInde
 /// DirectX12 driver extensions
 /// @{
 
-/// \defgroup dx12init Device creation and cleanup
+/// \defgroup dx12init Device and device object creation and cleanup
 /// It is now mandatory to call \ref agsDriverExtensionsDX12_CreateDevice when creating a device if the user wants to access any future DX12 AMD extensions.
 /// The corresponding \ref agsDriverExtensionsDX12_DestroyDevice call must be called to release the device and free up the internal resources allocated by the create call.
 /// @{
@@ -507,9 +542,6 @@ typedef struct AGSDX12DeviceCreationParams
     D3D_FEATURE_LEVEL           FeatureLevel;               ///< The minimum feature level to create the device with.
 } AGSDX12DeviceCreationParams;
 
-#define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX12ExtensionParams and \ref AGSDX11ExtensionParams
-#define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
-
 /// The struct to specify DX12 additional device creation parameters
 typedef struct AGSDX12ExtensionParams
 {
@@ -628,7 +660,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_SetMarker( AGSContext* context
 /// The different modes to control Crossfire behavior.
 typedef enum AGSCrossfireMode
 {
-    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                      ///< Use the default driver-based AFR rendering. If this mode is specified, do NOT use the agsDriverExtensionsDX11_Create*() APIs to create resources
+    AGS_CROSSFIRE_MODE_DRIVER_AFR = 0,                      ///< Use the default driver-based AFR rendering.  If this mode is specified, do NOT use the agsDriverExtensionsDX11_Create*() APIs to create resources
     AGS_CROSSFIRE_MODE_EXPLICIT_AFR,                        ///< Use the AGS Crossfire API functions to perform explicit AFR rendering without requiring a CF driver profile
     AGS_CROSSFIRE_MODE_DISABLE                              ///< Completely disable AFR rendering
 } AGSCrossfireMode;
@@ -978,8 +1010,8 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_WriteBreadcrumb( AGSContext* c
 
 /// @}
 
-/// \defgroup dx11misc Misc Extensions
-/// API for depth bounds test, UAV overlap and prim topologies
+/// \defgroup dx11Topology Extended Topology
+/// API for primitive topologies
 /// @{
 
 ///
@@ -1001,6 +1033,12 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_WriteBreadcrumb( AGSContext* c
 ///
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_IASetPrimitiveTopology( AGSContext* context, enum D3D_PRIMITIVE_TOPOLOGY topology );
 
+/// @}
+
+/// \defgroup dx11UAVOverlap UAV Overlap
+/// API for enabling overlapping UAV writes
+/// @{
+
 ///
 /// Function used indicate to the driver that it doesn't need to sync the UAVs bound for the subsequent set of back-to-back dispatches.
 /// When calling back-to-back draw calls or dispatch calls that write to the same UAV, the AMD DX11 driver will automatically insert a barrier to ensure there are no write after write (WAW) hazards.
@@ -1023,25 +1061,39 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_IASetPrimitiveTopology( AGSCon
 /// \endcode
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
+///                                                 with the AGS_DX11_EXTENSION_DEFERRED_CONTEXTS bit.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_BeginUAVOverlap( AGSContext* context );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_BeginUAVOverlap_520( AGSContext* context );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_BeginUAVOverlap( AGSContext* context, ID3D11DeviceContext* dxContext );
 
 ///
 /// Function used indicate to the driver it can no longer overlap the batch of back-to-back dispatches that has been submitted.
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
+///                                                 with the AGS_DX11_EXTENSION_DEFERRED_CONTEXTS bit.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_EndUAVOverlap( AGSContext* context );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_EndUAVOverlap_520( AGSContext* context );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_EndUAVOverlap( AGSContext* context, ID3D11DeviceContext* dxContext );
+
+/// @}
+
+/// \defgroup dx11DepthBoundsTest Depth Bounds Test
+/// API for enabling depth bounds testing
+/// @{
 
 ///
 /// Function used to set the depth bounds test extension
 ///
-/// \param [in] context                             Pointer to a context.
+/// \param [in] context                             Pointer to a context
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
 /// \param [in] enabled                             Whether to enable or disable the depth bounds testing. If disabled, the next two args are ignored.
 /// \param [in] minDepth                            The near depth range to clip against.
 /// \param [in] maxDepth                            The far depth range to clip against.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* context, bool enabled, float minDepth, float maxDepth );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds_520( AGSContext* context, bool enabled, float minDepth, float maxDepth );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* context, ID3D11DeviceContext* dxContext, bool enabled, float minDepth, float maxDepth );
 
 /// @}
 
@@ -1054,12 +1106,12 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* co
 /// \code{.cpp}
 ///     // Submit n batches of DrawIndirect calls
 ///     for ( int i = 0; i < n; i++ )
-///         DrawIndexedInstancedIndirect( buffer, i * sizeof( cmd ) );
+///         deviceContext->DrawIndexedInstancedIndirect( buffer, i * sizeof( cmd ) );
 /// \endcode
 /// To be replaced by the following call:
 /// \code{.cpp}
 ///     // Submit all n batches in one call
-///     agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( m_agsContext, n, buffer, 0, sizeof( cmd ) );
+///     agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( m_agsContext, deviceContext, n, buffer, 0, sizeof( cmd ) );
 /// \endcode
 ///
 /// The buffer used for the indirect args must be of the following formats:
@@ -1092,47 +1144,55 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetDepthBounds( AGSContext* co
 /// Function used to submit a batch of draws via MultiDrawIndirect
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
 /// \param [in] drawCount                           The number of draws.
 /// \param [in] pBufferForArgs                      The args buffer.
 /// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
 /// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirect( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirect_520( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirect( AGSContext* context, ID3D11DeviceContext* dxContext, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
 
 ///
 /// Function used to submit a batch of draws via MultiDrawIndirect
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
 /// \param [in] drawCount                           The number of draws.
 /// \param [in] pBufferForArgs                      The args buffer.
 /// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
 /// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect_520( AGSContext* context, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect( AGSContext* context, ID3D11DeviceContext* dxContext, unsigned int drawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
 
 ///
 /// Function used to submit a batch of draws via MultiDrawIndirect
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
 /// \param [in] pBufferForDrawCount                 The draw count buffer.
 /// \param [in] alignedByteOffsetForDrawCount       The offset into the draw count buffer.
 /// \param [in] pBufferForArgs                      The args buffer.
 /// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
 /// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect_520( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect( AGSContext* context, ID3D11DeviceContext* dxContext, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
 
 ///
 /// Function used to submit a batch of draws via MultiDrawIndirect
 ///
 /// \param [in] context                             Pointer to a context.
+/// \param [in] dxContext                           Pointer to the DirectX device context.  If this is to work using the non-immediate context, then you need to check support.  If nullptr is specified, then the immediate context is assumed.
 /// \param [in] pBufferForDrawCount                 The draw count buffer.
 /// \param [in] alignedByteOffsetForDrawCount       The offset into the draw count buffer.
 /// \param [in] pBufferForArgs                      The args buffer.
 /// \param [in] alignedByteOffsetForArgs            The offset into the args buffer.
 /// \param [in] byteStrideForArgs                   The per element stride of the args buffer.
 ///
-AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect_520( AGSContext* context, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
+AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect( AGSContext* context, ID3D11DeviceContext* dxContext, ID3D11Buffer* pBufferForDrawCount, unsigned int alignedByteOffsetForDrawCount, ID3D11Buffer* pBufferForArgs, unsigned int alignedByteOffsetForArgs, unsigned int byteStrideForArgs );
 
 /// @}
 
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 6ed627a67d6..021a28bf2dc 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -20,6 +20,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_1_1,
     AMD_AGS_VERSION_5_2_0,
     AMD_AGS_VERSION_5_2_1,
+    AMD_AGS_VERSION_5_3_0,
 
     AMD_AGS_VERSION_COUNT
 };
@@ -35,6 +36,7 @@ static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
     {5, 1, 1},
     {5, 2, 0},
     {5, 2, 1},
+    {5, 3, 0},
 };
 
 struct AGSContext
@@ -148,6 +150,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             break;
         case AMD_AGS_VERSION_5_2_0:
         case AMD_AGS_VERSION_5_2_1:
+        case AMD_AGS_VERSION_5_3_0:
         default:
             device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
From 0db523b1dd8b193f50d09133c7ef0bfbe63827b2 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 15:03:02 -0700
Subject: [PATCH] amd_ags_x64: Update to 5.4.0.

---
 dlls/amd_ags_x64/amd_ags.h          | 92 ++++++++++++++++++++++++++---
 dlls/amd_ags_x64/amd_ags_x64_main.c | 15 ++++-
 2 files changed, 99 insertions(+), 8 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index 58f7bb84e37..c615ba4c203 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -34,6 +34,14 @@
 /// \endinternal
 ///
 /// ---------------------------------------
+/// What's new in AGS 5.4 since version 5.3
+/// ---------------------------------------
+/// AGS 5.4 includes the following updates:
+/// * A more detailed description of the GPU architecture, now including RDNA GPUs.
+/// * Navi 10, Navi 14 and Radeon 7 core and memory speeds returned.
+/// * Draw index and Atomic U64 intrinsics for both DX11 and DX12.
+///
+/// ---------------------------------------
 /// What's new in AGS 5.3 since version 5.2
 /// ---------------------------------------
 /// AGS 5.3 includes the following updates:
@@ -111,7 +119,7 @@
 #define AMD_AGS_H
 
 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
-#define AMD_AGS_VERSION_MINOR 3             ///< AGS minor version
+#define AMD_AGS_VERSION_MINOR 4             ///< AGS minor version
 #define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
 
 #ifdef __cplusplus
@@ -185,9 +193,11 @@ typedef enum AGSDriverExtensionDX11
     AGS_DX11_EXTENSION_MULTIVIEW                            = 1 << 18,   ///< Supported in Radeon Software Version 16.12.1 onwards.
     AGS_DX11_EXTENSION_APP_REGISTRATION                     = 1 << 19,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX11_EXTENSION_BREADCRUMB_MARKERS                   = 1 << 20,   ///< Supported in Radeon Software Version 17.11.1 onwards.
-    AGS_DX11_EXTENSION_MDI_DEFERRED_CONTEXTS                = 1 << 21,   ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
-    AGS_DX11_EXTENSION_UAV_OVERLAP_DEFERRED_CONTEXTS        = 1 << 22,   ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
-    AGS_DX11_EXTENSION_DEPTH_BOUNDS_DEFERRED_CONTEXTS       = 1 << 23    ///< Supported in Radeon Software Version XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX onwards.
+    AGS_DX11_EXTENSION_MDI_DEFERRED_CONTEXTS                = 1 << 21,   ///< Supported in Radeon Software Version 18.8.1 onwards.
+    AGS_DX11_EXTENSION_UAV_OVERLAP_DEFERRED_CONTEXTS        = 1 << 22,   ///< Supported in Radeon Software Version 18.8.1 onwards.
+    AGS_DX11_EXTENSION_DEPTH_BOUNDS_DEFERRED_CONTEXTS       = 1 << 23,   ///< Supported in Radeon Software Version 18.8.1 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_DRAW_INDEX                 = 1 << 24,   ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 25    ///< Supported in Radeon Software Version 19.12.2 onwards.
 } AGSDriverExtensionDX11;
 
 /// The DirectX12 extension support bits
@@ -204,7 +214,10 @@ typedef enum AGSDriverExtensionDX12
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_REDUCE                = 1 << 8,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_WAVE_SCAN                  = 1 << 9,   ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_USER_MARKERS                         = 1 << 10,  ///< Supported in Radeon Software Version 17.9.1 onwards.
-    AGS_DX12_EXTENSION_APP_REGISTRATION                     = 1 << 11   ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_APP_REGISTRATION                     = 1 << 11,  ///< Supported in Radeon Software Version 17.9.1 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_UAV_BIND_SLOT              = 1 << 12,  ///< Supported in Radeon Software Version 19.5.1 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_DRAW_INDEX                 = 1 << 13,  ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 14   ///< Supported in Radeon Software Version 19.12.2 onwards.
 } AGSDriverExtensionDX12;
 
 /// The space id for DirectX12 intrinsic support
@@ -312,6 +325,19 @@ typedef enum ArchitectureVersion
     ArchitectureVersion_GCN                                     ///< AMD GCN architecture
 } ArchitectureVersion;
 
+/// The ASIC family
+typedef enum AsicFamily
+{
+    AsicFamily_Unknown,                                         ///< Unknown architecture, potentially from another IHV. Check \ref AGSDeviceInfo::vendorId
+    AsicFamily_PreGCN,                                          ///< Pre GCN architecture.
+    AsicFamily_GCN1,                                            ///< AMD GCN 1 architecture: Oland, Cape Verde, Pitcairn & Tahiti.
+    AsicFamily_GCN2,                                            ///< AMD GCN 2 architecture: Hawaii & Bonaire.  This also includes APUs Kaveri and Carrizo.
+    AsicFamily_GCN3,                                            ///< AMD GCN 3 architecture: Tonga & Fiji.
+    AsicFamily_GCN4,                                            ///< AMD GCN 4 architecture: Polaris.
+    AsicFamily_Vega,                                            ///< AMD Vega architecture, including Raven Ridge (ie AMD Ryzen CPU + AMD Vega GPU).
+    AsicFamily_RDNA                                             ///< AMD RDNA architecture
+} AsicFamily;
+
 /// The device info struct used to describe a physical GPU enumerated by AGS
 typedef struct AGSDeviceInfo_511
 {
@@ -374,10 +400,48 @@ typedef struct AGSDeviceInfo_520
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
 } AGSDeviceInfo_520;
 
+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo_540
+{
+    const char*                     adapterString;                  ///< The adapter name string
+    AsicFamily                      asicFamily;                     ///< Set to Unknown if not AMD hardware
+    int                             isAPU;                          ///< Whether or not this is an APU
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of compute units.
+    int                             numWGPs;                        ///< Number of RDNA Work Group Processors.  Only valid if ASIC is RDNA onwards.
+
+    int                             numROPs;                        ///< Number of ROPs
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    int                             memoryBandwidth;                ///< Memory bandwidth in MB/s
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN onwards. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    int                             isPrimaryDevice;                ///< Whether or not this is the primary adapter in the system. Not set on the WACK version.
+    unsigned long long              localMemoryInBytes;             ///< The size of local memory in bytes.
+    unsigned long long              sharedMemoryInBytes;            ///< The size of system memory available to the GPU in bytes.  It is important to factor this into your VRAM budget for APUs
+                                                                    ///< as the reported local memory will only be a small fraction of the total memory available to the GPU.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+} AGSDeviceInfo_540;
+
 typedef union AGSDeviceInfo
 {
     AGSDeviceInfo_511 agsDeviceInfo511;
     AGSDeviceInfo_520 agsDeviceInfo520;
+    AGSDeviceInfo_540 agsDeviceInfo540;
 } AGSDeviceInfo;
 
 /// \defgroup general General API functions
@@ -549,6 +613,8 @@ typedef struct AGSDX12ExtensionParams
     const WCHAR*    pEngineName;            ///< Engine name
     unsigned int    appVersion;             ///< Application version
     unsigned int    engineVersion;          ///< Engine version
+    // ADDED IN 5.4.0
+    unsigned int    uavSlot;                ///< The UAV slot reserved for intrinsic support.  Refer to the \ref agsDriverExtensionsDX12_CreateDevice documentation for more details.
 } AGSDX12ExtensionParams;
 
 /// The struct to hold all the returned parameters from the device creation call
@@ -566,7 +632,19 @@ typedef struct AGSDX12ReturnedParams
 /// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION (/Od) option, otherwise it will not work.
 /// * The shader compiler needs D3DCOMPILE_ENABLE_STRICTNESS (/Ges) enabled.
 /// * The intrinsic instructions require a 5.1 shader model.
-/// * The Root Signature will need to use an extra resource and sampler. These are not real resources/samplers, they are just used to encode the intrinsic instruction.
+/// * The Root Signature will need to reserve an extra UAV resource slot. This is not a real resource that requires allocating, it is just used to encode the intrinsic instructions.
+///
+/// The easiest way to set up the reserved UAV slot is to specify it at u0.  The register space id will automatically be assumed to be \ref AGS_DX12_SHADER_INSTRINSICS_SPACE_ID.
+/// The HLSL expects this as default and the set up code would look similar to this:
+/// \code{.cpp}
+/// CD3DX12_DESCRIPTOR_RANGE range[];
+/// ...
+/// range[ 0 ].Init( D3D12_DESCRIPTOR_RANGE_TYPE_UAV, 1, 0, AGS_DX12_SHADER_INSTRINSICS_SPACE_ID ); // u0 at driver-reserved space id
+/// \endcode
+///
+/// Newer drivers also support a user-specified slot in which case the register space id is assumed to be 0.  It is important that the \ref AGS_DX12_EXTENSION_INTRINSIC_UAV_BIND_SLOT bit is set
+/// to ensure the driver can support this.  If not, then u0 and \ref AGS_DX12_SHADER_INSTRINSICS_SPACE_ID must be used.
+/// If the driver does support this feature and a non zero slot is required, then the HLSL must also define AMD_EXT_SHADER_INTRINSIC_UAV_OVERRIDE as the matching slot value.
 ///
 /// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
 /// \param [in] creationParams                      Pointer to the struct to specify the existing DX12 device creation parameters.
@@ -616,7 +694,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DeInit( AGSContext* context );
 
 ///
 /// Function used to push an AMD user marker onto the command list.
-/// This is only has an effect if AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of \ref agsDriverExtensionsDX12_CreateDevice
+/// This is only has an effect if \ref AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of \ref agsDriverExtensionsDX12_CreateDevice
 /// Supported in Radeon Software Version 17.9.1 onwards.
 ///
 /// \param [in] context                             Pointer to a context.
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 021a28bf2dc..5f5eab01ebc 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -21,6 +21,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_2_0,
     AMD_AGS_VERSION_5_2_1,
     AMD_AGS_VERSION_5_3_0,
+    AMD_AGS_VERSION_5_4_0,
 
     AMD_AGS_VERSION_COUNT
 };
@@ -37,6 +38,7 @@ static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
     {5, 2, 0},
     {5, 2, 1},
     {5, 3, 0},
+    {5, 4, 0},
 };
 
 struct AGSContext
@@ -151,7 +153,6 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         case AMD_AGS_VERSION_5_2_0:
         case AMD_AGS_VERSION_5_2_1:
         case AMD_AGS_VERSION_5_3_0:
-        default:
             device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo520.deviceId = vk_properties->deviceID;
@@ -162,6 +163,18 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             if (!i)
                 device->agsDeviceInfo520.isPrimaryDevice = 1;
             break;
+        case AMD_AGS_VERSION_5_4_0:
+        default:
+            device->agsDeviceInfo540.adapterString = vk_properties->deviceName;
+            device->agsDeviceInfo540.vendorId = vk_properties->vendorID;
+            device->agsDeviceInfo540.deviceId = vk_properties->deviceID;
+
+            if (device->agsDeviceInfo540.vendorId == 0x1002)
+                device->agsDeviceInfo540.asicFamily = AsicFamily_GCN4;
+
+            if (!i)
+                device->agsDeviceInfo540.isPrimaryDevice = 1;
+            break;
         }
     }
 
From 247acfa3f0d40b136a066a854726b5fe6f7527a9 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 15:16:44 -0700
Subject: [PATCH] amd_ags_x64: Update to 5.4.1

---
 dlls/amd_ags_x64/amd_ags.h          | 101 +++++++++++++++++++++++-----
 dlls/amd_ags_x64/amd_ags_x64_main.c |  15 ++++-
 2 files changed, 98 insertions(+), 18 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index c615ba4c203..30f3735915c 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -1,5 +1,5 @@
 //
-// Copyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.
+// Copyright (c) 2020 Advanced Micro Devices, Inc. All rights reserved.
 //
 // Permission is hereby granted, free of charge, to any person obtaining a copy
 // of this software and associated documentation files (the "Software"), to deal
@@ -34,11 +34,21 @@
 /// \endinternal
 ///
 /// ---------------------------------------
+/// What's new in AGS 5.4.1 since version 5.4.0
+/// ---------------------------------------
+/// AGS 5.4.1 includes the following updates:
+/// * AsicFamily_Count to help with code maintenance.
+/// * Visual Studio 2019 support.
+/// * x86 support
+/// * BaseInstance and BaseVertex intrinsics along with corresponding caps bits.
+/// * GetWaveSize intrinsic along with corresponding caps bits.
+///
+/// ---------------------------------------
 /// What's new in AGS 5.4 since version 5.3
 /// ---------------------------------------
 /// AGS 5.4 includes the following updates:
 /// * A more detailed description of the GPU architecture, now including RDNA GPUs.
-/// * Navi 10, Navi 14 and Radeon 7 core and memory speeds returned.
+/// * Radeon 7 core and memory speeds returned.
 /// * Draw index and Atomic U64 intrinsics for both DX11 and DX12.
 ///
 /// ---------------------------------------
@@ -47,7 +57,7 @@
 /// AGS 5.3 includes the following updates:
 /// * DX11 deferred context support for Multi Draw Indirect and UAV Overlap extensions.
 /// * A Radeon Software Version helper to determine whether the installed driver meets your game's minimum driver version requirements.
-/// * Freesync2 Gamma 2.2 mode which uses a 1010102 swapchain and can be considered as an alternative to using the 64 bit swapchain required for Freesync2 scRGB.
+/// * Freesync HDR Gamma 2.2 mode which uses a 1010102 swapchain and can be considered as an alternative to using the 64 bit swapchain required for Freesync HDR scRGB.
 ///
 /// What's new in AGS 5.2.1 since version 5.2.0
 /// ---------------------------------------
@@ -120,16 +130,19 @@
 
 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
 #define AMD_AGS_VERSION_MINOR 4             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
+#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+/// \defgroup Defines AGS defines
+/// @{
 #define AMD_AGS_API WINAPI
 
 #define AGS_MAKE_VERSION( major, minor, patch ) ( ( major << 22 ) | ( minor << 12 ) | patch ) ///< Macro to create the app and engine versions for the fields in \ref AGSDX12ExtensionParams and \ref AGSDX11ExtensionParams and the Radeon Software Version
 #define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
+/// @}
 
 // Forward declaration of D3D11 types
 struct IDXGIAdapter;
@@ -154,6 +167,8 @@ struct D3D11_SUBRESOURCE_DATA;
 struct ID3D12Device;
 struct ID3D12GraphicsCommandList;
 
+/// \defgroup enums General enumerations
+/// @{
 
 /// The return codes
 typedef enum AGSReturnCode
@@ -162,8 +177,10 @@ typedef enum AGSReturnCode
     AGS_FAILURE,                    ///< Failed to complete call for some unspecified reason
     AGS_INVALID_ARGS,               ///< Invalid arguments into the function
     AGS_OUT_OF_MEMORY,              ///< Out of memory when allocating space internally
-    AGS_ERROR_MISSING_DLL,          ///< Returned when a driver dll fails to load - most likely due to not being present in legacy driver installation
-    AGS_ERROR_LEGACY_DRIVER,        ///< Returned if a feature is not present in the installed driver
+    AGS_MISSING_D3D_DLL,            ///< Returned when a D3D dll fails to load
+    AGS_LEGACY_DRIVER,              ///< Returned if a feature is not present in the installed driver
+    // AGS_NO_AMD_DRIVER_INSTALLED ADDED IN 5.4.1
+    AGS_NO_AMD_DRIVER_INSTALLED,    ///< Returned if the AMD GPU driver does not appear to be installed
     AGS_EXTENSION_NOT_SUPPORTED,    ///< Returned if the driver does not support the requested driver extension
     AGS_ADL_FAILURE,                ///< Failure in ADL (the AMD Display Library)
     AGS_DX_FAILURE                  ///< Failure from DirectX runtime
@@ -197,7 +214,10 @@ typedef enum AGSDriverExtensionDX11
     AGS_DX11_EXTENSION_UAV_OVERLAP_DEFERRED_CONTEXTS        = 1 << 22,   ///< Supported in Radeon Software Version 18.8.1 onwards.
     AGS_DX11_EXTENSION_DEPTH_BOUNDS_DEFERRED_CONTEXTS       = 1 << 23,   ///< Supported in Radeon Software Version 18.8.1 onwards.
     AGS_DX11_EXTENSION_INTRINSIC_DRAW_INDEX                 = 1 << 24,   ///< Supported in Radeon Software Version 19.12.2 onwards.
-    AGS_DX11_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 25    ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 25,   ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_GET_WAVE_SIZE              = 1 << 26,   ///< Supported in Radeon Software Version 20.2.1 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_BASE_VERTEX                = 1 << 27,   ///< Supported in Radeon Software Version 20.2.1 onwards.
+    AGS_DX11_EXTENSION_INTRINSIC_BASE_INSTANCE              = 1 << 28    ///< Supported in Radeon Software Version 20.2.1 onwards.
 } AGSDriverExtensionDX11;
 
 /// The DirectX12 extension support bits
@@ -217,7 +237,10 @@ typedef enum AGSDriverExtensionDX12
     AGS_DX12_EXTENSION_APP_REGISTRATION                     = 1 << 11,  ///< Supported in Radeon Software Version 17.9.1 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_UAV_BIND_SLOT              = 1 << 12,  ///< Supported in Radeon Software Version 19.5.1 onwards.
     AGS_DX12_EXTENSION_INTRINSIC_DRAW_INDEX                 = 1 << 13,  ///< Supported in Radeon Software Version 19.12.2 onwards.
-    AGS_DX12_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 14   ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_ATOMIC_U64                 = 1 << 14,  ///< Supported in Radeon Software Version 19.12.2 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BASE_VERTEX                = 1 << 15,  ///< Supported in Radeon Software Version 20.2.1 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_BASE_INSTANCE              = 1 << 16,  ///< Supported in Radeon Software Version 20.2.1 onwards.
+    AGS_DX12_EXTENSION_INTRINSIC_GET_WAVE_SIZE              = 1 << 17   ///< Supported in Radeon Software Version 20.5.1 onwards.
 } AGSDriverExtensionDX12;
 
 /// The space id for DirectX12 intrinsic support
@@ -238,7 +261,7 @@ typedef enum AGSDisplayFlags
     AGS_DISPLAYFLAG_HDR10                                   = 1 << 1,   ///< HDR10 is supported on this display
     AGS_DISPLAYFLAG_DOLBYVISION                             = 1 << 2,   ///< Dolby Vision is supported on this display
     AGS_DISPLAYFLAG_FREESYNC                                = 1 << 3,   ///< Freesync is supported on this display
-    AGS_DISPLAYFLAG_FREESYNC_2                              = 1 << 4,   ///< Freesync 2 is supported on this display
+    AGS_DISPLAYFLAG_FREESYNC_HDR                            = 1 << 4,   ///< Freesync HDR is supported on this display
     AGS_DISPLAYFLAG_EYEFINITY_IN_GROUP                      = 1 << 5,   ///< The display is part of the Eyefinity group
     AGS_DISPLAYFLAG_EYEFINITY_PREFERRED_DISPLAY             = 1 << 6,   ///< The display is the preferred display in the Eyefinity group for displaying the UI
     AGS_DISPLAYFLAG_EYEFINITY_IN_PORTRAIT_MODE              = 1 << 7,   ///< The display is in the Eyefinity group but in portrait mode
@@ -250,6 +273,7 @@ typedef enum AGSDisplaySettingsFlags
     AGS_DISPLAYSETTINGSFLAG_DISABLE_LOCAL_DIMMING           = 1 << 0,   ///< Disables local dimming if possible
 } AGSDisplaySettingsFlags;
 
+/// @}
 
 typedef struct AGSContext AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
 
@@ -280,7 +304,7 @@ typedef struct AGSDisplayInfo
     char                    name[ 256 ];                    ///< The name of the display
     char                    displayDeviceName[ 32 ];        ///< The display device name, i.e. DISPLAY_DEVICE::DeviceName
 
-    unsigned int            displayFlags;                   ///< Bitfield of ::AGSDisplayFlags
+    unsigned int            displayFlags;                   ///< Bitfield of \ref AGSDisplayFlags
 
     int                     maxResolutionX;                 ///< The maximum supported resolution of the unrotated display
     int                     maxResolutionY;                 ///< The maximum supported resolution of the unrotated display
@@ -335,7 +359,9 @@ typedef enum AsicFamily
     AsicFamily_GCN3,                                            ///< AMD GCN 3 architecture: Tonga & Fiji.
     AsicFamily_GCN4,                                            ///< AMD GCN 4 architecture: Polaris.
     AsicFamily_Vega,                                            ///< AMD Vega architecture, including Raven Ridge (ie AMD Ryzen CPU + AMD Vega GPU).
-    AsicFamily_RDNA                                             ///< AMD RDNA architecture
+    AsicFamily_RDNA,                                            ///< AMD RDNA architecture
+
+    AsicFamily_Count                                            ///< Number of enumerated ASIC families
 } AsicFamily;
 
 /// The device info struct used to describe a physical GPU enumerated by AGS
@@ -437,11 +463,47 @@ typedef struct AGSDeviceInfo_540
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
 } AGSDeviceInfo_540;
 
+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo_541
+{
+    const char*                     adapterString;                  ///< The adapter name string
+    AsicFamily                      asicFamily;                     ///< Set to Unknown if not AMD hardware
+    int                             isAPU;                          ///< Whether or not this is an APU
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of compute units.
+    int                             numWGPs;                        ///< Number of RDNA Work Group Processors.  Only valid if ASIC is RDNA onwards.
+
+    int                             numROPs;                        ///< Number of ROPs
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    int                             memoryBandwidth;                ///< Memory bandwidth in MB/s
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN onwards. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    int                             isPrimaryDevice;                ///< Whether or not this is the primary adapter in the system. Not set on the WACK version.
+    long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+} AGSDeviceInfo_541;
+
 typedef union AGSDeviceInfo
 {
     AGSDeviceInfo_511 agsDeviceInfo511;
     AGSDeviceInfo_520 agsDeviceInfo520;
     AGSDeviceInfo_540 agsDeviceInfo540;
+    AGSDeviceInfo_541 agsDeviceInfo541;
 } AGSDeviceInfo;
 
 /// \defgroup general General API functions
@@ -495,10 +557,12 @@ typedef struct AGSDisplaySettings
         Mode_SDR,                                           ///< SDR mode
         Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
         Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
-        Mode_Freesync2_scRGB,                               ///< Freesync2 scRGB, requiring an FP16 swapchain. 1.0 == 80 nits. Tonemap your scene to the range of 0.0 to AGSDisplayInfo::maxLuminance.
-        // Mode_Freesync2_Gamma22 ADDED IN 5.3.0
-        Mode_Freesync2_Gamma22,                             ///< Freesync2 Gamma 2.2, requiring a 1010102 UNORM swapchain.  The output needs to be encoded to gamma 2.2.
-        Mode_DolbyVision                                    ///< Dolby Vision, requiring an 8888 UNORM swapchain
+        Mode_FreesyncHDR_scRGB,                             ///< Freesync HDR scRGB, requiring an FP16 swapchain. A value of 1.0 == 80 nits.
+        // Mode_FreesyncHDR_Gamma22 ADDED IN 5.3.0
+        Mode_FreesyncHDR_Gamma22,                           ///< Freesync HDR Gamma 2.2, requiring a 1010102 UNORM swapchain.  The output needs to be encoded to gamma 2.2.
+        Mode_DolbyVision,                                   ///< Dolby Vision, requiring an 8888 UNORM swapchain
+
+        Mode_Count                                          ///< Number of enumerated display modes
     }                       mode;                           ///< The display mode to set the display into
 
     double                  chromaticityRedX;               ///< Red display primary X coord
@@ -545,7 +609,9 @@ AMD_AGS_API AGSDriverVersionResult agsCheckDriverVersion( const char* radeonSoft
 /// Function used to initialize the AGS library.
 /// Must be called prior to any of the subsequent AGS API calls.
 /// Must be called prior to ID3D11Device or ID3D12Device creation.
-/// \note This function will fail with \ref AGS_ERROR_LEGACY_DRIVER in Catalyst versions before 12.20.
+/// \note The caller of this function should handle the possibility of the call failing in the cases below. One option is to do a vendor id check and only call \ref agsInit if there is an AMD GPU present.
+/// \note This function will fail with \ref AGS_NO_AMD_DRIVER_INSTALLED if there is no AMD driver found on the system.
+/// \note This function will fail with \ref AGS_LEGACY_DRIVER in Catalyst versions before 12.20.
 /// \note It is good practice to check the AGS version returned from AGSGPUInfo against the version defined in the header in case a mismatch between the dll and header has occurred.
 ///
 /// \param [in, out] context                        Address of a pointer to a context. This function allocates a context on the heap which is then required for all subsequent API calls.
@@ -577,7 +643,8 @@ AMD_AGS_API AGSReturnCode agsGetCrossfireGPUCount( AGSContext* context, int* num
 /// \note Call this function after each mode change (switch to fullscreen, any change in swapchain etc).
 /// \note HDR10 PQ mode requires a 1010102 swapchain.
 /// \note HDR10 scRGB mode requires an FP16 swapchain.
-/// \note Freesync2 scRGB mode requires an FP16 swapchain.
+/// \note Freesync HDR scRGB mode requires an FP16 swapchain.
+/// \note Freesync HDR Gamma 2.2 mode requires a 1010102 swapchain.
 /// \note Dolby Vision requires a 8888 UNORM swapchain.
 ///
 /// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 5f5eab01ebc..8d76c326c26 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -22,6 +22,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_2_1,
     AMD_AGS_VERSION_5_3_0,
     AMD_AGS_VERSION_5_4_0,
+    AMD_AGS_VERSION_5_4_1,
 
     AMD_AGS_VERSION_COUNT
 };
@@ -39,6 +40,7 @@ static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
     {5, 2, 1},
     {5, 3, 0},
     {5, 4, 0},
+    {5, 4, 1},
 };
 
 struct AGSContext
@@ -164,7 +166,6 @@ static AGSReturnCode init_ags_context(AGSContext *context)
                 device->agsDeviceInfo520.isPrimaryDevice = 1;
             break;
         case AMD_AGS_VERSION_5_4_0:
-        default:
             device->agsDeviceInfo540.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo540.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo540.deviceId = vk_properties->deviceID;
@@ -175,6 +176,18 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             if (!i)
                 device->agsDeviceInfo540.isPrimaryDevice = 1;
             break;
+        case AMD_AGS_VERSION_5_4_1:
+        default:
+            device->agsDeviceInfo541.adapterString = vk_properties->deviceName;
+            device->agsDeviceInfo541.vendorId = vk_properties->vendorID;
+            device->agsDeviceInfo541.deviceId = vk_properties->deviceID;
+
+            if (device->agsDeviceInfo541.vendorId == 0x1002)
+                device->agsDeviceInfo541.asicFamily = AsicFamily_GCN4;
+
+            if (!i)
+                device->agsDeviceInfo541.isPrimaryDevice = 1;
+            break;
         }
     }
 
From 14d65e9ff5ab6f29a24ac4024b9ee302091c3400 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 16:33:08 -0700
Subject: [PATCH] amd_ags_x64: Fill in localMemoryInBytes.

---
 dlls/amd_ags_x64/amd_ags_x64_main.c | 39 ++++++++++++++++++++++++++---
 1 file changed, 36 insertions(+), 3 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 8d76c326c26..d1ea7a23ce7 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -49,12 +49,14 @@ struct AGSContext
     unsigned int device_count;
     AGSDeviceInfo *devices;
     VkPhysicalDeviceProperties *properties;
+    VkPhysicalDeviceMemoryProperties *memory_properties;
 };
 
 static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
-        VkPhysicalDeviceProperties **out)
+        VkPhysicalDeviceProperties **out, VkPhysicalDeviceMemoryProperties **out_memory)
 {
     VkPhysicalDeviceProperties *properties = NULL;
+    VkPhysicalDeviceMemoryProperties *memory_properties = NULL;
     VkPhysicalDevice *vk_physical_devices = NULL;
     VkInstance vk_instance = VK_NULL_HANDLE;
     VkInstanceCreateInfo create_info;
@@ -99,11 +101,23 @@ static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
         goto done;
     }
 
+    if (!(memory_properties = heap_calloc(count, sizeof(*memory_properties))))
+    {
+        WARN("Failed to allocate memory.\n");
+        heap_free(properties);
+        ret = AGS_OUT_OF_MEMORY;
+        goto done;
+    }
+
     for (i = 0; i < count; ++i)
         vkGetPhysicalDeviceProperties(vk_physical_devices[i], &properties[i]);
 
+    for (i = 0; i < count; ++i)
+        vkGetPhysicalDeviceMemoryProperties(vk_physical_devices[i], &memory_properties[i]);
+
     *out_count = count;
     *out = properties;
+    *out_memory = memory_properties;
 
 done:
     heap_free(vk_physical_devices);
@@ -115,15 +129,16 @@ static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
 static AGSReturnCode init_ags_context(AGSContext *context)
 {
     AGSReturnCode ret;
-    unsigned int i;
+    unsigned int i, j;
 
     // TODO: version check
     context->version = AMD_AGS_VERSION_5_1_1;
     context->device_count = 0;
     context->devices = NULL;
     context->properties = NULL;
+    context->memory_properties = NULL;
 
-    ret = vk_get_physical_device_properties(&context->device_count, &context->properties);
+    ret = vk_get_physical_device_properties(&context->device_count, &context->properties, &context->memory_properties);
     if (ret != AGS_SUCCESS || !context->device_count)
         return ret;
 
@@ -131,13 +146,26 @@ static AGSReturnCode init_ags_context(AGSContext *context)
     {
         WARN("Failed to allocate memory.\n");
         heap_free(context->properties);
+        heap_free(context->memory_properties);
         return AGS_OUT_OF_MEMORY;
     }
 
     for (i = 0; i < context->device_count; ++i)
     {
         const VkPhysicalDeviceProperties *vk_properties = &context->properties[i];
+        const VkPhysicalDeviceMemoryProperties *vk_memory_properties = &context->memory_properties[i];
         AGSDeviceInfo *device = &context->devices[i];
+        VkDeviceSize local_memory_size = 0;
+
+        for (j = 0; j < vk_memory_properties->memoryHeapCount; j++)
+        {
+            if (vk_memory_properties->memoryHeaps[j].flags & VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
+            {
+                local_memory_size = vk_memory_properties->memoryHeaps[j].size;
+                break;
+            }
+        }
+        TRACE("reporting local memory size 0x%s bytes\n", wine_dbgstr_longlong(local_memory_size));
 
         switch (context->version)
         {
@@ -145,6 +173,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             device->agsDeviceInfo511.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo511.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo511.deviceId = vk_properties->deviceID;
+            device->agsDeviceInfo511.localMemoryInBytes = local_memory_size;
 
             if (device->agsDeviceInfo511.vendorId == 0x1002)
                 device->agsDeviceInfo511.architectureVersion = ArchitectureVersion_GCN;
@@ -158,6 +187,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo520.deviceId = vk_properties->deviceID;
+            device->agsDeviceInfo520.localMemoryInBytes = local_memory_size;
 
             if (device->agsDeviceInfo520.vendorId == 0x1002)
                 device->agsDeviceInfo520.architectureVersion = ArchitectureVersion_GCN;
@@ -169,6 +199,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             device->agsDeviceInfo540.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo540.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo540.deviceId = vk_properties->deviceID;
+            device->agsDeviceInfo540.localMemoryInBytes = local_memory_size;
 
             if (device->agsDeviceInfo540.vendorId == 0x1002)
                 device->agsDeviceInfo540.asicFamily = AsicFamily_GCN4;
@@ -181,6 +212,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
             device->agsDeviceInfo541.adapterString = vk_properties->deviceName;
             device->agsDeviceInfo541.vendorId = vk_properties->vendorID;
             device->agsDeviceInfo541.deviceId = vk_properties->deviceID;
+            device->agsDeviceInfo541.localMemoryInBytes = local_memory_size;
 
             if (device->agsDeviceInfo541.vendorId == 0x1002)
                 device->agsDeviceInfo541.asicFamily = AsicFamily_GCN4;
@@ -238,6 +270,7 @@ AGSReturnCode WINAPI agsDeInit(AGSContext *context)
 
     if (context)
     {
+        heap_free(context->memory_properties);
         heap_free(context->properties);
         heap_free(context->devices);
         heap_free(context);
From 3f97cc0dc89c51a72346ae5680ea4860016e92c5 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 17 Jun 2020 16:36:24 -0700
Subject: [PATCH] amd_ags_x64: Update reported driver version to 20.20.2.

Needed to silence warnings in Red Dead Redemption 2.
---
 dlls/amd_ags_x64/amd_ags_x64_main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index d1ea7a23ce7..e8420acd4d1 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -252,8 +252,8 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     gpu_info->agsVersionMajor = amd_ags_versions[object->version].major;
     gpu_info->agsVersionMinor = amd_ags_versions[object->version].minor;
     gpu_info->agsVersionPatch = amd_ags_versions[object->version].patch;
-    gpu_info->driverVersion = "18.10.16-180516a-328911C-RadeonSoftwareAdrenalin";
-    gpu_info->radeonSoftwareVersion  = "18.5.1";
+    gpu_info->driverVersion = "20.20.2-180516a-328911C-RadeonSoftwareAdrenalin";
+    gpu_info->radeonSoftwareVersion  = "20.20.2";
     gpu_info->numDevices = object->device_count;
     gpu_info->devices = object->devices;
 
From 1a2c35253ed092cad7d08779f8d1ccde00d16c08 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Thu, 25 Jun 2020 15:54:59 -0700
Subject: [PATCH] amd_ags_x64: Detect library version from DLL included with
 game.

---
 dlls/amd_ags_x64/Makefile.in        |  2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 70 ++++++++++++++++++++++++++++-
 2 files changed, 69 insertions(+), 3 deletions(-)

diff --git a/dlls/amd_ags_x64/Makefile.in b/dlls/amd_ags_x64/Makefile.in
index aa7127e2ede..ec13c055a26 100644
--- a/dlls/amd_ags_x64/Makefile.in
+++ b/dlls/amd_ags_x64/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = amd_ags_x64.dll
-IMPORTS   = vulkan-1
+IMPORTS   = version vulkan-1
 IMPORTLIB = amd_ags_x64
 
 EXTRADLLFLAGS = -mno-cygwin
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index e8420acd4d1..49fc7ab7403 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -126,13 +126,79 @@ static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
     return ret;
 }
 
+static enum amd_ags_version determine_ags_version(void)
+{
+    /* AMD AGS is not binary compatible between versions (even minor versions), and the game
+     * does not request a specific version when calling agsInit().
+     * Checking the version of amd_ags_x64.dll shipped with the game is the only way to
+     * determine what version the game was built against.
+     *
+     * An update to AGS 5.4.1 included an amd_ags_x64.dll with no file version info.
+     * In case of an error, assume it's that version.
+     */
+    enum amd_ags_version ret = AMD_AGS_VERSION_5_4_1;
+    DWORD infosize;
+    void *infobuf = NULL;
+    void *val;
+    UINT vallen, i;
+    VS_FIXEDFILEINFO *info;
+    UINT16 major, minor, patch;
+
+    infosize = GetFileVersionInfoSizeW(L"amd_ags_x64.dll", NULL);
+    if (!infosize)
+    {
+        WARN("Unable to determine desired version of amd_ags_x64.dll.\n");
+        goto done;
+    }
+
+    if (!(infobuf = heap_alloc(infosize)))
+    {
+        WARN("Failed to allocate memory.\n");
+        goto done;
+    }
+
+    if (!GetFileVersionInfoW(L"amd_ags_x64.dll", 0, infosize, infobuf))
+    {
+        WARN("Unable to determine desired version of amd_ags_x64.dll.\n");
+        goto done;
+    }
+
+    if (!VerQueryValueW(infobuf, L"\\", &val, &vallen) || (vallen != sizeof(VS_FIXEDFILEINFO)))
+    {
+        WARN("Unable to determine desired version of amd_ags_x64.dll.\n");
+        goto done;
+    }
+
+    info = val;
+    major = info->dwFileVersionMS >> 16;
+    minor = info->dwFileVersionMS;
+    patch = info->dwFileVersionLS >> 16;
+    TRACE("Found amd_ags_x64.dll v%d.%d.%d\n", major, minor, patch);
+
+    for (i = 0; i < ARRAY_SIZE(amd_ags_versions); i++)
+    {
+        if ((major == amd_ags_versions[i].major) &&
+            (minor == amd_ags_versions[i].minor) &&
+            (patch == amd_ags_versions[i].patch))
+        {
+            ret = i;
+            break;
+        }
+    }
+
+done:
+    heap_free(infobuf);
+    TRACE("Using AGS v%d.%d.%d interface\n",
+          amd_ags_versions[ret].major, amd_ags_versions[ret].minor, amd_ags_versions[ret].patch);
+    return ret;
+}
+
 static AGSReturnCode init_ags_context(AGSContext *context)
 {
     AGSReturnCode ret;
     unsigned int i, j;
 
-    // TODO: version check
-    context->version = AMD_AGS_VERSION_5_1_1;
+    context->version = determine_ags_version();
     context->device_count = 0;
     context->devices = NULL;
     context->properties = NULL;
From 161926d7c122878231bc320a7ee7a2396634cd97 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 24 Jul 2018 13:33:15 -0500
Subject: [PATCH] wine.inf: Set amd_ags_x64 to built-in for Wolfenstein 2

---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 543da3bdbb1..115400f818d 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -3999,6 +3999,7 @@ HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16426%\Steam\steamcl
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 ;;Likely want *80 and *90 too, but those require removing Wine's manifest files.
 HKCU,Software\Wine\DllOverrides,"atl100",0x2,"native,builtin"
 HKCU,Software\Wine\DllOverrides,"msvcp100",0x2,"native,builtin"

From c71b813d33ec2ca21ae91467e3da976b8ea1b2ac Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Fri, 31 Jul 2020 15:33:57 -0700
Subject: [PATCH] wine.inf: Set amd_ags_x64 to built-in for Red Dead Redemption
 2

---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index f474157a4d3..a66b740442c 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4007,6 +4007,7 @@ HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steam
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
 HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
+HKCU,Software\Wine\AppDefaults\RDR2.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 ;;Likely want *80 and *90 too, but those require removing Wine's manifest files.
 HKCU,Software\Wine\DllOverrides,"atl100",0x2,"native,builtin"
 HKCU,Software\Wine\DllOverrides,"msvcp100",0x2,"native,builtin"
From 3980ab91bb5cf975eacbba60f68c0d96af2da74b Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 20:21:29 +0300
Subject: [PATCH] amd_ags_x64: Don't use ordinals in spec file.

For FH4.
---
 dlls/amd_ags_x64/amd_ags_x64.spec | 58 +++++++++++++++----------------
 1 file changed, 29 insertions(+), 29 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index a302d2fc657..c571dac2184 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -1,29 +1,29 @@
-1 stdcall agsDeInit(ptr)
-2 stub agsDriverExtensionsDX11_BeginUAVOverlap
-3 stub agsDriverExtensionsDX11_CreateBuffer
-4 stub agsDriverExtensionsDX11_CreateTexture1D
-5 stub agsDriverExtensionsDX11_CreateTexture2D
-6 stub agsDriverExtensionsDX11_CreateTexture3D
-7 stub agsDriverExtensionsDX11_DeInit
-8 stub agsDriverExtensionsDX11_EndUAVOverlap
-9 stub agsDriverExtensionsDX11_GetMaxClipRects
-10 stub agsDriverExtensionsDX11_IASetPrimitiveTopology
-11 stub agsDriverExtensionsDX11_Init
-12 stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect
-13 stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect
-14 stub agsDriverExtensionsDX11_MultiDrawInstancedIndirect
-15 stub agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect
-16 stub agsDriverExtensionsDX11_NotifyResourceBeginAllAccess
-17 stub agsDriverExtensionsDX11_NotifyResourceEndAllAccess
-18 stub agsDriverExtensionsDX11_NotifyResourceEndWrites
-19 stub agsDriverExtensionsDX11_NumPendingAsyncCompileJobs
-20 stub agsDriverExtensionsDX11_SetClipRects
-21 stub agsDriverExtensionsDX11_SetDepthBounds
-22 stub agsDriverExtensionsDX11_SetDiskShaderCacheEnabled
-23 stub agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
-24 stub agsDriverExtensionsDX11_SetViewBroadcastMasks
-25 stub agsDriverExtensionsDX12_DeInit
-26 stub agsDriverExtensionsDX12_Init
-27 stdcall agsGetCrossfireGPUCount(ptr ptr)
-28 stdcall agsInit(ptr ptr ptr)
-29 stub agsSetDisplayMode
+@ stdcall agsDeInit(ptr)
+@ stub agsDriverExtensionsDX11_BeginUAVOverlap
+@ stub agsDriverExtensionsDX11_CreateBuffer
+@ stub agsDriverExtensionsDX11_CreateTexture1D
+@ stub agsDriverExtensionsDX11_CreateTexture2D
+@ stub agsDriverExtensionsDX11_CreateTexture3D
+@ stub agsDriverExtensionsDX11_DeInit
+@ stub agsDriverExtensionsDX11_EndUAVOverlap
+@ stub agsDriverExtensionsDX11_GetMaxClipRects
+@ stub agsDriverExtensionsDX11_IASetPrimitiveTopology
+@ stub agsDriverExtensionsDX11_Init
+@ stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect
+@ stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect
+@ stub agsDriverExtensionsDX11_MultiDrawInstancedIndirect
+@ stub agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect
+@ stub agsDriverExtensionsDX11_NotifyResourceBeginAllAccess
+@ stub agsDriverExtensionsDX11_NotifyResourceEndAllAccess
+@ stub agsDriverExtensionsDX11_NotifyResourceEndWrites
+@ stub agsDriverExtensionsDX11_NumPendingAsyncCompileJobs
+@ stub agsDriverExtensionsDX11_SetClipRects
+@ stub agsDriverExtensionsDX11_SetDepthBounds
+@ stub agsDriverExtensionsDX11_SetDiskShaderCacheEnabled
+@ stub agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
+@ stub agsDriverExtensionsDX11_SetViewBroadcastMasks
+@ stub agsDriverExtensionsDX12_DeInit
+@ stub agsDriverExtensionsDX12_Init
+@ stdcall agsGetCrossfireGPUCount(ptr ptr)
+@ stdcall agsInit(ptr ptr ptr)
+@ stub agsSetDisplayMode
From b4f2009bb93926cc8f4144c7da950fbd94b7d36b Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 20:07:28 +0300
Subject: [PATCH] amd_ags_x64: Add more stubs to spec file.

For FH4.
---
 dlls/amd_ags_x64/amd_ags_x64.spec | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index c571dac2184..f483cc6380b 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -1,10 +1,15 @@
 @ stdcall agsDeInit(ptr)
+@ stub agsCheckDriverVersion
 @ stub agsDriverExtensionsDX11_BeginUAVOverlap
 @ stub agsDriverExtensionsDX11_CreateBuffer
+@ stub agsDriverExtensionsDX11_CreateDevice
+@ stub agsDriverExtensionsDX11_CreateFromDevice
 @ stub agsDriverExtensionsDX11_CreateTexture1D
 @ stub agsDriverExtensionsDX11_CreateTexture2D
 @ stub agsDriverExtensionsDX11_CreateTexture3D
 @ stub agsDriverExtensionsDX11_DeInit
+@ stub agsDriverExtensionsDX11_Destroy
+@ stub agsDriverExtensionsDX11_DestroyDevice
 @ stub agsDriverExtensionsDX11_EndUAVOverlap
 @ stub agsDriverExtensionsDX11_GetMaxClipRects
 @ stub agsDriverExtensionsDX11_IASetPrimitiveTopology
@@ -22,8 +27,16 @@
 @ stub agsDriverExtensionsDX11_SetDiskShaderCacheEnabled
 @ stub agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
 @ stub agsDriverExtensionsDX11_SetViewBroadcastMasks
+@ stub agsDriverExtensionsDX11_WriteBreadcrumb
+@ stub agsDriverExtensionsDX12_CreateDevice
+@ stub agsDriverExtensionsDX12_CreateFromDevice
 @ stub agsDriverExtensionsDX12_DeInit
+@ stub agsDriverExtensionsDX12_Destroy
+@ stub agsDriverExtensionsDX12_DestroyDevice
 @ stub agsDriverExtensionsDX12_Init
+@ stub agsDriverExtensionsDX12_PopMarker
+@ stub agsDriverExtensionsDX12_PushMarker
+@ stub agsDriverExtensionsDX12_SetMarker
 @ stdcall agsGetCrossfireGPUCount(ptr ptr)
 @ stdcall agsInit(ptr ptr ptr)
 @ stub agsSetDisplayMode
From 51848a361897a35c6cd657b786f127883c294b9f Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 20:30:22 +0300
Subject: [PATCH] amd_ags_x64: Add partial stub for agsCheckDriverVersion().

For FH4.
---
 dlls/amd_ags_x64/amd_ags_x64.spec   | 2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 7 +++++++
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index f483cc6380b..6806b145751 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -1,5 +1,5 @@
 @ stdcall agsDeInit(ptr)
-@ stub agsCheckDriverVersion
+@ stdcall agsCheckDriverVersion(ptr long)
 @ stub agsDriverExtensionsDX11_BeginUAVOverlap
 @ stub agsDriverExtensionsDX11_CreateBuffer
 @ stub agsDriverExtensionsDX11_CreateDevice
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 49fc7ab7403..6e2c22c80d9 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -356,6 +356,13 @@ AGSReturnCode WINAPI agsGetCrossfireGPUCount(AGSContext *context, int *gpu_count
     return AGS_SUCCESS;
 }
 
+AGSDriverVersionResult WINAPI agsCheckDriverVersion(const char* version_reported, unsigned int version_required)
+{
+    FIXME("version_reported %s, version_required %d semi-stub.\n", debugstr_a(version_reported), version_required);
+
+    return AGS_SOFTWAREVERSIONCHECK_OK;
+}
+
 BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p.\n", instance, reason, reserved);
From 9dff4b41f450f6182a0d567e6bd296cb8cef450c Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 20:35:31 +0300
Subject: [PATCH] amd_ags_x64: Implement
 agsDriverExtensionsDX12_CreateDevice().

For FH4.
---
 dlls/amd_ags_x64/amd_ags_x64.spec   |  2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 43 +++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index 6806b145751..7551a9346d8 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -28,7 +28,7 @@
 @ stub agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
 @ stub agsDriverExtensionsDX11_SetViewBroadcastMasks
 @ stub agsDriverExtensionsDX11_WriteBreadcrumb
-@ stub agsDriverExtensionsDX12_CreateDevice
+@ stdcall agsDriverExtensionsDX12_CreateDevice(ptr ptr ptr ptr)
 @ stub agsDriverExtensionsDX12_CreateFromDevice
 @ stub agsDriverExtensionsDX12_DeInit
 @ stub agsDriverExtensionsDX12_Destroy
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 6e2c22c80d9..6f40a4c509c 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -52,6 +52,21 @@ struct AGSContext
     VkPhysicalDeviceMemoryProperties *memory_properties;
 };
 
+static HMODULE hd3d12;
+static typeof(D3D12CreateDevice) *pD3D12CreateDevice;
+
+static BOOL load_d3d12_functions(void)
+{
+    if (hd3d12)
+        return TRUE;
+
+    if (!(hd3d12 = LoadLibraryA("d3d12.dll")))
+        return FALSE;
+
+    pD3D12CreateDevice = (void *)GetProcAddress(hd3d12, "D3D12CreateDevice");
+    return TRUE;
+}
+
 static AGSReturnCode vk_get_physical_device_properties(unsigned int *out_count,
         VkPhysicalDeviceProperties **out, VkPhysicalDeviceMemoryProperties **out_memory)
 {
@@ -356,6 +371,34 @@ AGSReturnCode WINAPI agsGetCrossfireGPUCount(AGSContext *context, int *gpu_count
     return AGS_SUCCESS;
 }
 
+AGSReturnCode WINAPI agsDriverExtensionsDX12_CreateDevice(AGSContext *context,
+        const AGSDX12DeviceCreationParams *creation_params, const AGSDX12ExtensionParams *extension_params,
+        AGSDX12ReturnedParams *returned_params)
+{
+    HRESULT hr;
+
+    TRACE("feature level %#x, app %s, engine %s %#x %#x.\n", creation_params->FeatureLevel, debugstr_w(extension_params->pAppName),
+            debugstr_w(extension_params->pEngineName), extension_params->appVersion, extension_params->engineVersion);
+
+    if (!load_d3d12_functions())
+    {
+        ERR("Could not load d3d12.dll.\n");
+        return AGS_MISSING_D3D_DLL;
+    }
+
+    memset(returned_params, 0, sizeof(*returned_params));
+    if (FAILED(hr = pD3D12CreateDevice((IUnknown *)creation_params->pAdapter, creation_params->FeatureLevel,
+            &creation_params->iid, (void **)&returned_params->pDevice)))
+    {
+        ERR("D3D12CreateDevice failed, hr %#x.\n", hr);
+        return AGS_DX_FAILURE;
+    }
+
+    TRACE("Created d3d12 device %p.\n", returned_params->pDevice);
+
+    return AGS_SUCCESS;
+}
+
 AGSDriverVersionResult WINAPI agsCheckDriverVersion(const char* version_reported, unsigned int version_required)
 {
     FIXME("version_reported %s, version_required %d semi-stub.\n", debugstr_a(version_reported), version_required);
From 5343e10e71b0e21d1510da31386692faf290cd0d Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 17:29:31 +0300
Subject: [PATCH] amd_ags_x64: Fix devices array layout.

For FH4.

And refactor multiple layout device structure handling on the way
to avoid more switches in future patches.
---
 dlls/amd_ags_x64/amd_ags.h          |  10 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 152 +++++++++++++++-------------
 2 files changed, 83 insertions(+), 79 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index 30f3735915c..47ed5b91a14 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -498,13 +498,7 @@ typedef struct AGSDeviceInfo_541
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
 } AGSDeviceInfo_541;
 
-typedef union AGSDeviceInfo
-{
-    AGSDeviceInfo_511 agsDeviceInfo511;
-    AGSDeviceInfo_520 agsDeviceInfo520;
-    AGSDeviceInfo_540 agsDeviceInfo540;
-    AGSDeviceInfo_541 agsDeviceInfo541;
-} AGSDeviceInfo;
+struct AGSDeviceInfo;
 
 /// \defgroup general General API functions
 /// API for initialization, cleanup, HDR display modes and Crossfire GPU count
@@ -545,7 +539,7 @@ typedef struct AGSGPUInfo
     const char*             radeonSoftwareVersion;          ///< The Radeon Software Version
 
     int                     numDevices;                     ///< Number of GPUs in the system
-    AGSDeviceInfo*          devices;                        ///< List of GPUs in the system
+    struct AGSDeviceInfo*   devices;                        ///< List of GPUs in the system
 } AGSGPUInfo;
 
 /// The struct to specify the display settings to the driver.
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 6f40a4c509c..6c71db021dc 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -1,5 +1,6 @@
 #include <stdarg.h>
 #include <stdbool.h>
+#include <assert.h>
 
 #include "windef.h"
 #include "winbase.h"
@@ -27,27 +28,74 @@ enum amd_ags_version
     AMD_AGS_VERSION_COUNT
 };
 
-struct
+static const struct
 {
     int major;
     int minor;
     int patch;
+    unsigned int device_size;
 }
-static const amd_ags_versions[AMD_AGS_VERSION_COUNT] =
+amd_ags_info[AMD_AGS_VERSION_COUNT] =
 {
-    {5, 1, 1},
-    {5, 2, 0},
-    {5, 2, 1},
-    {5, 3, 0},
-    {5, 4, 0},
-    {5, 4, 1},
+    {5, 1, 1, sizeof(AGSDeviceInfo_511)},
+    {5, 2, 0, sizeof(AGSDeviceInfo_520)},
+    {5, 2, 1, sizeof(AGSDeviceInfo_520)},
+    {5, 3, 0, sizeof(AGSDeviceInfo_520)},
+    {5, 4, 0, sizeof(AGSDeviceInfo_540)},
+    {5, 4, 1, sizeof(AGSDeviceInfo_541)},
 };
 
+#define DEF_FIELD(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
+        offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
+        offsetof(AGSDeviceInfo_541, name)}}
+#define DEF_FIELD_520_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
+        offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), -1, \
+        -1}}
+#define DEF_FIELD_540_UP(name) {DEVICE_FIELD_##name, {-1, -1, \
+        -1, -1, offsetof(AGSDeviceInfo_540, name), \
+        offsetof(AGSDeviceInfo_541, name)}}
+
+#define DEVICE_FIELD_adapterString 0
+#define DEVICE_FIELD_architectureVersion 1
+#define DEVICE_FIELD_asicFamily 2
+#define DEVICE_FIELD_vendorId 3
+#define DEVICE_FIELD_deviceId 4
+#define DEVICE_FIELD_isPrimaryDevice 5
+#define DEVICE_FIELD_localMemoryInBytes 6
+
+static const struct
+{
+    unsigned int field_index;
+    int offset[AMD_AGS_VERSION_COUNT];
+}
+device_struct_fields[] =
+{
+    DEF_FIELD(adapterString),
+    DEF_FIELD_520_BELOW(architectureVersion),
+    DEF_FIELD_540_UP(asicFamily),
+    DEF_FIELD(vendorId),
+    DEF_FIELD(deviceId),
+    DEF_FIELD(isPrimaryDevice),
+    DEF_FIELD(localMemoryInBytes),
+};
+
+#undef DEF_FIELD
+
+#define GET_DEVICE_FIELD_ADDR(device, name, type, version) \
+        (device_struct_fields[DEVICE_FIELD_##name].offset[version] == -1 ? NULL \
+        : (type *)((BYTE *)device + device_struct_fields[DEVICE_FIELD_##name].offset[version]))
+
+#define SET_DEVICE_FIELD(device, name, type, version, value) { \
+        type *addr; \
+        if ((addr = GET_DEVICE_FIELD_ADDR(device, name, type, version))) \
+            *addr = value; \
+    }
+
 struct AGSContext
 {
     enum amd_ags_version version;
     unsigned int device_count;
-    AGSDeviceInfo *devices;
+    struct AGSDeviceInfo *devices;
     VkPhysicalDeviceProperties *properties;
     VkPhysicalDeviceMemoryProperties *memory_properties;
 };
@@ -190,11 +238,11 @@ static enum amd_ags_version determine_ags_version(void)
     patch = info->dwFileVersionLS >> 16;
     TRACE("Found amd_ags_x64.dll v%d.%d.%d\n", major, minor, patch);
 
-    for (i = 0; i < ARRAY_SIZE(amd_ags_versions); i++)
+    for (i = 0; i < ARRAY_SIZE(amd_ags_info); i++)
     {
-        if ((major == amd_ags_versions[i].major) &&
-            (minor == amd_ags_versions[i].minor) &&
-            (patch == amd_ags_versions[i].patch))
+        if ((major == amd_ags_info[i].major) &&
+            (minor == amd_ags_info[i].minor) &&
+            (patch == amd_ags_info[i].patch))
         {
             ret = i;
             break;
@@ -204,7 +252,7 @@ static enum amd_ags_version determine_ags_version(void)
 done:
     heap_free(infobuf);
     TRACE("Using AGS v%d.%d.%d interface\n",
-          amd_ags_versions[ret].major, amd_ags_versions[ret].minor, amd_ags_versions[ret].patch);
+          amd_ags_info[ret].major, amd_ags_info[ret].minor, amd_ags_info[ret].patch);
     return ret;
 }
 
@@ -212,6 +260,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
 {
     AGSReturnCode ret;
     unsigned int i, j;
+    BYTE *device;
 
     context->version = determine_ags_version();
     context->device_count = 0;
@@ -223,7 +272,9 @@ static AGSReturnCode init_ags_context(AGSContext *context)
     if (ret != AGS_SUCCESS || !context->device_count)
         return ret;
 
-    if (!(context->devices = heap_calloc(context->device_count, sizeof(*context->devices))))
+    assert(context->version < AMD_AGS_VERSION_COUNT);
+
+    if (!(context->devices = heap_calloc(context->device_count, amd_ags_info[context->version].device_size)))
     {
         WARN("Failed to allocate memory.\n");
         heap_free(context->properties);
@@ -231,11 +282,11 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         return AGS_OUT_OF_MEMORY;
     }
 
+    device = (BYTE *)context->devices;
     for (i = 0; i < context->device_count; ++i)
     {
         const VkPhysicalDeviceProperties *vk_properties = &context->properties[i];
         const VkPhysicalDeviceMemoryProperties *vk_memory_properties = &context->memory_properties[i];
-        AGSDeviceInfo *device = &context->devices[i];
         VkDeviceSize local_memory_size = 0;
 
         for (j = 0; j < vk_memory_properties->memoryHeapCount; j++)
@@ -248,60 +299,19 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         }
         TRACE("reporting local memory size 0x%s bytes\n", wine_dbgstr_longlong(local_memory_size));
 
-        switch (context->version)
+        SET_DEVICE_FIELD(device, adapterString, const char *, context->version, vk_properties->deviceName);
+        SET_DEVICE_FIELD(device, vendorId, int, context->version, vk_properties->vendorID);
+        SET_DEVICE_FIELD(device, deviceId, int, context->version, vk_properties->deviceID);
+        if (vk_properties->vendorID == 0x1002)
         {
-        case AMD_AGS_VERSION_5_1_1:
-            device->agsDeviceInfo511.adapterString = vk_properties->deviceName;
-            device->agsDeviceInfo511.vendorId = vk_properties->vendorID;
-            device->agsDeviceInfo511.deviceId = vk_properties->deviceID;
-            device->agsDeviceInfo511.localMemoryInBytes = local_memory_size;
-
-            if (device->agsDeviceInfo511.vendorId == 0x1002)
-                device->agsDeviceInfo511.architectureVersion = ArchitectureVersion_GCN;
-
-            if (!i)
-                device->agsDeviceInfo511.isPrimaryDevice = 1;
-            break;
-        case AMD_AGS_VERSION_5_2_0:
-        case AMD_AGS_VERSION_5_2_1:
-        case AMD_AGS_VERSION_5_3_0:
-            device->agsDeviceInfo520.adapterString = vk_properties->deviceName;
-            device->agsDeviceInfo520.vendorId = vk_properties->vendorID;
-            device->agsDeviceInfo520.deviceId = vk_properties->deviceID;
-            device->agsDeviceInfo520.localMemoryInBytes = local_memory_size;
-
-            if (device->agsDeviceInfo520.vendorId == 0x1002)
-                device->agsDeviceInfo520.architectureVersion = ArchitectureVersion_GCN;
-
-            if (!i)
-                device->agsDeviceInfo520.isPrimaryDevice = 1;
-            break;
-        case AMD_AGS_VERSION_5_4_0:
-            device->agsDeviceInfo540.adapterString = vk_properties->deviceName;
-            device->agsDeviceInfo540.vendorId = vk_properties->vendorID;
-            device->agsDeviceInfo540.deviceId = vk_properties->deviceID;
-            device->agsDeviceInfo540.localMemoryInBytes = local_memory_size;
-
-            if (device->agsDeviceInfo540.vendorId == 0x1002)
-                device->agsDeviceInfo540.asicFamily = AsicFamily_GCN4;
-
-            if (!i)
-                device->agsDeviceInfo540.isPrimaryDevice = 1;
-            break;
-        case AMD_AGS_VERSION_5_4_1:
-        default:
-            device->agsDeviceInfo541.adapterString = vk_properties->deviceName;
-            device->agsDeviceInfo541.vendorId = vk_properties->vendorID;
-            device->agsDeviceInfo541.deviceId = vk_properties->deviceID;
-            device->agsDeviceInfo541.localMemoryInBytes = local_memory_size;
-
-            if (device->agsDeviceInfo541.vendorId == 0x1002)
-                device->agsDeviceInfo541.asicFamily = AsicFamily_GCN4;
-
-            if (!i)
-                device->agsDeviceInfo541.isPrimaryDevice = 1;
-            break;
+            SET_DEVICE_FIELD(device, architectureVersion, ArchitectureVersion, context->version, ArchitectureVersion_GCN);
+            SET_DEVICE_FIELD(device, asicFamily, AsicFamily, context->version, AsicFamily_GCN4);
         }
+        SET_DEVICE_FIELD(device, localMemoryInBytes, ULONG64, context->version, local_memory_size);
+        if (!i)
+            SET_DEVICE_FIELD(device, isPrimaryDevice, int, context->version, 1);
+
+        device += amd_ags_info[context->version].device_size;
     }
 
     return AGS_SUCCESS;
@@ -330,9 +340,9 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     }
 
     memset(gpu_info, 0, sizeof(*gpu_info));
-    gpu_info->agsVersionMajor = amd_ags_versions[object->version].major;
-    gpu_info->agsVersionMinor = amd_ags_versions[object->version].minor;
-    gpu_info->agsVersionPatch = amd_ags_versions[object->version].patch;
+    gpu_info->agsVersionMajor = amd_ags_info[object->version].major;
+    gpu_info->agsVersionMinor = amd_ags_info[object->version].minor;
+    gpu_info->agsVersionPatch = amd_ags_info[object->version].patch;
     gpu_info->driverVersion = "20.20.2-180516a-328911C-RadeonSoftwareAdrenalin";
     gpu_info->radeonSoftwareVersion  = "20.20.2";
     gpu_info->numDevices = object->device_count;
From a4082f0890971011e11102dcb424a68ca6e1f035 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 19:33:36 +0300
Subject: [PATCH] amd_ags_x64: Fill display info in AGS context.

For FH4.
---
 dlls/amd_ags_x64/Makefile.in        |   2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 116 ++++++++++++++++++++++++++++
 2 files changed, 117 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/Makefile.in b/dlls/amd_ags_x64/Makefile.in
index ec13c055a26..4bc7505f509 100644
--- a/dlls/amd_ags_x64/Makefile.in
+++ b/dlls/amd_ags_x64/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = amd_ags_x64.dll
-IMPORTS   = version vulkan-1
+IMPORTS   = version vulkan-1 user32
 IMPORTLIB = amd_ags_x64
 
 EXTRADLLFLAGS = -mno-cygwin
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 6c71db021dc..c0a654939dd 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -62,6 +62,8 @@ amd_ags_info[AMD_AGS_VERSION_COUNT] =
 #define DEVICE_FIELD_deviceId 4
 #define DEVICE_FIELD_isPrimaryDevice 5
 #define DEVICE_FIELD_localMemoryInBytes 6
+#define DEVICE_FIELD_numDisplays 7
+#define DEVICE_FIELD_displays 8
 
 static const struct
 {
@@ -77,6 +79,8 @@ device_struct_fields[] =
     DEF_FIELD(deviceId),
     DEF_FIELD(isPrimaryDevice),
     DEF_FIELD(localMemoryInBytes),
+    DEF_FIELD(numDisplays),
+    DEF_FIELD(displays),
 };
 
 #undef DEF_FIELD
@@ -256,6 +260,105 @@ static enum amd_ags_version determine_ags_version(void)
     return ret;
 }
 
+struct monitor_enum_context
+{
+    const char *adapter_name;
+    AGSDisplayInfo **ret_displays;
+    int *ret_display_count;
+};
+
+static BOOL WINAPI monitor_enum_proc(HMONITOR hmonitor, HDC hdc, RECT *rect, LPARAM context)
+{
+    struct monitor_enum_context *c = (struct monitor_enum_context *)context;
+    MONITORINFOEXA monitor_info;
+    AGSDisplayInfo *new_alloc;
+    DISPLAY_DEVICEA device;
+    AGSDisplayInfo *info;
+    unsigned int i, mode;
+    DEVMODEA dev_mode;
+
+
+    monitor_info.cbSize = sizeof(monitor_info);
+    GetMonitorInfoA(hmonitor, (MONITORINFO *)&monitor_info);
+
+    device.cb = sizeof(device);
+    i = 0;
+    while (EnumDisplayDevicesA(NULL, i, &device, 0))
+    {
+        ++i;
+        if (strcmp(device.DeviceString, c->adapter_name) || strcmp(device.DeviceName, monitor_info.szDevice))
+            continue;
+
+        if (*c->ret_display_count)
+        {
+            if (!(new_alloc = heap_realloc(*c->ret_displays, sizeof(*new_alloc) * (*c->ret_display_count + 1))))
+            {
+                ERR("No memory.");
+                return FALSE;
+            }
+            *c->ret_displays = new_alloc;
+        }
+        else if (!(*c->ret_displays = heap_alloc(sizeof(**c->ret_displays))))
+        {
+            ERR("No memory.");
+            return FALSE;
+        }
+        info = &(*c->ret_displays)[*c->ret_display_count];
+        memset(info, 0, sizeof(*info));
+        strcpy(info->displayDeviceName, device.DeviceName);
+        if (EnumDisplayDevicesA(info->displayDeviceName, 0, &device, 0))
+        {
+            strcpy(info->name, device.DeviceString);
+        }
+        else
+        {
+            ERR("Could not get monitor name for device %s.\n", debugstr_a(info->displayDeviceName));
+            strcpy(info->name, "Unknown");
+        }
+        if (monitor_info.dwFlags & MONITORINFOF_PRIMARY)
+            info->displayFlags |= AGS_DISPLAYFLAG_PRIMARY_DISPLAY;
+
+        mode = 0;
+        while (EnumDisplaySettingsExA(monitor_info.szDevice, mode, &dev_mode, EDS_RAWMODE))
+        {
+            ++mode;
+            if (dev_mode.dmPelsWidth > info->maxResolutionX)
+                info->maxResolutionX = dev_mode.dmPelsWidth;
+            if (dev_mode.dmPelsHeight > info->maxResolutionY)
+                info->maxResolutionY = dev_mode.dmPelsHeight;
+            if (dev_mode.dmDisplayFrequency > info->maxRefreshRate)
+                info->maxRefreshRate = dev_mode.dmDisplayFrequency;
+        }
+
+        info->currentResolution.offsetX = monitor_info.rcMonitor.left;
+        info->currentResolution.offsetY = monitor_info.rcMonitor.top;
+        info->currentResolution.width = monitor_info.rcMonitor.right - monitor_info.rcMonitor.left;
+        info->currentResolution.height = monitor_info.rcMonitor.bottom - monitor_info.rcMonitor.top;
+        info->visibleResolution = info->currentResolution;
+
+        if (EnumDisplaySettingsExA(monitor_info.szDevice, ENUM_CURRENT_SETTINGS, &dev_mode, EDS_RAWMODE))
+            info->currentRefreshRate = dev_mode.dmDisplayFrequency;
+        else
+            ERR("Could not get current display settings.\n");
+        ++*c->ret_display_count;
+
+        TRACE("Added display %s for %s.\n", debugstr_a(monitor_info.szDevice), debugstr_a(c->adapter_name));
+    }
+
+    return TRUE;
+}
+
+static void init_device_displays(const char *adapter_name, AGSDisplayInfo **ret_displays, int *ret_display_count)
+{
+    struct monitor_enum_context context;
+
+    context.adapter_name = adapter_name;
+    context.ret_displays = ret_displays;
+    context.ret_display_count = ret_display_count;
+
+    EnumDisplayMonitors(NULL, NULL, monitor_enum_proc, (LPARAM)&context);
+}
+
 static AGSReturnCode init_ags_context(AGSContext *context)
 {
     AGSReturnCode ret;
@@ -311,6 +414,10 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         if (!i)
             SET_DEVICE_FIELD(device, isPrimaryDevice, int, context->version, 1);
 
+        init_device_displays(vk_properties->deviceName,
+                GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo *, context->version),
+                GET_DEVICE_FIELD_ADDR(device, numDisplays, int, context->version));
+
         device += amd_ags_info[context->version].device_size;
     }
 
@@ -357,12 +464,21 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
 
 AGSReturnCode WINAPI agsDeInit(AGSContext *context)
 {
+    unsigned int i;
+    BYTE *device;
+
     TRACE("context %p.\n", context);
 
     if (context)
     {
         heap_free(context->memory_properties);
         heap_free(context->properties);
+        device = (BYTE *)context->devices;
+        for (i = 0; i < context->device_count; ++i)
+        {
+            heap_free(GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo *, context->version));
+            device += amd_ags_info[context->version].device_size;
+        }
         heap_free(context->devices);
         heap_free(context);
     }
From c175c21b2f0cd183a4d729a4fdcf67a403f4645f Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 16 Apr 2021 20:03:12 +0300
Subject: [PATCH] amd_ags_x64: Bump driver version.

For FH4.
---
 dlls/amd_ags_x64/amd_ags_x64_main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index c0a654939dd..20bf4aa3434 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -450,8 +450,8 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     gpu_info->agsVersionMajor = amd_ags_info[object->version].major;
     gpu_info->agsVersionMinor = amd_ags_info[object->version].minor;
     gpu_info->agsVersionPatch = amd_ags_info[object->version].patch;
-    gpu_info->driverVersion = "20.20.2-180516a-328911C-RadeonSoftwareAdrenalin";
-    gpu_info->radeonSoftwareVersion  = "20.20.2";
+    gpu_info->driverVersion = "20.50.03.05-210326a-365573E-RadeonSoftwareAdrenalin2020";
+    gpu_info->radeonSoftwareVersion  = "21.3.2";
     gpu_info->numDevices = object->device_count;
     gpu_info->devices = object->devices;
 
From d6ef1e96438b3700c18fcbb3bfcb66ee3c223535 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Sat, 8 May 2021 04:39:30 +0100
Subject: [PATCH] amd_ags_x64: Implement agsDriverExtensionsDX12_DestroyDevice

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/amd_ags_x64/amd_ags_x64.spec   |  2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 15 +++++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index 7551a9346d8..ae825462f28 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -32,7 +32,7 @@
 @ stub agsDriverExtensionsDX12_CreateFromDevice
 @ stub agsDriverExtensionsDX12_DeInit
 @ stub agsDriverExtensionsDX12_Destroy
-@ stub agsDriverExtensionsDX12_DestroyDevice
+@ stdcall agsDriverExtensionsDX12_DestroyDevice(ptr ptr ptr)
 @ stub agsDriverExtensionsDX12_Init
 @ stub agsDriverExtensionsDX12_PopMarker
 @ stub agsDriverExtensionsDX12_PushMarker
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 1a425d11514..1d4eb74e502 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -9,6 +9,7 @@

 #include "wine/vulkan.h"

+#define COBJMACROS
 #include "d3d11.h"
 #include "d3d12.h"

@@ -537,6 +538,20 @@ AGSReturnCode WINAPI agsDriverExtensionsDX12_CreateDevice(AGSContext *context,
     return AGS_SUCCESS;
 }

+AGSReturnCode WINAPI agsDriverExtensionsDX12_DestroyDevice(AGSContext* context, ID3D12Device* device, unsigned int* device_refs)
+{
+    ULONG ref_count;
+
+    if (!device)
+        return AGS_SUCCESS;
+
+    ref_count = ID3D12Device_Release(device);
+    if (device_refs)
+        *device_refs = (unsigned int)ref_count;
+
+    return AGS_SUCCESS;
+}
+
 AGSDriverVersionResult WINAPI agsCheckDriverVersion(const char* version_reported, unsigned int version_required)
 {
     FIXME("version_reported %s, version_required %d semi-stub.\n", debugstr_a(version_reported), version_required);
From 627d913258288345c16c1fc45f1134c04594c3b6 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Sat, 8 May 2021 04:41:40 +0100
Subject: [PATCH] amd_ags_x64: Implement AGS 5.4.2

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/amd_ags_x64/amd_ags.h          | 46 ++++++++++++++++++++++++++++-
 dlls/amd_ags_x64/amd_ags_x64_main.c |  8 +++--
 2 files changed, 50 insertions(+), 4 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index 47ed5b91a14..0656e3fbbb3 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -34,6 +34,13 @@
 /// \endinternal
 ///
 /// ---------------------------------------
+/// What's new in AGS 5.4.2 since version 5.4.1
+/// ---------------------------------------
+/// AGS 5.4.2 includes the following updates:
+/// * sharedMemoryInBytes has been reinstated.
+/// * Clock speed returned for APUs.
+///
+/// ---------------------------------------
 /// What's new in AGS 5.4.1 since version 5.4.0
 /// ---------------------------------------
 /// AGS 5.4.1 includes the following updates:
@@ -130,7 +137,7 @@

 #define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
 #define AMD_AGS_VERSION_MINOR 4             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version
+#define AMD_AGS_VERSION_PATCH 2             ///< AGS patch version

 #ifdef __cplusplus
 extern "C" {
@@ -498,6 +505,43 @@ typedef struct AGSDeviceInfo_541
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
 } AGSDeviceInfo_541;

+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo_542
+{
+    const char*                     adapterString;                  ///< The adapter name string
+    AsicFamily                      asicFamily;                     ///< Set to Unknown if not AMD hardware
+    int                             isAPU;                          ///< Whether or not this is an APU
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of compute units.
+    int                             numWGPs;                        ///< Number of RDNA Work Group Processors.  Only valid if ASIC is RDNA onwards.
+
+    int                             numROPs;                        ///< Number of ROPs
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    int                             memoryBandwidth;                ///< Memory bandwidth in MB/s
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN onwards. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    int                             isPrimaryDevice;                ///< Whether or not this is the primary adapter in the system. Not set on the WACK version.
+    unsigned long long              localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.
+    unsigned long long              sharedMemoryInBytes;            ///< The size of system memory available to the GPU in bytes.  It is important to factor this into your VRAM budget for APUs
+                                                                    ///< as the reported local memory will only be a small fraction of the total memory available to the GPU.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+} AGSDeviceInfo_542;
+
 struct AGSDeviceInfo;

 /// \defgroup general General API functions
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 1d4eb74e502..35de799430d 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -25,6 +25,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_3_0,
     AMD_AGS_VERSION_5_4_0,
     AMD_AGS_VERSION_5_4_1,
+    AMD_AGS_VERSION_5_4_2,

     AMD_AGS_VERSION_COUNT
 };
@@ -44,17 +45,18 @@ amd_ags_info[AMD_AGS_VERSION_COUNT] =
     {5, 3, 0, sizeof(AGSDeviceInfo_520)},
     {5, 4, 0, sizeof(AGSDeviceInfo_540)},
     {5, 4, 1, sizeof(AGSDeviceInfo_541)},
+    {5, 4, 2, sizeof(AGSDeviceInfo_542)},
 };

 #define DEF_FIELD(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name)}}
 #define DEF_FIELD_520_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), -1, \
-        -1}}
+        -1, -1}}
 #define DEF_FIELD_540_UP(name) {DEVICE_FIELD_##name, {-1, -1, \
         -1, -1, offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name)}}

 #define DEVICE_FIELD_adapterString 0
 #define DEVICE_FIELD_architectureVersion 1
From 4f14f287f3468b977e2978599e7ac81643b46ec6 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Sat, 8 May 2021 05:14:39 +0100
Subject: [PATCH] amd_ags_x64: Implement AGS 6.0.0

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/amd_ags_x64/amd_ags.h          | 409 +++++++++++++++++++++++-----
 dlls/amd_ags_x64/amd_ags_x64.spec   |   3 +
 dlls/amd_ags_x64/amd_ags_x64_main.c | 137 ++++++++--
 3 files changed, 468 insertions(+), 81 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index 0656e3fbbb3..af9c48c1dd5 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -34,6 +34,20 @@
 /// \endinternal
 ///
 /// ---------------------------------------
+/// What's new in AGS 6.0 since version 5.4.2
+/// ---------------------------------------
+/// AGS 6.0 includes the following updates:
+/// * DX12 ray tracing hit token for RDNA2 hardware.
+/// * Shader intrinsic that exposes ReadLaneAt in DX12.
+/// * Shader intrinsics that expose explicit float conversions in DX12.
+/// * Refactored and revised API to minimize user error.
+/// * Added agsGetVersionNumber.
+/// * Detection for external GPUs.
+/// * Detection of RDNA2 architecture.
+/// * Grouped the more established intrinsics together into per year support.
+/// * Function pointer typedefs for the API
+///
+/// ---------------------------------------
 /// What's new in AGS 5.4.2 since version 5.4.1
 /// ---------------------------------------
 /// AGS 5.4.2 includes the following updates:
@@ -128,16 +142,16 @@
 /// * Include the amd_ags.h header file from your source code.
 /// * Include the AGS hlsl files if you are using the shader intrinsics.
 /// * Declare a pointer to an AGSContext and make this available for all subsequent calls to AGS.
-/// * On game initialization, call \ref agsInit passing in the address of the context. On success, this function will return a valid context pointer.
+/// * On game initialization, call \ref agsInitialize passing in the address of the context. On success, this function will return a valid context pointer.
 ///
-/// Don't forget to cleanup AGS by calling \ref agsDeInit when the app exits, after the device has been destroyed.
+/// Don't forget to cleanup AGS by calling \ref agsDeInitialize when the app exits, after the device has been destroyed.

 #ifndef AMD_AGS_H
 #define AMD_AGS_H

-#define AMD_AGS_VERSION_MAJOR 5             ///< AGS major version
-#define AMD_AGS_VERSION_MINOR 4             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 2             ///< AGS patch version
+#define AMD_AGS_VERSION_MAJOR 6             ///< AGS major version
+#define AMD_AGS_VERSION_MINOR 0             ///< AGS minor version
+#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version

 #ifdef __cplusplus
 extern "C" {
@@ -151,14 +165,17 @@ extern "C" {
 #define AGS_UNSPECIFIED_VERSION 0xFFFFAD00                                                    ///< Use this to specify no version
 /// @}

-// Forward declaration of D3D11 types
+// Forward declaration of D3D and DXGI types
 struct IDXGIAdapter;
+struct IDXGISwapChain;
+struct DXGI_SWAP_CHAIN_DESC;
 enum D3D_DRIVER_TYPE;
 enum D3D_FEATURE_LEVEL;
-struct DXGI_SWAP_CHAIN_DESC;
+ enum D3D_PRIMITIVE_TOPOLOGY;
+
+// Forward declaration of D3D11 types
 struct ID3D11Device;
 struct ID3D11DeviceContext;
-struct IDXGISwapChain;
 struct ID3D11Resource;
 struct ID3D11Buffer;
 struct ID3D11Texture1D;
@@ -253,14 +270,6 @@ typedef enum AGSDriverExtensionDX12
 /// The space id for DirectX12 intrinsic support
 const unsigned int AGS_DX12_SHADER_INSTRINSICS_SPACE_ID = 0x7FFF0ADE; // 2147420894

-
-/// Additional topologies supported via extensions
-typedef enum AGSPrimitiveTopology
-{
-    AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,    ///< Quad list
-    AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9     ///< Screen rect list
-} AGSPrimitiveTopology;
-
 /// The display flags describing various properties of the display.
 typedef enum AGSDisplayFlags
 {
@@ -282,7 +291,7 @@ typedef enum AGSDisplaySettingsFlags

 /// @}

-typedef struct AGSContext AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInit
+typedef struct AGSContext AGSContext;  ///< All function calls in AGS require a pointer to a context. This is generated via \ref agsInitialize

 /// The rectangle struct used by AGS.
 typedef struct AGSRect
@@ -293,25 +302,64 @@ typedef struct AGSRect
     int height;     ///< Height of rectangle
 } AGSRect;

-/// The clip rectangle struct used by \ref agsDriverExtensionsDX11_SetClipRects
-typedef struct AGSClipRect
+/// The display info struct used to describe a display enumerated by AGS
+typedef struct AGSDisplayInfo_511
 {
-    /// The inclusion mode for the rect
-    enum
-    {
-        ClipRectIncluded = 0,   ///< Include the rect
-        ClipRectExcluded = 1    ///< Exclude the rect
-    }               mode; ; ///< Include/exclude rect region
-    AGSRect         rect; ///< The rect to include/exclude
-} AGSClipRect;
+    char                    name[ 256 ];                    ///< The name of the display
+    char                    displayDeviceName[ 32 ];        ///< The display device name, i.e. DISPLAY_DEVICE::DeviceName
+
+    unsigned int            displayFlags;                   ///< Bitfield of \ref AGSDisplayFlags
+
+    int                     maxResolutionX;                 ///< The maximum supported resolution of the unrotated display
+    int                     maxResolutionY;                 ///< The maximum supported resolution of the unrotated display
+    float                   maxRefreshRate;                 ///< The maximum supported refresh rate of the display
+
+    AGSRect                 currentResolution;              ///< The current resolution and position in the desktop, ignoring Eyefinity bezel compensation
+    AGSRect                 visibleResolution;              ///< The visible resolution and position. When Eyefinity bezel compensation is enabled this will
+                                                            ///< be the sub region in the Eyefinity single large surface (SLS)
+    float                   currentRefreshRate;             ///< The current refresh rate
+
+    int                     eyefinityGridCoordX;            ///< The X coordinate in the Eyefinity grid. -1 if not in an Eyefinity group
+    int                     eyefinityGridCoordY;            ///< The Y coordinate in the Eyefinity grid. -1 if not in an Eyefinity group
+
+    double                  chromaticityRedX;               ///< Red display primary X coord
+    double                  chromaticityRedY;               ///< Red display primary Y coord
+
+    double                  chromaticityGreenX;             ///< Green display primary X coord
+    double                  chromaticityGreenY;             ///< Green display primary Y coord
+
+    double                  chromaticityBlueX;              ///< Blue display primary X coord
+    double                  chromaticityBlueY;              ///< Blue display primary Y coord
+
+    double                  chromaticityWhitePointX;        ///< White point X coord
+    double                  chromaticityWhitePointY;        ///< White point Y coord
+
+    double                  screenDiffuseReflectance;       ///< Percentage expressed between 0 - 1
+    double                  screenSpecularReflectance;      ///< Percentage expressed between 0 - 1
+
+    double                  minLuminance;                   ///< The minimum luminance of the display in nits
+    double                  maxLuminance;                   ///< The maximum luminance of the display in nits
+    double                  avgLuminance;                   ///< The average luminance of the display in nits
+
+    int                     logicalDisplayIndex;            ///< The internally used index of this display
+    int                     adlAdapterIndex;                ///< The internally used ADL adapter index
+} AGSDisplayInfo_511;

 /// The display info struct used to describe a display enumerated by AGS
-typedef struct AGSDisplayInfo
+typedef struct AGSDisplayInfo_600
 {
     char                    name[ 256 ];                    ///< The name of the display
     char                    displayDeviceName[ 32 ];        ///< The display device name, i.e. DISPLAY_DEVICE::DeviceName

-    unsigned int            displayFlags;                   ///< Bitfield of \ref AGSDisplayFlags
+    unsigned int            isPrimaryDisplay : 1;           ///< Whether this display is marked as the primary display
+    unsigned int            HDR10 : 1;                      ///< HDR10 is supported on this display
+    unsigned int            dolbyVision : 1;                ///< Dolby Vision is supported on this display
+    unsigned int            freesync : 1;                   ///< Freesync is supported on this display
+    unsigned int            freesyncHDR : 1;                ///< Freesync HDR is supported on this display
+    unsigned int            eyefinityInGroup : 1;           ///< The display is part of the Eyefinity group
+    unsigned int            eyefinityPreferredDisplay : 1;  ///< The display is the preferred display in the Eyefinity group for displaying the UI
+    unsigned int            eyefinityInPortraitMode : 1;    ///< The display is in the Eyefinity group but in portrait mode
+    unsigned int            reservedPadding : 24;           ///< Reserved for future use

     int                     maxResolutionX;                 ///< The maximum supported resolution of the unrotated display
     int                     maxResolutionY;                 ///< The maximum supported resolution of the unrotated display
@@ -346,7 +394,8 @@ typedef struct AGSDisplayInfo

     int                     logicalDisplayIndex;            ///< The internally used index of this display
     int                     adlAdapterIndex;                ///< The internally used ADL adapter index
-} AGSDisplayInfo;
+    int                     reserved;                       ///< reserved field
+} AGSDisplayInfo_600;

 /// The architecture version
 typedef enum ArchitectureVersion
@@ -367,6 +416,7 @@ typedef enum AsicFamily
     AsicFamily_GCN4,                                            ///< AMD GCN 4 architecture: Polaris.
     AsicFamily_Vega,                                            ///< AMD Vega architecture, including Raven Ridge (ie AMD Ryzen CPU + AMD Vega GPU).
     AsicFamily_RDNA,                                            ///< AMD RDNA architecture
+    AsicFamily_RDNA2,                                           ///< AMD RDNA2 architecture

     AsicFamily_Count                                            ///< Number of enumerated ASIC families
 } AsicFamily;
@@ -389,7 +439,7 @@ typedef struct AGSDeviceInfo_511
     long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.

     int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
-    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+    AGSDisplayInfo_511*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.

     int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
     int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
@@ -421,7 +471,7 @@ typedef struct AGSDeviceInfo_520
     long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.

     int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
-    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+    AGSDisplayInfo_511*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.

     int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
     int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
@@ -458,7 +508,7 @@ typedef struct AGSDeviceInfo_540
                                                                     ///< as the reported local memory will only be a small fraction of the total memory available to the GPU.

     int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
-    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+    AGSDisplayInfo_511*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.

     int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
     int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
@@ -493,7 +543,7 @@ typedef struct AGSDeviceInfo_541
     long long                       localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.

     int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
-    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+    AGSDisplayInfo_511*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.

     int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
     int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
@@ -530,7 +580,7 @@ typedef struct AGSDeviceInfo_542
                                                                     ///< as the reported local memory will only be a small fraction of the total memory available to the GPU.

     int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
-    AGSDisplayInfo*                 displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+    AGSDisplayInfo_511*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.

     int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
     int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
@@ -542,6 +592,47 @@ typedef struct AGSDeviceInfo_542
     int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
 } AGSDeviceInfo_542;

+/// The device info struct used to describe a physical GPU enumerated by AGS
+typedef struct AGSDeviceInfo_600
+{
+    const char*                     adapterString;                  ///< The adapter name string
+    AsicFamily                      asicFamily;                     ///< Set to Unknown if not AMD hardware
+    unsigned int                    isAPU : 1;                      ///< Whether this device is an APU
+    unsigned int                    isPrimaryDevice : 1;            ///< Whether this device is marked as the primary device
+    unsigned int                    isExternal :1;                  ///< Whether this device is a detachable, external device
+    unsigned int                    reservedPadding : 29;           ///< Reserved for future use
+
+    int                             vendorId;                       ///< The vendor id
+    int                             deviceId;                       ///< The device id
+    int                             revisionId;                     ///< The revision id
+
+    int                             numCUs;                         ///< Number of compute units
+    int                             numWGPs;                        ///< Number of RDNA Work Group Processors.  Only valid if ASIC is RDNA onwards.
+
+    int                             numROPs;                        ///< Number of ROPs
+    int                             coreClock;                      ///< Core clock speed at 100% power in MHz
+    int                             memoryClock;                    ///< Memory clock speed at 100% power in MHz
+    int                             memoryBandwidth;                ///< Memory bandwidth in MB/s
+    float                           teraFlops;                      ///< Teraflops of GPU. Zero if not GCN onwards. Calculated from iCoreClock * iNumCUs * 64 Pixels/clk * 2 instructions/MAD
+
+    unsigned long long              localMemoryInBytes;             ///< The size of local memory in bytes. 0 for non AMD hardware.
+    unsigned long long              sharedMemoryInBytes;            ///< The size of system memory available to the GPU in bytes.  It is important to factor this into your VRAM budget for APUs
+                                                                    ///< as the reported local memory will only be a small fraction of the total memory available to the GPU.
+
+    int                             numDisplays;                    ///< The number of active displays found to be attached to this adapter.
+    AGSDisplayInfo_600*             displays;                       ///< List of displays allocated by AGS to be numDisplays in length.
+
+    int                             eyefinityEnabled;               ///< Indicates if Eyefinity is active
+    int                             eyefinityGridWidth;             ///< Contains width of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityGridHeight;            ///< Contains height of the multi-monitor grid that makes up the Eyefinity Single Large Surface.
+    int                             eyefinityResolutionX;           ///< Contains width in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityResolutionY;           ///< Contains height in pixels of the multi-monitor Single Large Surface.
+    int                             eyefinityBezelCompensated;      ///< Indicates if bezel compensation is used for the current SLS display area. 1 if enabled, and 0 if disabled.
+
+    int                             adlAdapterIndex;                ///< Internally used index into the ADL list of adapters
+    int                             reserved;                       ///< reserved field
+} AGSDeviceInfo_600;
+
 struct AGSDeviceInfo;

 /// \defgroup general General API functions
@@ -552,7 +643,7 @@ typedef void* (__stdcall *AGS_ALLOC_CALLBACK_511)( int allocationSize );    ///<
 typedef void* (__stdcall *AGS_ALLOC_CALLBACK)( size_t allocationSize );     ///< AGS user defined allocation prototype
 typedef void (__stdcall *AGS_FREE_CALLBACK)( void* allocationPtr );         ///< AGS user defined free prototype

-/// The configuration options that can be passed in to \ref agsInit
+/// The configuration options that can be passed in to \ref agsInititalize
 typedef struct AGSConfiguration_511
 {
     AGS_ALLOC_CALLBACK_511  allocCallback;                  ///< Optional memory allocation callback. If not supplied, malloc() is used
@@ -571,8 +662,8 @@ typedef union AGSConfiguration
     AGSConfiguration_520    agsConfiguration520;
 } AGSConfiguration;

-/// The top level GPU information returned from \ref agsInit
-typedef struct AGSGPUInfo
+/// The top level GPU information returned from \ref agsInitialize
+typedef struct AGSGPUInfo_511
 {
     int                     agsVersionMajor;                ///< Major field of Major.Minor.Patch AGS version number
     int                     agsVersionMinor;                ///< Minor field of Major.Minor.Patch AGS version number
@@ -584,24 +675,35 @@ typedef struct AGSGPUInfo

     int                     numDevices;                     ///< Number of GPUs in the system
     struct AGSDeviceInfo*   devices;                        ///< List of GPUs in the system
-} AGSGPUInfo;
+} AGSGPUInfo_511;

-/// The struct to specify the display settings to the driver.
-typedef struct AGSDisplaySettings
+/// The top level GPU information returned from \ref agsInit
+typedef struct AGSGPUInfo_600
 {
-    /// The display mode
-    enum
-    {
-        Mode_SDR,                                           ///< SDR mode
-        Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
-        Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
-        Mode_FreesyncHDR_scRGB,                             ///< Freesync HDR scRGB, requiring an FP16 swapchain. A value of 1.0 == 80 nits.
-        // Mode_FreesyncHDR_Gamma22 ADDED IN 5.3.0
-        Mode_FreesyncHDR_Gamma22,                           ///< Freesync HDR Gamma 2.2, requiring a 1010102 UNORM swapchain.  The output needs to be encoded to gamma 2.2.
-        Mode_DolbyVision,                                   ///< Dolby Vision, requiring an 8888 UNORM swapchain
+    const char*             driverVersion;                  ///< The AMD driver package version
+    const char*             radeonSoftwareVersion;          ///< The Radeon Software Version
+
+    int                     numDevices;                     ///< Number of GPUs in the system
+    struct AGSDeviceInfo*   devices;                        ///< List of GPUs in the system
+} AGSGPUInfo_600;

-        Mode_Count                                          ///< Number of enumerated display modes
-    }                       mode;                           ///< The display mode to set the display into
+/// The display mode
+typedef enum AGSDisplaySettings_Mode
+{
+    Mode_SDR,                                           ///< SDR mode
+    Mode_HDR10_PQ,                                      ///< HDR10 PQ encoding, requiring a 1010102 UNORM swapchain and PQ encoding in the output shader.
+    Mode_HDR10_scRGB,                                   ///< HDR10 scRGB, requiring an FP16 swapchain. Values of 1.0 == 80 nits, 125.0 == 10000 nits.
+    Mode_FreesyncHDR_scRGB,                             ///< Freesync HDR scRGB, requiring an FP16 swapchain. A value of 1.0 == 80 nits.
+    Mode_FreesyncHDR_Gamma22,                           ///< Freesync HDR Gamma 2.2, requiring a 1010102 UNORM swapchain.  The output needs to be encoded to gamma 2.2.
+    Mode_DolbyVision,                                   ///< Dolby Vision, requiring an 8888 UNORM swapchain
+
+    Mode_Count                                          ///< Number of enumerated display modes
+} AGSDisplaySettings_Mode;
+
+/// The struct to specify the display settings to the driver.
+typedef struct AGSDisplaySettings_511
+{
+    AGSDisplaySettings_Mode mode;                           ///< The display mode to set the display into

     double                  chromaticityRedX;               ///< Red display primary X coord
     double                  chromaticityRedY;               ///< Red display primary Y coord
@@ -623,6 +725,39 @@ typedef struct AGSDisplaySettings

     // ADDED IN 5.2.0
     int                     flags;                          ///< Bitfield of ::AGSDisplaySettingsFlags
+} AGSDisplaySettings_511;
+
+/// The struct to specify the display settings to the driver.
+typedef struct AGSDisplaySettings_600
+{
+    AGSDisplaySettings_Mode mode;                           ///< The display mode to set the display into
+
+    double                  chromaticityRedX;               ///< Red display primary X coord
+    double                  chromaticityRedY;               ///< Red display primary Y coord
+
+    double                  chromaticityGreenX;             ///< Green display primary X coord
+    double                  chromaticityGreenY;             ///< Green display primary Y coord
+
+    double                  chromaticityBlueX;              ///< Blue display primary X coord
+    double                  chromaticityBlueY;              ///< Blue display primary Y coord
+
+    double                  chromaticityWhitePointX;        ///< White point X coord
+    double                  chromaticityWhitePointY;        ///< White point Y coord
+
+    double                  minLuminance;                   ///< The minimum scene luminance in nits
+    double                  maxLuminance;                   ///< The maximum scene luminance in nits
+
+    double                  maxContentLightLevel;           ///< The maximum content light level in nits (MaxCLL)
+    double                  maxFrameAverageLightLevel;      ///< The maximum frame average light level in nits (MaxFALL)
+
+    unsigned int            disableLocalDimming : 1;        ///< Disables local dimming if possible
+    unsigned int            reservedPadding : 31;           ///< Reserved
+} AGSDisplaySettings_600;
+
+typedef union AGSDisplaySettings
+{
+    AGSDisplaySettings_511 agsDisplaySettings511;
+    AGSDisplaySettings_600 agsDisplaySettings600;
 } AGSDisplaySettings;

 /// The result returned from \ref agsCheckDriverVersion
@@ -642,6 +777,12 @@ typedef enum AGSDriverVersionResult
 ///
 AMD_AGS_API AGSDriverVersionResult agsCheckDriverVersion( const char* radeonSoftwareVersionReported, unsigned int radeonSoftwareVersionRequired );

+///
+/// Function to return the AGS version number.
+///
+/// \return                                         The version number made using AGS_MAKE_VERSION( AMD_AGS_VERSION_MAJOR, AMD_AGS_VERSION_MINOR, AMD_AGS_VERSION_PATCH ).
+///
+AMD_AGS_API int agsGetVersionNumber( void );

 ///
 /// Function used to initialize the AGS library.
@@ -656,7 +797,23 @@ AMD_AGS_API AGSDriverVersionResult agsCheckDriverVersion( const char* radeonSoft
 /// \param [in] config                              Optional pointer to a AGSConfiguration struct to override the default library configuration.
 /// \param [out] gpuInfo                            Optional pointer to a AGSGPUInfo struct which will get filled in for all the GPUs in the system.
 ///
-AMD_AGS_API AGSReturnCode agsInit( AGSContext** context, const AGSConfiguration* config, AGSGPUInfo* gpuInfo );
+AMD_AGS_API AGSReturnCode agsInit( AGSContext** context, const AGSConfiguration* config, AGSGPUInfo_511* gpuInfo );
+
+///
+/// Function used to initialize the AGS library.
+/// agsVersion must be specified as AGS_MAKE_VERSION( AMD_AGS_VERSION_MAJOR, AMD_AGS_VERSION_MINOR, AMD_AGS_VERSION_PATCH ) or the call will return \ref AGS_INVALID_ARGS.
+/// Must be called prior to any of the subsequent AGS API calls.
+/// Must be called prior to ID3D11Device or ID3D12Device creation.
+/// \note The caller of this function should handle the possibility of the call failing in the cases below. One option is to do a vendor id check and only call \ref agsInitialize if there is an AMD GPU present.
+/// \note This function will fail with \ref AGS_NO_AMD_DRIVER_INSTALLED if there is no AMD driver found on the system.
+/// \note This function will fail with \ref AGS_LEGACY_DRIVER in Catalyst versions before 12.20.
+///
+/// \param [in] agsVersion                          The API version specified using the \ref AGS_MAKE_VERSION macro. If this does not match the version in the binary this initialization call will fail.
+/// \param [in] config                              Optional pointer to a AGSConfiguration struct to override the default library configuration.
+/// \param [out] context                            Address of a pointer to a context. This function allocates a context on the heap which is then required for all subsequent API calls.
+/// \param [out] gpuInfo                            Optional pointer to a AGSGPUInfo struct which will get filled in for all the GPUs in the system.
+///
+AMD_AGS_API AGSReturnCode agsInitialize( int agsVersion, const AGSConfiguration* config, AGSContext** context, AGSGPUInfo_600* gpuInfo );

 ///
 ///   Function used to clean up the AGS library.
@@ -665,6 +822,13 @@ AMD_AGS_API AGSReturnCode agsInit( AGSContext** context, const AGSConfiguration*
 ///
 AMD_AGS_API AGSReturnCode agsDeInit( AGSContext* context );

+///
+///   Function used to clean up the AGS library.
+///
+/// \param [in] context                             Pointer to a context. This function will deallocate the context from the heap.
+///
+AMD_AGS_API AGSReturnCode agsDeInitialize( AGSContext* context );
+
 ///
 /// Function used to query the number of GPUs used for Crossfire acceleration.
 /// This may be different from the total number of GPUs present in the system.
@@ -685,7 +849,7 @@ AMD_AGS_API AGSReturnCode agsGetCrossfireGPUCount( AGSContext* context, int* num
 /// \note Freesync HDR Gamma 2.2 mode requires a 1010102 swapchain.
 /// \note Dolby Vision requires a 8888 UNORM swapchain.
 ///
-/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInitialize
 /// \param [in] deviceIndex                         The index of the device listed in \ref AGSGPUInfo::devices.
 /// \param [in] displayIndex                        The index of the display listed in \ref AGSDeviceInfo::displays.
 /// \param [in] settings                            Pointer to the display settings to use.
@@ -726,6 +890,29 @@ typedef struct AGSDX12ExtensionParams
 typedef struct AGSDX12ReturnedParams
 {
     ID3D12Device*           pDevice;                ///< The newly created device
+    /*
+        This was changed to a struct in 6.0.0+ but it's still the size of an unsigned int.
+        Ignoring this change for now.
+
+        typedef struct ExtensionsSupported                          /// Extensions for DX12
+        {
+            unsigned int        intrinsics16 : 1;                   ///< Supported in Radeon Software Version 16.9.2 onwards. ReadFirstLane, ReadLane, LaneID, Swizzle, Ballot, MBCount, Med3, Barycentrics
+            unsigned int        intrinsics17 : 1;                   ///< Supported in Radeon Software Version 17.9.1 onwards. WaveReduce, WaveScan
+            unsigned int        userMarkers : 1;                    ///< Supported in Radeon Software Version 17.9.1 onwards.
+            unsigned int        appRegistration : 1;                ///< Supported in Radeon Software Version 17.9.1 onwards.
+            unsigned int        UAVBindSlot : 1;                    ///< Supported in Radeon Software Version 19.5.1 onwards.
+            unsigned int        intrinsics19 : 1;                   ///< Supported in Radeon Software Version 19.12.2 onwards. DrawIndex, AtomicU64
+            unsigned int        baseVertex : 1;                     ///< Supported in Radeon Software Version 20.2.1 onwards.
+            unsigned int        baseInstance : 1;                   ///< Supported in Radeon Software Version 20.2.1 onwards.
+            unsigned int        getWaveSize : 1;                    ///< Supported in Radeon Software Version 20.5.1 onwards.
+            unsigned int        floatConversion : 1;                ///< Supported in Radeon Software Version 20.5.1 onwards.
+            unsigned int        readLaneAt : 1;                     ///< Supported in Radeon Software Version 20.11.1 onwards.
+            unsigned int        rayHitToken : 1;                    ///< Supported in Radeon Software Version 20.11.1 onwards.
+            unsigned int        padding : 20;                       ///< Reserved
+        } ExtensionsSupported;
+        ExtensionsSupported     extensionsSupported;                ///< List of supported extensions
+    */
+
     unsigned int            extensionsSupported;    ///< Bit mask that \ref agsDriverExtensionsDX12_CreateDevice will fill in to indicate which extensions are supported. See \ref AGSDriverExtensionDX12
 } AGSDX12ReturnedParams;

@@ -747,11 +934,11 @@ typedef struct AGSDX12ReturnedParams
 /// range[ 0 ].Init( D3D12_DESCRIPTOR_RANGE_TYPE_UAV, 1, 0, AGS_DX12_SHADER_INSTRINSICS_SPACE_ID ); // u0 at driver-reserved space id
 /// \endcode
 ///
-/// Newer drivers also support a user-specified slot in which case the register space id is assumed to be 0.  It is important that the \ref AGS_DX12_EXTENSION_INTRINSIC_UAV_BIND_SLOT bit is set
+/// Newer drivers also support a user-specified slot in which case the register space id is assumed to be 0.  It is important that the \ref AGSDX12ReturnedParams::ExtensionsSupported::UAVBindSlot bit is set.
 /// to ensure the driver can support this.  If not, then u0 and \ref AGS_DX12_SHADER_INSTRINSICS_SPACE_ID must be used.
 /// If the driver does support this feature and a non zero slot is required, then the HLSL must also define AMD_EXT_SHADER_INTRINSIC_UAV_OVERRIDE as the matching slot value.
 ///
-/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInitialize
 /// \param [in] creationParams                      Pointer to the struct to specify the existing DX12 device creation parameters.
 /// \param [in] extensionParams                     Optional pointer to the struct to specify DX12 additional device creation parameters.
 /// \param [out] returnedParams                     Pointer to struct to hold all the returned parameters from the call.
@@ -777,7 +964,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DestroyDevice( AGSContext* con
 /// * The intrinsic instructions require a 5.1 shader model.
 /// * The Root Signature will need to use an extra resource and sampler. These are not real resources/samplers, they are just used to encode the intrinsic instruction.
 ///
-/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInitialize
 /// \param [in] device                              The D3D12 device.
 /// \param [out] extensionsSupported                Pointer to a bit mask that this function will fill in to indicate which extensions are supported. See ::AGSDriverExtensionDX12
 ///
@@ -799,7 +986,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX12_DeInit( AGSContext* context );

 ///
 /// Function used to push an AMD user marker onto the command list.
-/// This is only has an effect if \ref AGS_DX12_EXTENSION_USER_MARKERS is present in the extensionsSupported bitfield of \ref agsDriverExtensionsDX12_CreateDevice
+/// This is only has an effect if \ref AGSDX12ReturnedParams::ExtensionsSupported::userMarkers is present.
 /// Supported in Radeon Software Version 17.9.1 onwards.
 ///
 /// \param [in] context                             Pointer to a context.
@@ -912,10 +1099,47 @@ typedef struct AGSDX11ReturnedParams_520
     void*                   breadcrumbBuffer;       ///< The CPU buffer returned if the initialization of the breadcrumb was successful.
 } AGSDX11ReturnedParams_520;

+typedef struct AGSDX11ExtensionsSupported_600               /// Extensions for DX11
+{
+    unsigned int        quadList : 1;                       ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        screenRectList : 1;                 ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        uavOverlap : 1;                     ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        depthBoundsTest : 1;                ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        multiDrawIndirect : 1;              ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        multiDrawIndirectCountIndirect : 1; ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        crossfireAPI : 1;                   ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        createShaderControls : 1;           ///< Supported in Radeon Software Version 16.9.2 onwards.
+    unsigned int        intrinsics16 : 1;                   ///< Supported in Radeon Software Version 16.9.2 onwards. ReadFirstLane, ReadLane, LaneID, Swizzle, Ballot, MBCount, Med3, Barycentrics
+    unsigned int        multiView : 1;                      ///< Supported in Radeon Software Version 16.12.1 onwards.
+    unsigned int        intrinsics17 : 1;                   ///< Supported in Radeon Software Version 17.9.1 onwards. WaveReduce, WaveScan
+    unsigned int        appRegistration : 1;                ///< Supported in Radeon Software Version 17.9.1 onwards.
+    unsigned int        breadcrumbMarkers : 1;              ///< Supported in Radeon Software Version 17.11.1 onwards.
+    unsigned int        MDIDeferredContexts : 1;            ///< Supported in Radeon Software Version 18.8.1 onwards.
+    unsigned int        UAVOverlapDeferredContexts : 1;     ///< Supported in Radeon Software Version 18.8.1 onwards.
+    unsigned int        depthBoundsDeferredContexts : 1;    ///< Supported in Radeon Software Version 18.8.1 onwards.
+    unsigned int        intrinsics19 : 1;                   ///< Supported in Radeon Software Version 19.12.2 onwards. DrawIndex, AtomicU64
+    unsigned int        getWaveSize : 1;                    ///< Supported in Radeon Software Version 20.2.1 onwards.
+    unsigned int        baseVertex : 1;                     ///< Supported in Radeon Software Version 20.2.1 onwards.
+    unsigned int        baseInstance : 1;                   ///< Supported in Radeon Software Version 20.2.1 onwards.
+    unsigned int        padding : 12;                       ///< Reserved
+} AGSDX11ExtensionsSupported_600;
+
+typedef struct AGSDX11ReturnedParams_600
+{
+    ID3D11Device*                  pDevice;                 ///< The newly created device
+    ID3D11DeviceContext*           pImmediateContext;       ///< The newly created immediate device context
+    IDXGISwapChain*                pSwapChain;              ///< The newly created swap chain. This is only created if a valid pSwapChainDesc is supplied in AGSDX11DeviceCreationParams.
+    D3D_FEATURE_LEVEL              featureLevel;            ///< The feature level supported by the newly created device
+    AGSDX11ExtensionsSupported_600 extensionsSupported;     ///< List of supported extensions
+    unsigned int                   crossfireGPUCount;       ///< The number of GPUs that are active for this app
+    void*                          breadcrumbBuffer;        ///< The CPU buffer returned if the initialization of the breadcrumb was successful
+} AGSDX11ReturnedParams_600;
+
 typedef union AGSDX11ReturnedParams
 {
     AGSDX11ReturnedParams_511   agsDX11ReturnedParams511;
     AGSDX11ReturnedParams_520   agsDX11ReturnedParams520;
+    AGSDX11ReturnedParams_600   agsDX11ReturnedParams600;
 } AGSDX11ReturnedParams;

 ///
@@ -925,7 +1149,7 @@ typedef union AGSDX11ReturnedParams
 /// * The shader compiler should not use the D3DCOMPILE_SKIP_OPTIMIZATION (/Od) option, otherwise it will not work.
 /// * The shader compiler needs D3DCOMPILE_ENABLE_STRICTNESS (/Ges) enabled.
 ///
-/// \param [in] context                             Pointer to a context. This is generated by \ref agsInit
+/// \param [in] context                             Pointer to a context. This is generated by \ref agsInititalize
 /// \param [in] creationParams                      Pointer to the struct to specify the existing DX11 device creation parameters.
 /// \param [in] extensionParams                     Optional pointer to the struct to specify DX11 additional device creation parameters.
 /// \param [out] returnedParams                     Pointer to struct to hold all the returned parameters from the call.
@@ -991,7 +1215,7 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_DestroyDevice_511( AGSContext*
 /// \defgroup breadcrumbs Breadcrumb API
 /// API for writing top-of-pipe and bottom-of-pipe markers to help track down GPU hangs.
 ///
-/// The API is available if the \ref AGS_DX11_EXTENSION_BREADCRUMB_MARKERS is present in \ref AGSDX11ReturnedParams::extensionsSupported.
+/// The API is available if the \ref AGSDX11ReturnedParams::ExtensionsSupported::breadcrumbMarkers is present.
 ///
 /// To use the API, a non zero value needs to be specificed in \ref AGSDX11ExtensionParams::numBreadcrumbMarkers.  This enables the API (if available) and allocates a system memory buffer
 /// which is returned to the user in \ref AGSDX11ReturnedParams::breadcrumbBuffer.
@@ -1197,6 +1421,13 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_WriteBreadcrumb( AGSContext* c
 /// API for primitive topologies
 /// @{

+/// Additional topologies supported via extensions
+typedef enum AGSPrimitiveTopology
+{
+    AGS_PRIMITIVE_TOPOLOGY_QUADLIST                         = 7,    ///< Quad list
+    AGS_PRIMITIVE_TOPOLOGY_SCREENRECTLIST                   = 9     ///< Screen rect list
+} AGSPrimitiveTopology;
+
 ///
 /// Function used to set the primitive topology. If you are using any of the extended topology types, then this function should
 /// be called to set ALL topology types.
@@ -1447,6 +1678,22 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_SetViewBroadcastMasks( AGSCont
 ///
 AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_GetMaxClipRects( AGSContext* context, unsigned int* maxRectCount );

+/// The inclusion mode for the rect
+typedef enum AGSClipRect_Mode
+{
+    ClipRectIncluded = 0,   ///< Include the rect
+    ClipRectExcluded = 1    ///< Exclude the rect
+} AGSClipRect_Mode;
+
+/// The clip rectangle struct used by \ref agsDriverExtensionsDX11_SetClipRects
+typedef struct AGSClipRect
+{
+    AGSClipRect_Mode mode; ///< Include/exclude rect region
+    AGSRect          rect; ///< The rect to include/exclude
+} AGSClipRect;
+
+
+
 ///
 /// Function sets clip rectangles.
 ///
@@ -1563,6 +1810,46 @@ AMD_AGS_API AGSReturnCode agsDriverExtensionsDX11_NotifyResourceEndAllAccess( AG

 /// @}

+/// \defgroup typedefs Function pointer typedefs
+/// List of function pointer typedefs for the API
+/// @{
+
+typedef AMD_AGS_API AGSDriverVersionResult  (*AGS_CHECKDRIVERVERSION)( const char*, unsigned int ); ///< \ref agsCheckDriverVersion
+typedef AMD_AGS_API int                     (*AGS_GETVERSIONNUMBER)( void ); ///< \ref agsGetVersionNumber
+typedef AMD_AGS_API AGSReturnCode           (*AGS_INITIALIZE)( int, const AGSConfiguration*, AGSContext**, AGSGPUInfo_600* ); ///< \ref agsInitialize
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DEINITIALIZE)( AGSContext* ); ///< \ref agsDeInitialize
+typedef AMD_AGS_API AGSReturnCode           (*AGS_SETDISPLAYMODE)( AGSContext*, int, int, const AGSDisplaySettings* ); ///< \ref agsSetDisplayMode
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX12_CREATEDEVICE)( AGSContext*, const AGSDX12DeviceCreationParams*, const AGSDX12ExtensionParams*, AGSDX12ReturnedParams* ); ///< \ref agsDriverExtensionsDX12_CreateDevice
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX12_DESTROYDEVICE)( AGSContext*, ID3D12Device*, unsigned int* ); ///< \ref agsDriverExtensionsDX12_DestroyDevice
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX12_PUSHMARKER)( AGSContext*, ID3D12GraphicsCommandList*, const char* ); ///< \ref agsDriverExtensionsDX12_PushMarker
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX12_POPMARKER)( AGSContext*, ID3D12GraphicsCommandList* ); ///< \ref agsDriverExtensionsDX12_PopMarker
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX12_SETMARKER)( AGSContext*, ID3D12GraphicsCommandList*, const char* ); ///< \ref agsDriverExtensionsDX12_SetMarker
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_CREATEDEVICE)( AGSContext*, const AGSDX11DeviceCreationParams*, const AGSDX11ExtensionParams*, AGSDX11ReturnedParams* ); ///< \ref agsDriverExtensionsDX11_CreateDevice
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_DESTROYDEVICE)( AGSContext*, ID3D11Device*, unsigned int*, ID3D11DeviceContext*, unsigned int* ); ///< \ref agsDriverExtensionsDX11_DestroyDevice
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_WRITEBREADCRUMB)( AGSContext*, const AGSBreadcrumbMarker* ); ///< \ref agsDriverExtensionsDX11_WriteBreadcrumb
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_IASETPRIMITIVETOPOLOGY)( AGSContext*, enum D3D_PRIMITIVE_TOPOLOGY ); ///< \ref agsDriverExtensionsDX11_IASetPrimitiveTopology
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_BEGINUAVOVERLAP)( AGSContext*, ID3D11DeviceContext* ); ///< \ref agsDriverExtensionsDX11_BeginUAVOverlap
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_ENDUAVOVERLAP)( AGSContext*, ID3D11DeviceContext* ); ///< \ref agsDriverExtensionsDX11_EndUAVOverlap
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_SETDEPTHBOUNDS)( AGSContext*, ID3D11DeviceContext*, bool, float, float ); ///< \ref agsDriverExtensionsDX11_SetDepthBounds
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_MULTIDRAWINSTANCEDINDIRECT)( AGSContext*, ID3D11DeviceContext*, unsigned int, ID3D11Buffer*, unsigned int, unsigned int ); ///< \ref agsDriverExtensionsDX11_MultiDrawInstancedIndirect
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_MULTIDRAWINDEXEDINSTANCEDINDIRECT)( AGSContext*, ID3D11DeviceContext*, unsigned int, ID3D11Buffer*, unsigned int, unsigned int ); ///< \ref agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_MULTIDRAWINSTANCEDINDIRECTCOUNTINDIRECT)( AGSContext*, ID3D11DeviceContext*, ID3D11Buffer*, unsigned int, ID3D11Buffer*, unsigned int, unsigned int ); ///< \ref agsDriverExtensionsDX11_MultiDrawInstancedIndirectCountIndirect
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_MULTIDRAWINDEXEDINSTANCEDINDIRECTCOUNTINDIRECT)( AGSContext*, ID3D11DeviceContext*, ID3D11Buffer*, unsigned int, ID3D11Buffer*, unsigned int, unsigned int ); ///< \ref agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_SETMAXASYNCCOMPILETHREADCOUNT)( AGSContext*, unsigned int ); ///< \ref agsDriverExtensionsDX11_SetMaxAsyncCompileThreadCount
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_NUMPENDINGASYNCOMPILEJOBS)( AGSContext*, unsigned int* ); ///< \ref agsDriverExtensionsDX11_NumPendingAsyncCompileJobs
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_SETDISKSHADERCACHEENABLED)( AGSContext*, int ); ///< \ref agsDriverExtensionsDX11_SetDiskShaderCacheEnabled
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_SETVIEWBROADCASTMASKS)( AGSContext*, unsigned long long, unsigned long long, int ); ///< \ref agsDriverExtensionsDX11_SetViewBroadcastMasks
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_GETMAXCLIPRECTS)( AGSContext*, unsigned int* ); ///< \ref agsDriverExtensionsDX11_GetMaxClipRects
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_SETCLIPRECTS)( AGSContext*, unsigned int, const AGSClipRect* ); ///< \ref agsDriverExtensionsDX11_SetClipRects
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_CREATEBUFFER)( AGSContext*, const D3D11_BUFFER_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Buffer**, AGSAfrTransferType, AGSAfrTransferEngine ); ///< \ref agsDriverExtensionsDX11_CreateBuffer
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_CREATETEXTURE1D)( AGSContext*, const D3D11_TEXTURE1D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D**, AGSAfrTransferType, AGSAfrTransferEngine ); ///< \ref agsDriverExtensionsDX11_CreateTexture1D
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_CREATETEXTURE2D)( AGSContext*, const D3D11_TEXTURE2D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D**, AGSAfrTransferType, AGSAfrTransferEngine ); ///< \ref agsDriverExtensionsDX11_CreateTexture2D
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_CREATETEXTURE3D)( AGSContext*, const D3D11_TEXTURE3D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D**, AGSAfrTransferType, AGSAfrTransferEngine ); ///< \ref agsDriverExtensionsDX11_CreateTexture3D
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_NOTIFYRESOURCEENDWRITES)( AGSContext*, ID3D11Resource*, const D3D11_RECT*, const unsigned int*, unsigned int ); ///< \ref agsDriverExtensionsDX11_NotifyResourceEndWrites
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_NOTIFYRESOURCEBEGINALLACCESS)( AGSContext*, ID3D11Resource* ); ///< \ref agsDriverExtensionsDX11_NotifyResourceBeginAllAccess
+typedef AMD_AGS_API AGSReturnCode           (*AGS_DRIVEREXTENSIONSDX11_NOTIFYRESOURCEENDALLACCESS)( AGSContext*, ID3D11Resource* ); ///< \ref agsDriverExtensionsDX11_NotifyResourceEndAllAccess
+/// @}
+
 #ifdef __cplusplus
 } // extern "C"
 #endif
diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index ae825462f28..562c4103343 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -1,4 +1,5 @@
 @ stdcall agsDeInit(ptr)
+@ stdcall agsDeInitialize(ptr)
 @ stdcall agsCheckDriverVersion(ptr long)
 @ stub agsDriverExtensionsDX11_BeginUAVOverlap
 @ stub agsDriverExtensionsDX11_CreateBuffer
@@ -38,5 +39,7 @@
 @ stub agsDriverExtensionsDX12_PushMarker
 @ stub agsDriverExtensionsDX12_SetMarker
 @ stdcall agsGetCrossfireGPUCount(ptr ptr)
+@ stdcall agsGetVersionNumber()
 @ stdcall agsInit(ptr ptr ptr)
+@ stdcall agsInitialize(long ptr ptr ptr)
 @ stub agsSetDisplayMode
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 35de799430d..b7b85b7f7a4 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -26,6 +26,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_4_0,
     AMD_AGS_VERSION_5_4_1,
     AMD_AGS_VERSION_5_4_2,
+    AMD_AGS_VERSION_6_0_0,

     AMD_AGS_VERSION_COUNT
 };
@@ -46,17 +47,21 @@ amd_ags_info[AMD_AGS_VERSION_COUNT] =
     {5, 4, 0, sizeof(AGSDeviceInfo_540)},
     {5, 4, 1, sizeof(AGSDeviceInfo_541)},
     {5, 4, 2, sizeof(AGSDeviceInfo_542)},
+    {6, 0, 0, sizeof(AGSDeviceInfo_600)},
 };

 #define DEF_FIELD(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name)}}
 #define DEF_FIELD_520_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), -1, \
-        -1, -1}}
+        -1, -1, -1}}
 #define DEF_FIELD_540_UP(name) {DEVICE_FIELD_##name, {-1, -1, \
         -1, -1, offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name)}}
+#define DEF_FIELD_600_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
+        offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), -1}}

 #define DEVICE_FIELD_adapterString 0
 #define DEVICE_FIELD_architectureVersion 1
@@ -80,7 +85,7 @@ device_struct_fields[] =
     DEF_FIELD_540_UP(asicFamily),
     DEF_FIELD(vendorId),
     DEF_FIELD(deviceId),
-    DEF_FIELD(isPrimaryDevice),
+    DEF_FIELD_600_BELOW(isPrimaryDevice),
     DEF_FIELD(localMemoryInBytes),
     DEF_FIELD(numDisplays),
     DEF_FIELD(displays),
@@ -263,20 +268,20 @@ static enum amd_ags_version determine_ags_version(void)
     return ret;
 }

-struct monitor_enum_context
+struct monitor_enum_context_600
 {
     const char *adapter_name;
-    AGSDisplayInfo **ret_displays;
+    AGSDisplayInfo_600 **ret_displays;
     int *ret_display_count;
 };

-static BOOL WINAPI monitor_enum_proc(HMONITOR hmonitor, HDC hdc, RECT *rect, LPARAM context)
+static BOOL WINAPI monitor_enum_proc_600(HMONITOR hmonitor, HDC hdc, RECT *rect, LPARAM context)
 {
-    struct monitor_enum_context *c = (struct monitor_enum_context *)context;
+    struct monitor_enum_context_600 *c = (struct monitor_enum_context_600 *)context;
     MONITORINFOEXA monitor_info;
-    AGSDisplayInfo *new_alloc;
+    AGSDisplayInfo_600 *new_alloc;
     DISPLAY_DEVICEA device;
-    AGSDisplayInfo *info;
+    AGSDisplayInfo_600 *info;
     unsigned int i, mode;
     DEVMODEA dev_mode;

@@ -321,7 +326,7 @@ static BOOL WINAPI monitor_enum_proc(HMONITOR hmonitor, HDC hdc, RECT *rect, LPA
             strcpy(info->name, "Unknown");
         }
         if (monitor_info.dwFlags & MONITORINFOF_PRIMARY)
-            info->displayFlags |= AGS_DISPLAYFLAG_PRIMARY_DISPLAY;
+            info->isPrimaryDisplay = 1;

         mode = 0;
         memset(&dev_mode, 0, sizeof(dev_mode));
@@ -360,9 +365,9 @@ static BOOL WINAPI monitor_enum_proc(HMONITOR hmonitor, HDC hdc, RECT *rect, LPA
     return TRUE;
 }

-static void init_device_displays(const char *adapter_name, AGSDisplayInfo **ret_displays, int *ret_display_count)
+static void init_device_displays_600(const char *adapter_name, AGSDisplayInfo_600 **ret_displays, int *ret_display_count)
 {
-    struct monitor_enum_context context;
+    struct monitor_enum_context_600 context;

     TRACE("adapter_name %s.\n", debugstr_a(adapter_name));

@@ -370,9 +375,32 @@ static void init_device_displays(const char *adapter_name, AGSDisplayInfo **ret_
     context.ret_displays = ret_displays;
     context.ret_display_count = ret_display_count;

-    EnumDisplayMonitors(NULL, NULL, monitor_enum_proc, (LPARAM)&context);
+    EnumDisplayMonitors(NULL, NULL, monitor_enum_proc_600, (LPARAM)&context);
+}
+
+static void init_device_displays_511(const char *adapter_name, AGSDisplayInfo_511 **ret_displays, int *ret_display_count)
+{
+    AGSDisplayInfo_600 *displays = NULL;
+    int display_count = 0;
+    int i;
+    *ret_displays = NULL;
+    *ret_display_count = 0;
+
+    init_device_displays_600(adapter_name, &displays, &display_count);
+
+    if ((*ret_displays = heap_alloc(sizeof(**ret_displays) * display_count)))
+    {
+        for (i = 0; i < display_count; i++)
+        {
+            memcpy(&(*ret_displays)[i], &displays[i], sizeof(AGSDisplayInfo_511));
+        }
+        *ret_display_count = display_count;
+    }
+
+    heap_free(displays);
 }

+
 static AGSReturnCode init_ags_context(AGSContext *context)
 {
     AGSReturnCode ret;
@@ -427,11 +455,31 @@ static AGSReturnCode init_ags_context(AGSContext *context)
         }
         SET_DEVICE_FIELD(device, localMemoryInBytes, ULONG64, context->version, local_memory_size);
         if (!i)
-            SET_DEVICE_FIELD(device, isPrimaryDevice, int, context->version, 1);
+        {
+            if (context->version >= AMD_AGS_VERSION_6_0_0)
+            {
+                // This is a bitfield now... Nice...
+                struct AGSDeviceInfo_600 *device_600 = (struct AGSDeviceInfo_600 *)device;
+                device_600->isPrimaryDevice = 1;
+            }
+            else
+            {
+                SET_DEVICE_FIELD(device, isPrimaryDevice, int, context->version, 1);
+            }
+        }

-        init_device_displays(vk_properties->deviceName,
-                GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo *, context->version),
-                GET_DEVICE_FIELD_ADDR(device, numDisplays, int, context->version));
+        if (context->version >= AMD_AGS_VERSION_6_0_0)
+        {
+            init_device_displays_600(vk_properties->deviceName,
+                    GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo_600 *, context->version),
+                    GET_DEVICE_FIELD_ADDR(device, numDisplays, int, context->version));
+        }
+        else
+        {
+            init_device_displays_511(vk_properties->deviceName,
+                    GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo_511 *, context->version),
+                    GET_DEVICE_FIELD_ADDR(device, numDisplays, int, context->version));
+        }

         device += amd_ags_info[context->version].device_size;
     }
@@ -439,7 +487,7 @@ static AGSReturnCode init_ags_context(AGSContext *context)
     return AGS_SUCCESS;
 }

-AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *config, AGSGPUInfo *gpu_info)
+AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *config, AGSGPUInfo_511 *gpu_info)
 {
     struct AGSContext *object;
     AGSReturnCode ret;
@@ -477,7 +525,47 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     return AGS_SUCCESS;
 }

+AGSReturnCode WINAPI agsInitialize(int ags_version, const AGSConfiguration *config, AGSContext **context, AGSGPUInfo_600 *gpu_info)
+{
+    struct AGSContext *object;
+    AGSReturnCode ret;
+
+    TRACE("ags_verison %d, context %p, config %p, gpu_info %p.\n", ags_version, context, config, gpu_info);
+
+    if (!context || !gpu_info)
+        return AGS_INVALID_ARGS;
+
+    if (config)
+        FIXME("Ignoring config %p.\n", config);
+
+    if (!(object = heap_alloc(sizeof(*object))))
+        return AGS_OUT_OF_MEMORY;
+
+    if ((ret = init_ags_context(object)) != AGS_SUCCESS)
+    {
+        heap_free(object);
+        return ret;
+    }
+
+    memset(gpu_info, 0, sizeof(*gpu_info));
+    gpu_info->driverVersion = "20.50.03.05-210326a-365573E-RadeonSoftwareAdrenalin2020";
+    gpu_info->radeonSoftwareVersion  = "21.3.2";
+    gpu_info->numDevices = object->device_count;
+    gpu_info->devices = object->devices;
+
+    TRACE("Created context %p.\n", object);
+
+    *context = object;
+
+    return AGS_SUCCESS;
+}
+
 AGSReturnCode WINAPI agsDeInit(AGSContext *context)
+{
+    return agsDeInitialize(context);
+}
+
+AGSReturnCode WINAPI agsDeInitialize(AGSContext *context)
 {
     unsigned int i;
     BYTE *device;
@@ -491,7 +579,7 @@ AGSReturnCode WINAPI agsDeInit(AGSContext *context)
         device = (BYTE *)context->devices;
         for (i = 0; i < context->device_count; ++i)
         {
-            heap_free(GET_DEVICE_FIELD_ADDR(device, displays, AGSDisplayInfo *, context->version));
+            heap_free(GET_DEVICE_FIELD_ADDR(device, displays, void *, context->version));
             device += amd_ags_info[context->version].device_size;
         }
         heap_free(context->devices);
@@ -561,6 +649,15 @@ AGSDriverVersionResult WINAPI agsCheckDriverVersion(const char* version_reported
     return AGS_SOFTWAREVERSIONCHECK_OK;
 }

+int WINAPI agsGetVersionNumber(void)
+{
+    enum amd_ags_version version = determine_ags_version();
+
+    TRACE("version %d.\n", version);
+
+    return AGS_MAKE_VERSION(amd_ags_info[version].major, amd_ags_info[version].minor, amd_ags_info[version].patch);
+}
+
 BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p.\n", instance, reason, reserved);
From 4d7523540486ce8fb038332f795758b153429818 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Sat, 8 May 2021 05:20:08 +0100
Subject: [PATCH] amd_ags_x64: Implement AGS 6.0.1

Signed-off-by: Joshua Ashton <joshua@froggi.es>
---
 dlls/amd_ags_x64/amd_ags.h          |  8 ++++----
 dlls/amd_ags_x64/amd_ags_x64_main.c | 13 +++++++++----
 2 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags.h b/dlls/amd_ags_x64/amd_ags.h
index af9c48c1dd5..20fef455f00 100644
--- a/dlls/amd_ags_x64/amd_ags.h
+++ b/dlls/amd_ags_x64/amd_ags.h
@@ -151,7 +151,7 @@

 #define AMD_AGS_VERSION_MAJOR 6             ///< AGS major version
 #define AMD_AGS_VERSION_MINOR 0             ///< AGS minor version
-#define AMD_AGS_VERSION_PATCH 0             ///< AGS patch version
+#define AMD_AGS_VERSION_PATCH 1             ///< AGS patch version

 #ifdef __cplusplus
 extern "C" {
@@ -906,8 +906,8 @@ typedef struct AGSDX12ReturnedParams
             unsigned int        baseInstance : 1;                   ///< Supported in Radeon Software Version 20.2.1 onwards.
             unsigned int        getWaveSize : 1;                    ///< Supported in Radeon Software Version 20.5.1 onwards.
             unsigned int        floatConversion : 1;                ///< Supported in Radeon Software Version 20.5.1 onwards.
-            unsigned int        readLaneAt : 1;                     ///< Supported in Radeon Software Version 20.11.1 onwards.
-            unsigned int        rayHitToken : 1;                    ///< Supported in Radeon Software Version 20.11.1 onwards.
+            unsigned int        readLaneAt : 1;                     ///< Supported in Radeon Software Version 20.11.2 onwards.
+            unsigned int        rayHitToken : 1;                    ///< Supported in Radeon Software Version 20.11.2 onwards.
             unsigned int        padding : 20;                       ///< Reserved
         } ExtensionsSupported;
         ExtensionsSupported     extensionsSupported;                ///< List of supported extensions
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index b7b85b7f7a4..97fda0b5230 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -27,6 +27,7 @@ enum amd_ags_version
     AMD_AGS_VERSION_5_4_1,
     AMD_AGS_VERSION_5_4_2,
     AMD_AGS_VERSION_6_0_0,
+    AMD_AGS_VERSION_6_0_1,

     AMD_AGS_VERSION_COUNT
 };
@@ -48,20 +49,24 @@ amd_ags_info[AMD_AGS_VERSION_COUNT] =
     {5, 4, 1, sizeof(AGSDeviceInfo_541)},
     {5, 4, 2, sizeof(AGSDeviceInfo_542)},
     {6, 0, 0, sizeof(AGSDeviceInfo_600)},
+    {6, 0, 1, sizeof(AGSDeviceInfo_600)},
 };

 #define DEF_FIELD(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name), \
+        offsetof(AGSDeviceInfo_600, name)}}
 #define DEF_FIELD_520_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), -1, \
-        -1, -1, -1}}
+        -1, -1, -1, -1}}
 #define DEF_FIELD_540_UP(name) {DEVICE_FIELD_##name, {-1, -1, \
         -1, -1, offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name)}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), offsetof(AGSDeviceInfo_600, name), \
+        offsetof(AGSDeviceInfo_600, name)}}
 #define DEF_FIELD_600_BELOW(name) {DEVICE_FIELD_##name, {offsetof(AGSDeviceInfo_511, name), offsetof(AGSDeviceInfo_520, name), \
         offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_520, name), offsetof(AGSDeviceInfo_540, name), \
-        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), -1}}
+        offsetof(AGSDeviceInfo_541, name), offsetof(AGSDeviceInfo_542, name), -1, \
+        -1}}

 #define DEVICE_FIELD_adapterString 0
 #define DEVICE_FIELD_architectureVersion 1
From 074fec36577b7334f5223d0c59d47b219b03f263 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 6 Oct 2021 22:56:07 +0300
Subject: [PATCH] amd_ags_x64: Add agsDriverExtensionsDX11_Init() semi-stub.

---
 dlls/amd_ags_x64/amd_ags_x64.spec   | 2 +-
 dlls/amd_ags_x64/amd_ags_x64_main.c | 8 ++++++++
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64.spec b/dlls/amd_ags_x64/amd_ags_x64.spec
index 562c4103343..ebb026da35e 100644
--- a/dlls/amd_ags_x64/amd_ags_x64.spec
+++ b/dlls/amd_ags_x64/amd_ags_x64.spec
@@ -14,7 +14,7 @@
 @ stub agsDriverExtensionsDX11_EndUAVOverlap
 @ stub agsDriverExtensionsDX11_GetMaxClipRects
 @ stub agsDriverExtensionsDX11_IASetPrimitiveTopology
-@ stub agsDriverExtensionsDX11_Init
+@ stdcall agsDriverExtensionsDX11_Init(ptr ptr long ptr)
 @ stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirect
 @ stub agsDriverExtensionsDX11_MultiDrawIndexedInstancedIndirectCountIndirect
 @ stub agsDriverExtensionsDX11_MultiDrawInstancedIndirect
diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index 97fda0b5230..bbf5efff741 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -663,6 +663,14 @@ int WINAPI agsGetVersionNumber(void)
     return AGS_MAKE_VERSION(amd_ags_info[version].major, amd_ags_info[version].minor, amd_ags_info[version].patch);
 }

+AGSReturnCode WINAPI agsDriverExtensionsDX11_Init( AGSContext* context, ID3D11Device* device, unsigned int uavSlot, unsigned int* extensionsSupported )
+{
+    FIXME("context %p, device %p, uavSlot %u, extensionsSupported %p stub.\n", context, device, uavSlot, extensionsSupported);
+
+    *extensionsSupported = 0;
+    return AGS_SUCCESS;
+}
+
 BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, void *reserved)
 {
     TRACE("%p, %u, %p.\n", instance, reason, reserved);
From c7c0c87cdfa767d5588837dfadbaba541775ed35 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 10 Nov 2021 22:11:59 +0300
Subject: [PATCH] amd_ags_x64: Bump driver version to 21.10.2.

For FH5.
---
 dlls/amd_ags_x64/amd_ags_x64_main.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/amd_ags_x64/amd_ags_x64_main.c b/dlls/amd_ags_x64/amd_ags_x64_main.c
index bbf5efff741..264d92af019 100644
--- a/dlls/amd_ags_x64/amd_ags_x64_main.c
+++ b/dlls/amd_ags_x64/amd_ags_x64_main.c
@@ -518,8 +518,8 @@ AGSReturnCode WINAPI agsInit(AGSContext **context, const AGSConfiguration *confi
     gpu_info->agsVersionMajor = amd_ags_info[object->version].major;
     gpu_info->agsVersionMinor = amd_ags_info[object->version].minor;
     gpu_info->agsVersionPatch = amd_ags_info[object->version].patch;
-    gpu_info->driverVersion = "20.50.03.05-210326a-365573E-RadeonSoftwareAdrenalin2020";
-    gpu_info->radeonSoftwareVersion  = "21.3.2";
+    gpu_info->driverVersion = "21.30.25.05-211005a-372402E-RadeonSoftware";
+    gpu_info->radeonSoftwareVersion  = "21.10.2";
     gpu_info->numDevices = object->device_count;
     gpu_info->devices = object->devices;

@@ -553,8 +553,8 @@ AGSReturnCode WINAPI agsInitialize(int ags_version, const AGSConfiguration *conf
     }

     memset(gpu_info, 0, sizeof(*gpu_info));
-    gpu_info->driverVersion = "20.50.03.05-210326a-365573E-RadeonSoftwareAdrenalin2020";
-    gpu_info->radeonSoftwareVersion  = "21.3.2";
+    gpu_info->driverVersion = "21.30.25.05-211005a-372402E-RadeonSoftware";
+    gpu_info->radeonSoftwareVersion  = "21.10.2";
     gpu_info->numDevices = object->device_count;
     gpu_info->devices = object->devices;

From 7c5d821826cdd2c4251cc65ecc7119537f8025d6 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 21 Apr 2021 18:40:25 +0300
Subject: [PATCH] wine.inf: Set amd_ags_x64 to built-in for Forza Horizon 4.

For FH4.
---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 1506a73573b..a2b45b3c28f 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4234,6 +4234,7 @@ HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steam
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKCU,Software\Wine\AppDefaults\ForzaHorizon4.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\RDR2.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 ;;Likely want *80 and *90 too, but those require removing Wine's manifest files.
From 239879d9f92bedb35e1999a6884c5cb7a76ffa4b Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 15 Sep 2021 00:21:19 +0300
Subject: [PATCH] wine.inf: Set amd_ags_x64 to built-in for DeathLoop.

CW-Bug-ID: #19427
---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index faba4be0b91..16582b1baaf 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4234,6 +4234,7 @@ HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steam
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKCU,Software\Wine\AppDefaults\Deathloop.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\ForzaHorizon4.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\RDR2.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"

From 318e90ad39261891c323469e1920282bc0580248 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 10 Nov 2021 20:34:24 +0300
Subject: [PATCH] wine.inf: Set amd_ags_x64 to built-in for FH5.

CW-Bug-Id: #19618
---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 09a0b1b3eaf..c9371ee3882 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4234,6 +4234,7 @@ HKCU,Software\Wine\AppDefaults\Nickelodeon All-Star Brawl.exe\DllOverrides,"winu
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKCU,Software\Wine\AppDefaults\ForzaHorizon5.exe\DllOverrides,"amd_ags_x64",0x2,"builtin"
 HKCU,Software\Wine\AppDefaults\Deathloop.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\ForzaHorizon4.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
From 422efcea69fe9a56c384e25074f135d6f5d78abe Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 10 Nov 2021 20:30:40 +0300
Subject: [PATCH] wine.inf: HACK: Spoof Win81 for msedgewebview2.exe.

A proper fix depends on other process window Vulkan rendering
and Direct Compositing implementation.

CW-Bug-ID: #19618

For FH5.
---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 3c927c207a8..09a0b1b3eaf 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4234,6 +4234,7 @@ HKCU,Software\Wine\AppDefaults\Paradox Launcher.exe\DllOverrides,"libglesv2",,"d
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKCU,Software\Wine\AppDefaults\msedgewebview2.exe,"Version",,"win81"
 HKCU,Software\Wine\AppDefaults\ForzaHorizon5.exe\DllOverrides,"amd_ags_x64",0x2,"builtin"
 HKCU,Software\Wine\AppDefaults\Deathloop.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\ForzaHorizon4.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"

